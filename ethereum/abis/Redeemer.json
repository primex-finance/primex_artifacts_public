{
  "address": "0x03bA57169E206A37F706a529c9a470425D7CE676",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "TokenReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "VestingScheduleCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "computeNextVestingScheduleIdForHolder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "computeReleasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "computeVestingScheduleIdForAddressAndIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createVestingSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epmx",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getAllVestingSchedulesByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedeemerStorage.VestingSchedule[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getLastVestingScheduleForHolder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedeemerStorage.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingIdAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "getVestingSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedeemerStorage.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingScheduleByAddressAndIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedeemerStorage.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingSchedulesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getVestingSchedulesCountByBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingSchedulesTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_epmx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pmx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whiteListingEnabled",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialUnlockPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedeemerStorage.VestingParams",
          "name": "_vestingParams",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBlackListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pmx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_statuses",
          "type": "bool[]"
        }
      ],
      "name": "setStatusesToBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_statuses",
          "type": "bool[]"
        }
      ],
      "name": "setStatusesToWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialUnlockPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedeemerStorage.VestingParams",
          "name": "_vestingParams",
          "type": "tuple"
        }
      ],
      "name": "setVestingParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switchWhiteListingFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slicePeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialUnlockPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemDeadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawUnclaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbfb0d836db325a2cbf170ec262343076d893db17bbc434b5da3847e02707ef33",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0x03bA57169E206A37F706a529c9a470425D7CE676",
    "transactionIndex": 16,
    "gasUsed": "1979584",
    "logsBloom": "0x00000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc0e9df5076c55b942f03963d9ac6062fb8ca8a5aef006223aa7efe9a6cb72d61",
    "transactionHash": "0xbfb0d836db325a2cbf170ec262343076d893db17bbc434b5da3847e02707ef33",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 21663053,
        "transactionHash": "0xbfb0d836db325a2cbf170ec262343076d893db17bbc434b5da3847e02707ef33",
        "address": "0x03bA57169E206A37F706a529c9a470425D7CE676",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 44,
        "blockHash": "0xc0e9df5076c55b942f03963d9ac6062fb8ca8a5aef006223aa7efe9a6cb72d61"
      }
    ],
    "blockNumber": 21663053,
    "cumulativeGasUsed": "3689511",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4e8dc4ba13b1ae643cb5ad6cbbc5146b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epmx\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getAllVestingSchedulesByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedeemerStorage.VestingSchedule[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getLastVestingScheduleForHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedeemerStorage.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedeemerStorage.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedeemerStorage.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_epmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whiteListingEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialUnlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedeemerStorage.VestingParams\",\"name\":\"_vestingParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_statuses\",\"type\":\"bool[]\"}],\"name\":\"setStatusesToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_statuses\",\"type\":\"bool[]\"}],\"name\":\"setStatusesToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialUnlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedeemerStorage.VestingParams\",\"name\":\"_vestingParams\",\"type\":\"tuple\"}],\"name\":\"setVestingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchWhiteListingFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialUnlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"computeNextVestingScheduleIdForHolder(address)\":{\"details\":\"Computes the next vesting schedule identifier for a given holder address.\"},\"computeReleasableAmount(bytes32)\":{\"returns\":{\"_0\":\"the vested amount\"}},\"computeVestingScheduleIdForAddressAndIndex(address,uint256)\":{\"details\":\"Computes the vesting schedule identifier for an address and an index.\"},\"createVestingSchedule(address,uint256)\":{\"params\":{\"_amount\":\"total amount of tokens to be released at the end of the vesting\",\"_beneficiary\":\"address of the beneficiary to whom vested tokens are transferred\"}},\"getAllVestingSchedulesByAddress(address)\":{\"params\":{\"holder\":\"User's address\"}},\"getLastVestingScheduleForHolder(address)\":{\"details\":\"Returns the last vesting schedule for a given holder address.\"},\"getVestingIdAtIndex(uint256)\":{\"details\":\"Returns the vesting schedule id at the given index.\",\"returns\":{\"_0\":\"the vesting id\"}},\"getVestingSchedule(bytes32)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getVestingSchedulesCount()\":{\"details\":\"Returns the number of vesting schedules managed by this contract.\",\"returns\":{\"_0\":\"the number of vesting schedules\"}},\"getVestingSchedulesCountByBeneficiary(address)\":{\"details\":\"Returns the number of vesting schedules associated to a beneficiary.\",\"returns\":{\"_0\":\"the number of vesting schedules\"}},\"getVestingSchedulesTotalAmount()\":{\"returns\":{\"_0\":\"the total amount of vesting schedules\"}},\"getWithdrawableAmount()\":{\"details\":\"Returns the amount of tokens that can be withdrawn by the owner.\"},\"initialize(address,address,address,address,bool,(uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"This function should only be called once during the initial setup of the contract.\",\"params\":{\"_epmx\":\"The address of the EPMX\",\"_pmx\":\"The address of the PMX\",\"_registry\":\"The address of the Primex Registry\",\"_treasury\":\"The address of the Primex treasury to which unclaimed PMX tokens will be sent after the redeemDeadline.\",\"_vestingParams\":\"VestingParams struct for initialization\",\"_whiteListingEnabled\":\"enables or disables whitelisting\"}},\"release(bytes32,uint256)\":{\"params\":{\"amount\":\"the amount to release\",\"vestingScheduleId\":\"the vesting schedule identifier\"}},\"setStatusesToBlackList(address[],bool[])\":{\"details\":\"Adds or removes an address to the blackList. Only SMALL_TIMELOCK_ADMIN can call it.\"},\"setStatusesToWhiteList(address[],bool[])\":{\"details\":\"Adds or removes an address to the whitelist. Only SMALL_TIMELOCK_ADMIN can call it.\"},\"setVestingParams((uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Sets the vesting params.Only SMALL_TIMELOCK_ADMIN can call it.\"},\"switchWhiteListingFlag()\":{\"details\":\"Enables or disables whitelisting. Only SMALL_TIMELOCK_ADMIN can call it.\"}},\"title\":\"Redeemer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeReleasableAmount(bytes32)\":{\"notice\":\"Computes the vested amount of tokens for the given vesting schedule identifier.\"},\"createVestingSchedule(address,uint256)\":{\"notice\":\"Creates a new vesting schedule for a beneficiary.\"},\"epmx()\":{\"notice\":\"Retrieves the instance of the EPMX contract.\"},\"getAllVestingSchedulesByAddress(address)\":{\"notice\":\"Returns all of the user's schedules\"},\"getVestingSchedule(bytes32)\":{\"notice\":\"Returns the vesting schedule information for a given identifier.\"},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"notice\":\"Returns the vesting schedule information for a given holder and index.\"},\"getVestingSchedulesTotalAmount()\":{\"notice\":\"Returns the total amount of vesting schedules.\"},\"initialize(address,address,address,address,bool,(uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Initializes the Redeemer contract.\"},\"isBlackListed(address)\":{\"notice\":\"Returns true if the address is blacklisted\"},\"isWhiteListed(address)\":{\"notice\":\"Returns true if the address is whitelisted\"},\"pmx()\":{\"notice\":\"Retrieves the instance of the PMX contract.\"},\"registry()\":{\"notice\":\"Retrieves the instance of PrimexRegistry contract.\"},\"release(bytes32,uint256)\":{\"notice\":\"Release vested amount of tokens.\"},\"treasury()\":{\"notice\":\"Retrieves the instance of the treasury contract.\"},\"vestingParams()\":{\"notice\":\"Retrieves the vesting params of the contract\"},\"withdrawUnclaimed()\":{\"notice\":\"Withdraw the withdrawable amount amount if possible.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Redeemer.sol\":\"Redeemer\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373337333434303639303234\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/IRedeemer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// A modified version of TokenVesting.sol\\n// Origin: https://github.com/AbdelStark/token-vesting-contracts/blob/7776245a5b3edf18cb0ae73ca49d005004186d80/src/TokenVesting.sol\\n// Token burn and initial unlock logic added\\npragma solidity 0.8.26;\\n\\nimport {IRedeemerStorage} from \\\"./IRedeemerStorage.sol\\\";\\n\\ninterface IRedeemer is IRedeemerStorage{ \\n\\n    event VestingScheduleCreated(address _sender, address _beneficiary, uint256 _amount, bytes32 _id);\\n    event TokenReleased(address _beneficiary, uint256 _amount, bytes32 _id);\\n\\n    /**\\n     * @notice Creates a new vesting schedule for a beneficiary.\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param _amount total amount of tokens to be released at the end of the vesting\\n     */\\n\\n    function createVestingSchedule(\\n        address _beneficiary,\\n        uint256 _amount\\n    ) external;\\n\\n\\n    /**\\n     * @notice Release vested amount of tokens.\\n     * @param vestingScheduleId the vesting schedule identifier\\n     * @param amount the amount to release\\n     */\\n\\n    function release(\\n        bytes32 vestingScheduleId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Returns the number of vesting schedules associated to a beneficiary.\\n     * @return the number of vesting schedules\\n     */\\n\\n    function getVestingSchedulesCountByBeneficiary(\\n        address _beneficiary\\n    ) external view returns (uint256);\\n\\n\\n    /**\\n     * @dev Returns the vesting schedule id at the given index.\\n     * @return the vesting id\\n     */\\n\\n    function getVestingIdAtIndex(\\n        uint256 index\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the vesting schedule information for a given holder and index.\\n     * @return the vesting schedule structure information\\n     */\\n\\n    function getVestingScheduleByAddressAndIndex(\\n        address holder,\\n        uint256 index\\n    ) external view returns (VestingSchedule memory);\\n\\n    /**\\n     * @notice Returns the total amount of vesting schedules.\\n     * @return the total amount of vesting schedules\\n     */\\n\\n    function getVestingSchedulesTotalAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns all of the user's schedules\\n     * @param holder User's address\\n     */\\n\\n    function getAllVestingSchedulesByAddress(address holder) external view returns(VestingSchedule[] memory);\\n\\n    /**\\n     * @dev Returns the number of vesting schedules managed by this contract.\\n     * @return the number of vesting schedules\\n     */\\n\\n    function getVestingSchedulesCount() external view returns (uint256);\\n\\n\\n    /**\\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\\n     * @return the vested amount\\n     */\\n\\n    function computeReleasableAmount(\\n        bytes32 vestingScheduleId\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getVestingSchedule(\\n        bytes32 vestingScheduleId\\n    ) external view returns (VestingSchedule memory);\\n\\n     /**\\n     * @dev Computes the next vesting schedule identifier for a given holder address.\\n     */\\n\\n    function computeNextVestingScheduleIdForHolder(\\n        address holder\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the last vesting schedule for a given holder address.\\n     */\\n\\n    function getLastVestingScheduleForHolder(\\n        address holder\\n    ) external view returns (VestingSchedule memory);\\n\\n    /**\\n     * @dev Computes the vesting schedule identifier for an address and an index.\\n     */\\n\\n    function computeVestingScheduleIdForAddressAndIndex(\\n        address holder,\\n        uint256 index\\n    ) external pure returns (bytes32);\\n}\",\"keccak256\":\"0xa2145c54bde9820312c9b047674e9ae5ae6a067725d622806e9745507b5d7cc9\",\"license\":\"Apache-2.0\"},\"src/IRedeemerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// A modified version of TokenVesting.sol\\n// Origin: https://github.com/AbdelStark/token-vesting-contracts/blob/7776245a5b3edf18cb0ae73ca49d005004186d80/src/TokenVesting.sol\\n// Token burn and initial unlock logic added\\npragma solidity 0.8.26;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n\\ninterface IRedeemerStorage {\\n\\n     struct VestingSchedule {\\n        // beneficiary of tokens after they are released\\n        address beneficiary;\\n        // cliff time of the vesting start in seconds since the UNIX epoch\\n        uint256 cliff;\\n        // total amount of tokens to be released at the end of the vesting\\n        uint256 amountTotal;\\n        // amount of tokens released\\n        uint256 released;\\n    }\\n\\n    struct VestingParams {\\n        // _cliff duration in seconds of the cliff in which tokens will begin to vest\\n        uint256 cliff;\\n        // duration of the vesting period in seconds\\n        uint256 duration;\\n        // duration of a slice period for the vesting in seconds\\n        uint256 slicePeriodSeconds;\\n        // initial unlock - % of PMX that will be received immediately after providing ePMX\\n        uint256 initialUnlockPercentage;\\n        // a deadline after which new vesting schedules cannot be created\\n        uint256 redeemDeadline;\\n    }\\n\\n    /**\\n     * @notice Retrieves the instance of the PMX contract.\\n     */\\n     function pmx() external view returns (IERC20);\\n\\n    /**\\n     * @notice Retrieves the instance of the EPMX contract.\\n     */\\n     function epmx() external view returns (ERC20Burnable);\\n\\n    /**\\n     * @notice Retrieves the instance of PrimexRegistry contract.\\n     */\\n    function registry() external view returns (IAccessControl);\\n\\n    /**\\n     * @notice Retrieves the instance of the treasury contract.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the vesting params of the contract\\n     */\\n    function vestingParams() external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Returns true if the address is blacklisted\\n     */\\n    function isBlackListed(address) external view returns (bool);\\n\\n     /**\\n     * @notice Returns true if the address is whitelisted\\n     */\\n    function isWhiteListed(address) external view returns (bool);\\n\\n}\",\"keccak256\":\"0xcce7e230dd0cf4121b079a2b96d704e307aec419b1b7d6b4cbaef6100aea2f5c\",\"license\":\"Apache-2.0\"},\"src/Redeemer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// A modified version of TokenVesting.sol\\n// Origin: https://github.com/AbdelStark/token-vesting-contracts/blob/7776245a5b3edf18cb0ae73ca49d005004186d80/src/TokenVesting.sol\\n// Token burn and initial unlock logic added\\npragma solidity 0.8.26;\\n\\n// OpenZeppelin dependencies\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {RedeemerStorage} from \\\"./RedeemerStorage.sol\\\";\\nimport {IRedeemer} from \\\"./IRedeemer.sol\\\";\\nimport {WadRayMath} from \\\"./libraries/WadRayMath.sol\\\";\\n\\n/**\\n * @title Redeemer\\n */\\ncontract Redeemer is IRedeemer, RedeemerStorage {\\n\\n    bytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\n\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not granted with _role\\n     * @param _role The role that is being checked for a function caller\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        require(registry.hasRole(_role, msg.sender), \\\"Redeemer: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n  \\n    /**\\n     * @dev Reverts if the vesting schedule does not exist\\n     */\\n    modifier onlyIfVestingScheduleExists(bytes32 vestingScheduleId) {\\n        require(vestingSchedules[vestingScheduleId].amountTotal > 0);\\n        _;\\n    }\\n\\n    /**\\n     * @notice  Initializes the Redeemer contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _epmx The address of the EPMX\\n     * @param _pmx The address of the PMX\\n     * @param _registry The address of the Primex Registry\\n     * @param _treasury The address of the Primex treasury to which unclaimed PMX tokens will be sent after the redeemDeadline.\\n     * @param _whiteListingEnabled enables or disables whitelisting\\n     * @param _vestingParams VestingParams struct for initialization\\n     */\\n    function initialize(\\n        address _epmx, \\n        address _pmx,\\n        address _registry,\\n        address _treasury,\\n        bool _whiteListingEnabled,\\n        VestingParams calldata _vestingParams\\n    ) external initializer {\\n        require(\\n            IERC165(_epmx).supportsInterface(type(IERC20).interfaceId) && \\n            IERC165(_registry).supportsInterface(type(IAccessControl).interfaceId),\\n            \\\"Redeemer: address is not supported\\\"\\n        );\\n        epmx = ERC20Burnable(_epmx);\\n        pmx = IERC20(_pmx);\\n        registry = IAccessControl(_registry);\\n        treasury = _treasury;\\n        whiteListingEnabled = _whiteListingEnabled;\\n        _setVestingParams(_vestingParams);\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**\\n     * @dev This function is called for plain Ether transfers, i.e. for every call with empty calldata.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Fallback function is executed if none of the other functions match the function\\n     * identifier or no data was provided with the function call.\\n     */\\n    fallback() external payable {}\\n\\n\\n    /**\\n     * @dev Enables or disables whitelisting. Only SMALL_TIMELOCK_ADMIN can call it.\\n     */\\n   \\n    function switchWhiteListingFlag() external onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        whiteListingEnabled = !whiteListingEnabled;\\n    }\\n\\n     /**\\n     * @dev Adds or removes an address to the whitelist. Only SMALL_TIMELOCK_ADMIN can call it.\\n     */\\n    function setStatusesToWhiteList(address[] calldata _addresses, bool[] calldata _statuses) external onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _addresses.length; i++) {\\n            isWhiteListed[_addresses[i]] = _statuses[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds or removes an address to the blackList. Only SMALL_TIMELOCK_ADMIN can call it.\\n     */\\n\\n    function setStatusesToBlackList(address[] calldata _addresses, bool[] calldata _statuses) external onlyRole(SMALL_TIMELOCK_ADMIN){\\n        for (uint256 i; i < _addresses.length; i++) {\\n            isBlackListed[_addresses[i]] = _statuses[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the vesting params.Only SMALL_TIMELOCK_ADMIN can call it.\\n     */\\n\\n    function setVestingParams(VestingParams calldata _vestingParams) external onlyRole(SMALL_TIMELOCK_ADMIN){\\n        _setVestingParams(_vestingParams);\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n    function createVestingSchedule(\\n        address _beneficiary,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        _onlyAccessible(msg.sender);\\n        _onlyAccessible(_beneficiary);\\n        uint256 currentTime = getCurrentTime();\\n        require(currentTime <= vestingParams.redeemDeadline, \\\"Redeemer: the redeemDeadline has passed\\\");\\n        require(\\n            getWithdrawableAmount() >= _amount,\\n            \\\"Redeemer: cannot create vesting schedule because not sufficient tokens\\\"\\n        );\\n        require(_amount > 0, \\\"Redeemer: amount must be > 0\\\");\\n        IERC20(epmx).safeTransferFrom(msg.sender, address(this), _amount);\\n        epmx.burn(_amount);\\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(\\n            _beneficiary\\n        );\\n\\n        // calculate initialUnlockPercentage\\n        uint256 initialAmount = _amount.wmul(vestingParams.initialUnlockPercentage);\\n        if(initialAmount > 0) pmx.safeTransfer(_beneficiary, initialAmount);\\n        uint256 cliff = currentTime + vestingParams.cliff;\\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\\n            _beneficiary,\\n            cliff,\\n            _amount - initialAmount,\\n            0\\n        );\\n        vestingSchedulesTotalAmount += _amount - initialAmount;\\n        vestingSchedulesIds.push(vestingScheduleId);\\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\\n        holdersVestingCount[_beneficiary] = currentVestingCount + 1;\\n        emit VestingScheduleCreated(msg.sender, _beneficiary, _amount, vestingScheduleId);\\n\\n    }\\n\\n    /**\\n     * @notice Withdraw the withdrawable amount amount if possible.\\n     */\\n    function withdrawUnclaimed() external onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        require(getCurrentTime() > vestingParams.redeemDeadline, \\\"Redeemer: the redeemDeadline has not passed\\\");\\n        uint256 withdrawAmount = getWithdrawableAmount();\\n        if(withdrawAmount > 0) pmx.safeTransfer(treasury, withdrawAmount);\\n    }\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function release(\\n        bytes32 vestingScheduleId,\\n        uint256 amount\\n    ) external override nonReentrant onlyIfVestingScheduleExists(vestingScheduleId) {\\n        _onlyAccessible(msg.sender);\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        require(\\n            msg.sender == vestingSchedule.beneficiary,\\n            \\\"Redeemer: only beneficiary can release vested tokens\\\"\\n        );\\n        require(\\n            vestingSchedule.cliff <= block.timestamp,\\n            \\\"Redeemer: the cliff timestamp has not passed yet\\\"\\n        );\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        require(\\n            vestedAmount >= amount,\\n            \\\"Redeemer: cannot release tokens, not enough vested tokens\\\"\\n        );\\n        vestingSchedule.released = vestingSchedule.released + amount;\\n        vestingReleasedTotalAmount = vestingReleasedTotalAmount += amount;\\n        pmx.safeTransfer(vestingSchedule.beneficiary, amount);\\n        emit TokenReleased(msg.sender, amount, vestingScheduleId);\\n\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function getVestingSchedulesCountByBeneficiary(\\n        address _beneficiary\\n    ) external view override returns (uint256) {\\n        return holdersVestingCount[_beneficiary];\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function getVestingIdAtIndex(\\n        uint256 index\\n    ) external view override returns (bytes32) {\\n        require(\\n            index < getVestingSchedulesCount(),\\n            \\\"Redeemer: index out of bounds\\\"\\n        );\\n        return vestingSchedulesIds[index];\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function getAllVestingSchedulesByAddress(address holder) external view override returns(VestingSchedule[] memory){\\n        uint256 count = holdersVestingCount[holder];\\n        VestingSchedule[] memory schedules = new VestingSchedule[](count);\\n        for(uint256 i; i < count; i++){\\n            schedules[i] = getVestingScheduleByAddressAndIndex(holder, i);\\n        }\\n        return schedules;\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function getVestingScheduleByAddressAndIndex(\\n        address holder,\\n        uint256 index\\n    ) public view override returns (VestingSchedule memory) {\\n        return\\n            getVestingSchedule(\\n                computeVestingScheduleIdForAddressAndIndex(holder, index)\\n            );\\n    }\\n\\n     /**\\n     * @inheritdoc IRedeemer\\n     */\\n    function getVestingSchedulesTotalAmount() external view override returns (uint256) {\\n        return vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n    function getVestingSchedulesCount() public view override returns (uint256) {\\n        return vestingSchedulesIds.length;\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n    function computeReleasableAmount(\\n        bytes32 vestingScheduleId\\n    )\\n        external\\n        view\\n        override \\n        onlyIfVestingScheduleExists(vestingScheduleId)\\n        returns (uint256)\\n    {\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        return _computeReleasableAmount(vestingSchedule);\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information for a given identifier.\\n     * @return the vesting schedule structure information\\n     */\\n    function getVestingSchedule(\\n        bytes32 vestingScheduleId\\n    ) public view returns (VestingSchedule memory) {\\n        return vestingSchedules[vestingScheduleId];\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\\n     */\\n    function getWithdrawableAmount() public view returns (uint256 amount) {\\n        uint256 balance = pmx.balanceOf(address(this));\\n        if(balance > vestingSchedulesTotalAmount - vestingReleasedTotalAmount){\\n            return pmx.balanceOf(address(this)) + vestingReleasedTotalAmount - vestingSchedulesTotalAmount;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function computeNextVestingScheduleIdForHolder(\\n        address holder\\n    ) public view override returns (bytes32) {\\n        return\\n            computeVestingScheduleIdForAddressAndIndex(\\n                holder,\\n                holdersVestingCount[holder]\\n            );\\n    }\\n\\n     /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function getLastVestingScheduleForHolder(\\n        address holder\\n    ) external view override returns (VestingSchedule memory) {\\n        return\\n            vestingSchedules[\\n                computeVestingScheduleIdForAddressAndIndex(\\n                    holder,\\n                    holdersVestingCount[holder] - 1\\n                )\\n            ];\\n    }\\n\\n     /**\\n     * @inheritdoc IRedeemer\\n     */\\n\\n    function computeVestingScheduleIdForAddressAndIndex(\\n        address holder,\\n        uint256 index\\n    ) public pure override returns (bytes32) {\\n        return keccak256(abi.encodePacked(holder, index));\\n    }\\n\\n    /**\\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\\n     * @return the amount of releasable tokens\\n     */\\n    function _computeReleasableAmount(\\n        VestingSchedule memory vestingSchedule\\n    ) internal view returns (uint256) {\\n        // Retrieve the current time.\\n        uint256 currentTime = getCurrentTime();\\n        // If the current time is after the vesting period, all tokens are releasable,\\n        // minus the amount already released.\\n        if (\\n            currentTime >= vestingSchedule.cliff + vestingParams.duration - vestingParams.cliff\\n        ) {\\n            return vestingSchedule.amountTotal - vestingSchedule.released;\\n        }\\n        // Otherwise, some tokens are releasable.\\n        // Compute the number of full vesting periods that have elapsed.\\n        uint256 timeFromStart = currentTime - (vestingSchedule.cliff - vestingParams.cliff);\\n        uint256 secondsPerSlice = vestingParams.slicePeriodSeconds;\\n        uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\\n        uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\\n        // Compute the amount of tokens that are vested.\\n        uint256 vestedAmount = (vestingSchedule.amountTotal *\\n            vestedSeconds) / vestingParams.duration;\\n        // Subtract the amount already released and return.\\n        return vestedAmount - vestingSchedule.released;\\n    }\\n\\n    /**\\n     * @dev Throws if the user is not whitelisted when the whiteListingEnabled is true otherwise it is throws if the user is blacklisted. \\n     * @param _user The address to be checked\\n     */\\n    function _onlyAccessible(address _user) internal view {\\n        if(whiteListingEnabled){\\n            require(isWhiteListed[_user], \\\"Redeemer: user is not in the whitelist\\\");\\n        } else {\\n            require(!isBlackListed[_user], \\\"Redeemer: user is blacklisted\\\");\\n        }   \\n    }\\n\\n    function _setVestingParams(VestingParams calldata _vestingParams) internal {\\n        require(_vestingParams.duration > 0, \\\"Redeemer: duration must be > 0\\\");\\n        require(\\n            _vestingParams.slicePeriodSeconds > 0,\\n            \\\"Redeemer: slicePeriodSeconds must be > 0\\\"\\n        );\\n        require(_vestingParams.duration >= _vestingParams.cliff, \\\"Redeemer: duration must be >= cliff\\\");\\n        vestingParams = _vestingParams;\\n    }\\n\\n    /**\\n     * @dev Returns the current time.\\n     * @return the current timestamp in seconds.\\n     */\\n    function getCurrentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc88c502898f3e910d26f8c6cf1087b8534c10ce21a17d70f555157fcceec6d57\",\"license\":\"Apache-2.0\"},\"src/RedeemerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// A modified version of TokenVesting.sol\\n// Origin: https://github.com/AbdelStark/token-vesting-contracts/blob/7776245a5b3edf18cb0ae73ca49d005004186d80/src/TokenVesting.sol\\n// Token burn and initial unlock logic added\\npragma solidity 0.8.26;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {IRedeemerStorage} from \\\"./IRedeemerStorage.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n\\nabstract contract RedeemerStorage is IRedeemerStorage, ReentrancyGuardUpgradeable {\\n    ERC20Burnable public override epmx;\\n    IERC20 public override pmx;\\n    IAccessControl public override registry;\\n    address public override treasury;\\n    VestingParams public override vestingParams;\\n    mapping(address => bool) public override isBlackListed;\\n    mapping(address => bool) public override isWhiteListed;\\n\\n\\n    bool internal whiteListingEnabled;\\n    bytes32[] internal vestingSchedulesIds;\\n    mapping(bytes32 => VestingSchedule) internal vestingSchedules;\\n    uint256 internal vestingSchedulesTotalAmount;\\n    uint256 internal vestingReleasedTotalAmount;\\n    mapping(address => uint256) internal holdersVestingCount;\\n}\\n\",\"keccak256\":\"0x9b81e61927bd566fa5cb42fba8f53eb292a05f0d09de0152468f4ffbe74a25e4\",\"license\":\"Apache-2.0\"},\"src/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b61225c806100d96000396000f3fe60806040526004361061018b5760003560e01c80637b103999116100e0578063c4b0290811610084578063f38ec10411610061578063f38ec104146104f3578063f51321d714610513578063f7c469f014610533578063f9079b371461055357005b8063c4b0290814610454578063e47d6060146104a3578063ea1bb3d5146104d357005b806390be10cc116100bd57806390be10cc146103df57806397ae48fe146103f45780639ef346b414610414578063abb823681461043457005b80637b103999146103725780637e913dc6146103925780638af104da146103bf57005b8063419544a0116101475780635a7bb69a116101245780635a7bb69a146102bc57806361d027b3146102f257806366afd8ef146103125780636f9170f61461033257005b8063419544a01461025a578063450327e41461027a57806348deb471146102a757005b80630460f0f31461019457806313083617146101d157806313de353b146101f057806320391ff61461021057806333fc56d914610225578063348829fd1461023a57005b3661019257005b005b3480156101a057600080fd5b506001546101b4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101dd57600080fd5b50600c545b6040519081526020016101c8565b3480156101fc57600080fd5b5061019261020b366004611df2565b610573565b34801561021c57600080fd5b50610192610626565b34801561023157600080fd5b506101926106d8565b34801561024657600080fd5b506000546101b4906001600160a01b031681565b34801561026657600080fd5b50610192610275366004611e2a565b610809565b34801561028657600080fd5b5061029a610295366004611e54565b610b9e565b6040516101c89190611e6f565b3480156102b357600080fd5b50600e546101e2565b3480156102c857600080fd5b506101e26102d7366004611e54565b6001600160a01b031660009081526010602052604090205490565b3480156102fe57600080fd5b506003546101b4906001600160a01b031681565b34801561031e57600080fd5b5061019261032d366004611ee4565b610c51565b34801561033e57600080fd5b5061036261034d366004611e54565b600a6020526000908152604090205460ff1681565b60405190151581526020016101c8565b34801561037e57600080fd5b506002546101b4906001600160a01b031681565b34801561039e57600080fd5b506103b26103ad366004611e54565b610ed5565b6040516101c89190611f06565b3480156103cb57600080fd5b506101e26103da366004611e2a565b610f5b565b3480156103eb57600080fd5b506101e2610fa3565b34801561040057600080fd5b5061019261040f366004611f86565b6110bd565b34801561042057600080fd5b506103b261042f366004611ff7565b6111ef565b34801561044057600080fd5b5061019261044f36600461201e565b611245565b34801561046057600080fd5b5060045460055460065460075460085461047b949392919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101c8565b3480156104af57600080fd5b506103626104be366004611e54565b60096020526000908152604090205460ff1681565b3480156104df57600080fd5b506101e26104ee366004611ff7565b6114f6565b3480156104ff57600080fd5b5061019261050e366004611f86565b61156d565b34801561051f57600080fd5b506103b261052e366004611e2a565b611697565b34801561053f57600080fd5b506101e261054e366004611e54565b6116b3565b34801561055f57600080fd5b506101e261056e366004611ff7565b6116d7565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190612096565b6106195760405162461bcd60e51b8152600401610610906120b3565b60405180910390fd5b61062282611755565b5050565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190612096565b6106c35760405162461bcd60e51b8152600401610610906120b3565b50600b805460ff19811660ff90911615179055565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190612096565b6107755760405162461bcd60e51b8152600401610610906120b3565b60085442116107da5760405162461bcd60e51b815260206004820152602b60248201527f52656465656d65723a207468652072656465656d446561646c696e652068617360448201526a081b9bdd081c185cdcd95960aa1b6064820152608401610610565b60006107e4610fa3565b9050801561062257600354600154610622916001600160a01b0391821691168361189a565b6108116118f9565b61081a33611931565b61082382611931565b60085442908111156108875760405162461bcd60e51b815260206004820152602760248201527f52656465656d65723a207468652072656465656d446561646c696e6520686173604482015266081c185cdcd95960ca1b6064820152608401610610565b81610890610fa3565b10156109135760405162461bcd60e51b815260206004820152604660248201527f52656465656d65723a2063616e6e6f74206372656174652076657374696e672060448201527f7363686564756c652062656361757365206e6f742073756666696369656e7420606482015265746f6b656e7360d01b608482015260a401610610565b600082116109635760405162461bcd60e51b815260206004820152601c60248201527f52656465656d65723a20616d6f756e74206d757374206265203e2030000000006044820152606401610610565b60005461097b906001600160a01b0316333085611a1f565b600054604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156109c157600080fd5b505af11580156109d5573d6000803e3d6000fd5b5050505060006109e4846116b3565b6007549091506000906109f8908590611a5e565b90508015610a1757600154610a17906001600160a01b0316868361189a565b600454600090610a2790856120f6565b90506040518060800160405280876001600160a01b031681526020018281526020018387610a559190612109565b815260006020918201819052858152600d8252604090819020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820155606090910151600390910155610ab18286612109565b600e6000828254610ac291906120f6565b9091555050600c805460018181019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018490556001600160a01b03871660009081526010602052604090205490610b1d9082906120f6565b6001600160a01b038816600081815260106020908152604091829020939093558051338152928301919091528101879052606081018590527fcb568f78b4393f1bc11f6025173b5db625abed9f9ae8a7eea059e8e6bf453cd19060800160405180910390a15050505050610622600160008051602061220783398151915255565b6001600160a01b0381166000908152601060205260408120546060918167ffffffffffffffff811115610bd357610bd361211c565b604051908082528060200260200182016040528015610c0c57816020015b610bf9611da9565b815260200190600190039081610bf15790505b50905060005b82811015610c4957610c248582611697565b828281518110610c3657610c36612132565b6020908102919091010152600101610c12565b509392505050565b610c596118f9565b6000828152600d60205260409020600201548290610c7657600080fd5b610c7f33611931565b6000838152600d6020526040902080546001600160a01b03163314610d035760405162461bcd60e51b815260206004820152603460248201527f52656465656d65723a206f6e6c792062656e65666963696172792063616e2072604482015273656c656173652076657374656420746f6b656e7360601b6064820152608401610610565b4281600101541115610d705760405162461bcd60e51b815260206004820152603060248201527f52656465656d65723a2074686520636c6966662074696d657374616d7020686160448201526f1cc81b9bdd081c185cdcd959081e595d60821b6064820152608401610610565b6040805160808101825282546001600160a01b031681526001830154602082015260028301549181019190915260038201546060820152600090610db390611aac565b905083811015610e2b5760405162461bcd60e51b815260206004820152603960248201527f52656465656d65723a2063616e6e6f742072656c6561736520746f6b656e732c60448201527f206e6f7420656e6f7567682076657374656420746f6b656e73000000000000006064820152608401610610565b838260030154610e3b91906120f6565b826003018190555083600f6000828254610e5591906120f6565b9182905550600f55508154600154610e7a916001600160a01b0391821691168661189a565b60408051338152602081018690529081018690527f348479508f3c8c8c8a78a143056c770bcf93ab7e19f68557bdbcbe1f741294a19060600160405180910390a1505050610622600160008051602061220783398151915255565b610edd611da9565b6001600160a01b038216600090815260106020526040812054600d9190610f0c9085906103da90600190612109565b81526020808201929092526040908101600020815160808101835281546001600160a01b0316815260018201549381019390935260028101549183019190915260030154606082015292915050565b6040516bffffffffffffffffffffffff19606084901b166020820152603481018290526000906054016040516020818303038152906040528051906020012090505b92915050565b6001546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190612148565b9050600f54600e546110269190612109565b8111156110b957600e54600f546001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190612148565b6110a991906120f6565b6110b39190612109565b91505090565b5090565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e9190612096565b61115a5760405162461bcd60e51b8152600401610610906120b3565b60005b848110156111e75783838281811061117757611177612132565b905060200201602081019061118c9190612161565b600960008888858181106111a2576111a2612132565b90506020020160208101906111b79190611e54565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905560010161115d565b505050505050565b6111f7611da9565b506000908152600d6020908152604091829020825160808101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600390910154606082015290565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561128b5750825b905060008267ffffffffffffffff1660011480156112a85750303b155b9050811580156112b6575080155b156112d45760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156112fe57845460ff60401b1916600160401b1785555b6040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b038c16906301ffc9a790602401602060405180830381865afa158015611349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136d9190612096565b80156113e357506040516301ffc9a760e01b8152637965db0b60e01b60048201526001600160a01b038a16906301ffc9a790602401602060405180830381865afa1580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190612096565b61143a5760405162461bcd60e51b815260206004820152602260248201527f52656465656d65723a2061646472657373206973206e6f7420737570706f7274604482015261195960f21b6064820152608401610610565b600080546001600160a01b03199081166001600160a01b038e8116919091179092556001805482168d84161790556002805482168c841617905560038054909116918a16919091179055600b805460ff191688151517905561149b86611755565b6114a3611b6c565b83156114e957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6000818152600d6020526040812060020154829061151357600080fd5b6000838152600d6020908152604091829020825160808101845281546001600160a01b031681526001820154928101929092526002810154928201929092526003820154606082015261156590611aac565b949350505050565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612096565b61160a5760405162461bcd60e51b8152600401610610906120b3565b60005b848110156111e75783838281811061162757611627612132565b905060200201602081019061163c9190612161565b600a600088888581811061165257611652612132565b90506020020160208101906116679190611e54565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905560010161160d565b61169f611da9565b6116ac61042f8484610f5b565b9392505050565b6001600160a01b038116600090815260106020526040812054610f9d908390610f5b565b60006116e2600c5490565b82106117305760405162461bcd60e51b815260206004820152601d60248201527f52656465656d65723a20696e646578206f7574206f6620626f756e64730000006044820152606401610610565b600c828154811061174357611743612132565b90600052602060002001549050919050565b60008160200135116117a95760405162461bcd60e51b815260206004820152601e60248201527f52656465656d65723a206475726174696f6e206d757374206265203e203000006044820152606401610610565b600081604001351161180e5760405162461bcd60e51b815260206004820152602860248201527f52656465656d65723a20736c696365506572696f645365636f6e6473206d7573604482015267074206265203e20360c41b6064820152608401610610565b80356020820135101561186f5760405162461bcd60e51b815260206004820152602360248201527f52656465656d65723a206475726174696f6e206d757374206265203e3d20636c60448201526234b33360e91b6064820152608401610610565b803560045560208101356005556040810135600655606081013560075560800135600855565b505050565b6040516001600160a01b0383811660248301526044820183905261189591859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611b7e565b60008051602061220783398151915280546001190161192b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600b5460ff16156119b6576001600160a01b0381166000908152600a602052604090205460ff166119b35760405162461bcd60e51b815260206004820152602660248201527f52656465656d65723a2075736572206973206e6f7420696e20746865207768696044820152651d195b1a5cdd60d21b6064820152608401610610565b50565b6001600160a01b03811660009081526009602052604090205460ff16156119b35760405162461bcd60e51b815260206004820152601d60248201527f52656465656d65723a207573657220697320626c61636b6c69737465640000006044820152606401610610565b6040516001600160a01b038481166024830152838116604483015260648201839052611a589186918216906323b872dd906084016118c7565b50505050565b6000670de0b6b3a7640000611a8e611a768585611be1565b611a896002670de0b6b3a764000061217e565b611c22565b6116ac919061217e565b600160008051602061220783398151915255565b600454600554602083015160009242929091611ac891906120f6565b611ad29190612109565b8110611aec57826060015183604001516116ac9190612109565b6004546020840151600091611b0091612109565b611b0a9083612109565b6006549091506000611b1c828461217e565b90506000611b2a83836121a0565b90506000600460010154828960400151611b4491906121a0565b611b4e919061217e565b9050876060015181611b609190612109565b98975050505050505050565b611b74611c51565b611b7c611c9a565b565b6000611b936001600160a01b03841683611ca2565b90508051600014158015611bb8575080806020019051810190611bb69190612096565b155b1561189557604051635274afe760e01b81526001600160a01b0384166004820152602401610610565b6000811580611c0557508282611bf781836121a0565b9250611c03908361217e565b145b610f9d57604051631550e8b760e01b815260040160405180910390fd5b600082611c2f83826120f6565b9150811015610f9d57604051630a77254f60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611b7c57604051631afcd79f60e31b815260040160405180910390fd5b611a98611c51565b60606116ac8383600084600080856001600160a01b03168486604051611cc891906121b7565b60006040518083038185875af1925050503d8060008114611d05576040519150601f19603f3d011682016040523d82523d6000602084013e611d0a565b606091505b5091509150611d1a868383611d24565b9695505050505050565b606082611d3957611d3482611d80565b6116ac565b8151158015611d5057506001600160a01b0384163b155b15611d7957604051639996b31560e01b81526001600160a01b0385166004820152602401610610565b50806116ac565b805115611d905780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b600060a08284031215611dec57600080fd5b50919050565b600060a08284031215611e0457600080fd5b6116ac8383611dda565b80356001600160a01b0381168114611e2557600080fd5b919050565b60008060408385031215611e3d57600080fd5b611e4683611e0e565b946020939093013593505050565b600060208284031215611e6657600080fd5b6116ac82611e0e565b602080825282518282018190526000918401906040840190835b81811015611ed957611ec383855180516001600160a01b031682526020808201519083015260408082015190830152606090810151910152565b6020939093019260809290920191600101611e89565b509095945050505050565b60008060408385031215611ef757600080fd5b50508035926020909101359150565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808101610f9d565b60008083601f840112611f4c57600080fd5b50813567ffffffffffffffff811115611f6457600080fd5b6020830191508360208260051b8501011115611f7f57600080fd5b9250929050565b60008060008060408587031215611f9c57600080fd5b843567ffffffffffffffff811115611fb357600080fd5b611fbf87828801611f3a565b909550935050602085013567ffffffffffffffff811115611fdf57600080fd5b611feb87828801611f3a565b95989497509550505050565b60006020828403121561200957600080fd5b5035919050565b80151581146119b357600080fd5b600080600080600080610140878903121561203857600080fd5b61204187611e0e565b955061204f60208801611e0e565b945061205d60408801611e0e565b935061206b60608801611e0e565b9250608087013561207b81612010565b915061208a8860a08901611dda565b90509295509295509295565b6000602082840312156120a857600080fd5b81516116ac81612010565b6020808252601390820152722932b232b2b6b2b91d102327a92124a22222a760691b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f9d57610f9d6120e0565b81810381811115610f9d57610f9d6120e0565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561215a57600080fd5b5051919050565b60006020828403121561217357600080fd5b81356116ac81612010565b60008261219b57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610f9d57610f9d6120e0565b6000825160005b818110156121d857602081860181015185830152016121be565b50600092019182525091905056fe5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d89b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220bac7ebdc68708826a8f0b365955c6e1672b54f7e2bb84247bf70a3afe1fb877964736f6c634300081a0033",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c80637b103999116100e0578063c4b0290811610084578063f38ec10411610061578063f38ec104146104f3578063f51321d714610513578063f7c469f014610533578063f9079b371461055357005b8063c4b0290814610454578063e47d6060146104a3578063ea1bb3d5146104d357005b806390be10cc116100bd57806390be10cc146103df57806397ae48fe146103f45780639ef346b414610414578063abb823681461043457005b80637b103999146103725780637e913dc6146103925780638af104da146103bf57005b8063419544a0116101475780635a7bb69a116101245780635a7bb69a146102bc57806361d027b3146102f257806366afd8ef146103125780636f9170f61461033257005b8063419544a01461025a578063450327e41461027a57806348deb471146102a757005b80630460f0f31461019457806313083617146101d157806313de353b146101f057806320391ff61461021057806333fc56d914610225578063348829fd1461023a57005b3661019257005b005b3480156101a057600080fd5b506001546101b4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101dd57600080fd5b50600c545b6040519081526020016101c8565b3480156101fc57600080fd5b5061019261020b366004611df2565b610573565b34801561021c57600080fd5b50610192610626565b34801561023157600080fd5b506101926106d8565b34801561024657600080fd5b506000546101b4906001600160a01b031681565b34801561026657600080fd5b50610192610275366004611e2a565b610809565b34801561028657600080fd5b5061029a610295366004611e54565b610b9e565b6040516101c89190611e6f565b3480156102b357600080fd5b50600e546101e2565b3480156102c857600080fd5b506101e26102d7366004611e54565b6001600160a01b031660009081526010602052604090205490565b3480156102fe57600080fd5b506003546101b4906001600160a01b031681565b34801561031e57600080fd5b5061019261032d366004611ee4565b610c51565b34801561033e57600080fd5b5061036261034d366004611e54565b600a6020526000908152604090205460ff1681565b60405190151581526020016101c8565b34801561037e57600080fd5b506002546101b4906001600160a01b031681565b34801561039e57600080fd5b506103b26103ad366004611e54565b610ed5565b6040516101c89190611f06565b3480156103cb57600080fd5b506101e26103da366004611e2a565b610f5b565b3480156103eb57600080fd5b506101e2610fa3565b34801561040057600080fd5b5061019261040f366004611f86565b6110bd565b34801561042057600080fd5b506103b261042f366004611ff7565b6111ef565b34801561044057600080fd5b5061019261044f36600461201e565b611245565b34801561046057600080fd5b5060045460055460065460075460085461047b949392919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101c8565b3480156104af57600080fd5b506103626104be366004611e54565b60096020526000908152604090205460ff1681565b3480156104df57600080fd5b506101e26104ee366004611ff7565b6114f6565b3480156104ff57600080fd5b5061019261050e366004611f86565b61156d565b34801561051f57600080fd5b506103b261052e366004611e2a565b611697565b34801561053f57600080fd5b506101e261054e366004611e54565b6116b3565b34801561055f57600080fd5b506101e261056e366004611ff7565b6116d7565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190612096565b6106195760405162461bcd60e51b8152600401610610906120b3565b60405180910390fd5b61062282611755565b5050565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190612096565b6106c35760405162461bcd60e51b8152600401610610906120b3565b50600b805460ff19811660ff90911615179055565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190612096565b6107755760405162461bcd60e51b8152600401610610906120b3565b60085442116107da5760405162461bcd60e51b815260206004820152602b60248201527f52656465656d65723a207468652072656465656d446561646c696e652068617360448201526a081b9bdd081c185cdcd95960aa1b6064820152608401610610565b60006107e4610fa3565b9050801561062257600354600154610622916001600160a01b0391821691168361189a565b6108116118f9565b61081a33611931565b61082382611931565b60085442908111156108875760405162461bcd60e51b815260206004820152602760248201527f52656465656d65723a207468652072656465656d446561646c696e6520686173604482015266081c185cdcd95960ca1b6064820152608401610610565b81610890610fa3565b10156109135760405162461bcd60e51b815260206004820152604660248201527f52656465656d65723a2063616e6e6f74206372656174652076657374696e672060448201527f7363686564756c652062656361757365206e6f742073756666696369656e7420606482015265746f6b656e7360d01b608482015260a401610610565b600082116109635760405162461bcd60e51b815260206004820152601c60248201527f52656465656d65723a20616d6f756e74206d757374206265203e2030000000006044820152606401610610565b60005461097b906001600160a01b0316333085611a1f565b600054604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156109c157600080fd5b505af11580156109d5573d6000803e3d6000fd5b5050505060006109e4846116b3565b6007549091506000906109f8908590611a5e565b90508015610a1757600154610a17906001600160a01b0316868361189a565b600454600090610a2790856120f6565b90506040518060800160405280876001600160a01b031681526020018281526020018387610a559190612109565b815260006020918201819052858152600d8252604090819020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820155606090910151600390910155610ab18286612109565b600e6000828254610ac291906120f6565b9091555050600c805460018181019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018490556001600160a01b03871660009081526010602052604090205490610b1d9082906120f6565b6001600160a01b038816600081815260106020908152604091829020939093558051338152928301919091528101879052606081018590527fcb568f78b4393f1bc11f6025173b5db625abed9f9ae8a7eea059e8e6bf453cd19060800160405180910390a15050505050610622600160008051602061220783398151915255565b6001600160a01b0381166000908152601060205260408120546060918167ffffffffffffffff811115610bd357610bd361211c565b604051908082528060200260200182016040528015610c0c57816020015b610bf9611da9565b815260200190600190039081610bf15790505b50905060005b82811015610c4957610c248582611697565b828281518110610c3657610c36612132565b6020908102919091010152600101610c12565b509392505050565b610c596118f9565b6000828152600d60205260409020600201548290610c7657600080fd5b610c7f33611931565b6000838152600d6020526040902080546001600160a01b03163314610d035760405162461bcd60e51b815260206004820152603460248201527f52656465656d65723a206f6e6c792062656e65666963696172792063616e2072604482015273656c656173652076657374656420746f6b656e7360601b6064820152608401610610565b4281600101541115610d705760405162461bcd60e51b815260206004820152603060248201527f52656465656d65723a2074686520636c6966662074696d657374616d7020686160448201526f1cc81b9bdd081c185cdcd959081e595d60821b6064820152608401610610565b6040805160808101825282546001600160a01b031681526001830154602082015260028301549181019190915260038201546060820152600090610db390611aac565b905083811015610e2b5760405162461bcd60e51b815260206004820152603960248201527f52656465656d65723a2063616e6e6f742072656c6561736520746f6b656e732c60448201527f206e6f7420656e6f7567682076657374656420746f6b656e73000000000000006064820152608401610610565b838260030154610e3b91906120f6565b826003018190555083600f6000828254610e5591906120f6565b9182905550600f55508154600154610e7a916001600160a01b0391821691168661189a565b60408051338152602081018690529081018690527f348479508f3c8c8c8a78a143056c770bcf93ab7e19f68557bdbcbe1f741294a19060600160405180910390a1505050610622600160008051602061220783398151915255565b610edd611da9565b6001600160a01b038216600090815260106020526040812054600d9190610f0c9085906103da90600190612109565b81526020808201929092526040908101600020815160808101835281546001600160a01b0316815260018201549381019390935260028101549183019190915260030154606082015292915050565b6040516bffffffffffffffffffffffff19606084901b166020820152603481018290526000906054016040516020818303038152906040528051906020012090505b92915050565b6001546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190612148565b9050600f54600e546110269190612109565b8111156110b957600e54600f546001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190612148565b6110a991906120f6565b6110b39190612109565b91505090565b5090565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e9190612096565b61115a5760405162461bcd60e51b8152600401610610906120b3565b60005b848110156111e75783838281811061117757611177612132565b905060200201602081019061118c9190612161565b600960008888858181106111a2576111a2612132565b90506020020160208101906111b79190611e54565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905560010161115d565b505050505050565b6111f7611da9565b506000908152600d6020908152604091829020825160808101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600390910154606082015290565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561128b5750825b905060008267ffffffffffffffff1660011480156112a85750303b155b9050811580156112b6575080155b156112d45760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156112fe57845460ff60401b1916600160401b1785555b6040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b038c16906301ffc9a790602401602060405180830381865afa158015611349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136d9190612096565b80156113e357506040516301ffc9a760e01b8152637965db0b60e01b60048201526001600160a01b038a16906301ffc9a790602401602060405180830381865afa1580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190612096565b61143a5760405162461bcd60e51b815260206004820152602260248201527f52656465656d65723a2061646472657373206973206e6f7420737570706f7274604482015261195960f21b6064820152608401610610565b600080546001600160a01b03199081166001600160a01b038e8116919091179092556001805482168d84161790556002805482168c841617905560038054909116918a16919091179055600b805460ff191688151517905561149b86611755565b6114a3611b6c565b83156114e957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6000818152600d6020526040812060020154829061151357600080fd5b6000838152600d6020908152604091829020825160808101845281546001600160a01b031681526001820154928101929092526002810154928201929092526003820154606082015261156590611aac565b949350505050565b600254604051632474521560e21b81526000805160206121e783398151915260048201819052336024830152916001600160a01b0316906391d1485490604401602060405180830381865afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190612096565b61160a5760405162461bcd60e51b8152600401610610906120b3565b60005b848110156111e75783838281811061162757611627612132565b905060200201602081019061163c9190612161565b600a600088888581811061165257611652612132565b90506020020160208101906116679190611e54565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905560010161160d565b61169f611da9565b6116ac61042f8484610f5b565b9392505050565b6001600160a01b038116600090815260106020526040812054610f9d908390610f5b565b60006116e2600c5490565b82106117305760405162461bcd60e51b815260206004820152601d60248201527f52656465656d65723a20696e646578206f7574206f6620626f756e64730000006044820152606401610610565b600c828154811061174357611743612132565b90600052602060002001549050919050565b60008160200135116117a95760405162461bcd60e51b815260206004820152601e60248201527f52656465656d65723a206475726174696f6e206d757374206265203e203000006044820152606401610610565b600081604001351161180e5760405162461bcd60e51b815260206004820152602860248201527f52656465656d65723a20736c696365506572696f645365636f6e6473206d7573604482015267074206265203e20360c41b6064820152608401610610565b80356020820135101561186f5760405162461bcd60e51b815260206004820152602360248201527f52656465656d65723a206475726174696f6e206d757374206265203e3d20636c60448201526234b33360e91b6064820152608401610610565b803560045560208101356005556040810135600655606081013560075560800135600855565b505050565b6040516001600160a01b0383811660248301526044820183905261189591859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611b7e565b60008051602061220783398151915280546001190161192b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600b5460ff16156119b6576001600160a01b0381166000908152600a602052604090205460ff166119b35760405162461bcd60e51b815260206004820152602660248201527f52656465656d65723a2075736572206973206e6f7420696e20746865207768696044820152651d195b1a5cdd60d21b6064820152608401610610565b50565b6001600160a01b03811660009081526009602052604090205460ff16156119b35760405162461bcd60e51b815260206004820152601d60248201527f52656465656d65723a207573657220697320626c61636b6c69737465640000006044820152606401610610565b6040516001600160a01b038481166024830152838116604483015260648201839052611a589186918216906323b872dd906084016118c7565b50505050565b6000670de0b6b3a7640000611a8e611a768585611be1565b611a896002670de0b6b3a764000061217e565b611c22565b6116ac919061217e565b600160008051602061220783398151915255565b600454600554602083015160009242929091611ac891906120f6565b611ad29190612109565b8110611aec57826060015183604001516116ac9190612109565b6004546020840151600091611b0091612109565b611b0a9083612109565b6006549091506000611b1c828461217e565b90506000611b2a83836121a0565b90506000600460010154828960400151611b4491906121a0565b611b4e919061217e565b9050876060015181611b609190612109565b98975050505050505050565b611b74611c51565b611b7c611c9a565b565b6000611b936001600160a01b03841683611ca2565b90508051600014158015611bb8575080806020019051810190611bb69190612096565b155b1561189557604051635274afe760e01b81526001600160a01b0384166004820152602401610610565b6000811580611c0557508282611bf781836121a0565b9250611c03908361217e565b145b610f9d57604051631550e8b760e01b815260040160405180910390fd5b600082611c2f83826120f6565b9150811015610f9d57604051630a77254f60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611b7c57604051631afcd79f60e31b815260040160405180910390fd5b611a98611c51565b60606116ac8383600084600080856001600160a01b03168486604051611cc891906121b7565b60006040518083038185875af1925050503d8060008114611d05576040519150601f19603f3d011682016040523d82523d6000602084013e611d0a565b606091505b5091509150611d1a868383611d24565b9695505050505050565b606082611d3957611d3482611d80565b6116ac565b8151158015611d5057506001600160a01b0384163b155b15611d7957604051639996b31560e01b81526001600160a01b0385166004820152602401610610565b50806116ac565b805115611d905780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b600060a08284031215611dec57600080fd5b50919050565b600060a08284031215611e0457600080fd5b6116ac8383611dda565b80356001600160a01b0381168114611e2557600080fd5b919050565b60008060408385031215611e3d57600080fd5b611e4683611e0e565b946020939093013593505050565b600060208284031215611e6657600080fd5b6116ac82611e0e565b602080825282518282018190526000918401906040840190835b81811015611ed957611ec383855180516001600160a01b031682526020808201519083015260408082015190830152606090810151910152565b6020939093019260809290920191600101611e89565b509095945050505050565b60008060408385031215611ef757600080fd5b50508035926020909101359150565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808101610f9d565b60008083601f840112611f4c57600080fd5b50813567ffffffffffffffff811115611f6457600080fd5b6020830191508360208260051b8501011115611f7f57600080fd5b9250929050565b60008060008060408587031215611f9c57600080fd5b843567ffffffffffffffff811115611fb357600080fd5b611fbf87828801611f3a565b909550935050602085013567ffffffffffffffff811115611fdf57600080fd5b611feb87828801611f3a565b95989497509550505050565b60006020828403121561200957600080fd5b5035919050565b80151581146119b357600080fd5b600080600080600080610140878903121561203857600080fd5b61204187611e0e565b955061204f60208801611e0e565b945061205d60408801611e0e565b935061206b60608801611e0e565b9250608087013561207b81612010565b915061208a8860a08901611dda565b90509295509295509295565b6000602082840312156120a857600080fd5b81516116ac81612010565b6020808252601390820152722932b232b2b6b2b91d102327a92124a22222a760691b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f9d57610f9d6120e0565b81810381811115610f9d57610f9d6120e0565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561215a57600080fd5b5051919050565b60006020828403121561217357600080fd5b81356116ac81612010565b60008261219b57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610f9d57610f9d6120e0565b6000825160005b818110156121d857602081860181015185830152016121be565b50600092019182525091905056fe5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d89b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220bac7ebdc68708826a8f0b365955c6e1672b54f7e2bb84247bf70a3afe1fb877964736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "computeNextVestingScheduleIdForHolder(address)": {
        "details": "Computes the next vesting schedule identifier for a given holder address."
      },
      "computeReleasableAmount(bytes32)": {
        "returns": {
          "_0": "the vested amount"
        }
      },
      "computeVestingScheduleIdForAddressAndIndex(address,uint256)": {
        "details": "Computes the vesting schedule identifier for an address and an index."
      },
      "createVestingSchedule(address,uint256)": {
        "params": {
          "_amount": "total amount of tokens to be released at the end of the vesting",
          "_beneficiary": "address of the beneficiary to whom vested tokens are transferred"
        }
      },
      "getAllVestingSchedulesByAddress(address)": {
        "params": {
          "holder": "User's address"
        }
      },
      "getLastVestingScheduleForHolder(address)": {
        "details": "Returns the last vesting schedule for a given holder address."
      },
      "getVestingIdAtIndex(uint256)": {
        "details": "Returns the vesting schedule id at the given index.",
        "returns": {
          "_0": "the vesting id"
        }
      },
      "getVestingSchedule(bytes32)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getVestingSchedulesCount()": {
        "details": "Returns the number of vesting schedules managed by this contract.",
        "returns": {
          "_0": "the number of vesting schedules"
        }
      },
      "getVestingSchedulesCountByBeneficiary(address)": {
        "details": "Returns the number of vesting schedules associated to a beneficiary.",
        "returns": {
          "_0": "the number of vesting schedules"
        }
      },
      "getVestingSchedulesTotalAmount()": {
        "returns": {
          "_0": "the total amount of vesting schedules"
        }
      },
      "getWithdrawableAmount()": {
        "details": "Returns the amount of tokens that can be withdrawn by the owner."
      },
      "initialize(address,address,address,address,bool,(uint256,uint256,uint256,uint256,uint256))": {
        "details": "This function should only be called once during the initial setup of the contract.",
        "params": {
          "_epmx": "The address of the EPMX",
          "_pmx": "The address of the PMX",
          "_registry": "The address of the Primex Registry",
          "_treasury": "The address of the Primex treasury to which unclaimed PMX tokens will be sent after the redeemDeadline.",
          "_vestingParams": "VestingParams struct for initialization",
          "_whiteListingEnabled": "enables or disables whitelisting"
        }
      },
      "release(bytes32,uint256)": {
        "params": {
          "amount": "the amount to release",
          "vestingScheduleId": "the vesting schedule identifier"
        }
      },
      "setStatusesToBlackList(address[],bool[])": {
        "details": "Adds or removes an address to the blackList. Only SMALL_TIMELOCK_ADMIN can call it."
      },
      "setStatusesToWhiteList(address[],bool[])": {
        "details": "Adds or removes an address to the whitelist. Only SMALL_TIMELOCK_ADMIN can call it."
      },
      "setVestingParams((uint256,uint256,uint256,uint256,uint256))": {
        "details": "Sets the vesting params.Only SMALL_TIMELOCK_ADMIN can call it."
      },
      "switchWhiteListingFlag()": {
        "details": "Enables or disables whitelisting. Only SMALL_TIMELOCK_ADMIN can call it."
      }
    },
    "title": "Redeemer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeReleasableAmount(bytes32)": {
        "notice": "Computes the vested amount of tokens for the given vesting schedule identifier."
      },
      "createVestingSchedule(address,uint256)": {
        "notice": "Creates a new vesting schedule for a beneficiary."
      },
      "epmx()": {
        "notice": "Retrieves the instance of the EPMX contract."
      },
      "getAllVestingSchedulesByAddress(address)": {
        "notice": "Returns all of the user's schedules"
      },
      "getVestingSchedule(bytes32)": {
        "notice": "Returns the vesting schedule information for a given identifier."
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "notice": "Returns the vesting schedule information for a given holder and index."
      },
      "getVestingSchedulesTotalAmount()": {
        "notice": "Returns the total amount of vesting schedules."
      },
      "initialize(address,address,address,address,bool,(uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Initializes the Redeemer contract."
      },
      "isBlackListed(address)": {
        "notice": "Returns true if the address is blacklisted"
      },
      "isWhiteListed(address)": {
        "notice": "Returns true if the address is whitelisted"
      },
      "pmx()": {
        "notice": "Retrieves the instance of the PMX contract."
      },
      "registry()": {
        "notice": "Retrieves the instance of PrimexRegistry contract."
      },
      "release(bytes32,uint256)": {
        "notice": "Release vested amount of tokens."
      },
      "treasury()": {
        "notice": "Retrieves the instance of the treasury contract."
      },
      "vestingParams()": {
        "notice": "Retrieves the vesting params of the contract"
      },
      "withdrawUnclaimed()": {
        "notice": "Withdraw the withdrawable amount amount if possible."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3092,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "epmx",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20Burnable)1241"
      },
      {
        "astId": 3096,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "pmx",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1195"
      },
      {
        "astId": 3100,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "registry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAccessControl)465"
      },
      {
        "astId": 3103,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3107,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "vestingParams",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(VestingParams)2073_storage"
      },
      {
        "astId": 3112,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "isBlackListed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3117,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "isWhiteListed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3119,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "whiteListingEnabled",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 3122,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "vestingSchedulesIds",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3127,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "vestingSchedules",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)2062_storage)"
      },
      {
        "astId": 3129,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "vestingSchedulesTotalAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3131,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "vestingReleasedTotalAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3135,
        "contract": "src/Redeemer.sol:Redeemer",
        "label": "holdersVestingCount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Burnable)1241": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IAccessControl)465": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1195": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(VestingSchedule)2062_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IRedeemerStorage.VestingSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingSchedule)2062_storage"
      },
      "t_struct(VestingParams)2073_storage": {
        "encoding": "inplace",
        "label": "struct IRedeemerStorage.VestingParams",
        "members": [
          {
            "astId": 2064,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "cliff",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2066,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "duration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2068,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "slicePeriodSeconds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2070,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "initialUnlockPercentage",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2072,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "redeemDeadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(VestingSchedule)2062_storage": {
        "encoding": "inplace",
        "label": "struct IRedeemerStorage.VestingSchedule",
        "members": [
          {
            "astId": 2055,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "beneficiary",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2057,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "cliff",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2059,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "amountTotal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2061,
            "contract": "src/Redeemer.sol:Redeemer",
            "label": "released",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}