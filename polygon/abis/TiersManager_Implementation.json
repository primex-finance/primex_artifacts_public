{
  "address": "0xA01C12A0AE9e36Ce6581c8E17AfF57BB6B666527",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pmx",
          "type": "address"
        }
      ],
      "name": "PMXchanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_clearTiers",
          "type": "bool"
        }
      ],
      "name": "addTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_newThresholds",
          "type": "uint256[]"
        }
      ],
      "name": "changeThresholdForTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmingNFT",
      "outputs": [
        {
          "internalType": "contract IPrimexNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getLenderTierForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTiers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getTraderTierForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_userAddresses",
          "type": "address[]"
        }
      ],
      "name": "getTraderTiersForAddresses",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pmx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lendingNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradingNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmingNFT",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_traderBalanceVault",
          "type": "address"
        }
      ],
      "name": "initializeAfterUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingNFT",
      "outputs": [
        {
          "internalType": "contract IPrimexNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pmx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pmx",
          "type": "address"
        }
      ],
      "name": "setPMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiersThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traderBalanceVault",
      "outputs": [
        {
          "internalType": "contract ITraderBalanceVaultV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingNFT",
      "outputs": [
        {
          "internalType": "contract IPrimexNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2dc669b539ed6b9abf821dcf8ae541ddc0111d32567e1ac255d84f74eb9d774",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xA01C12A0AE9e36Ce6581c8E17AfF57BB6B666527",
    "transactionIndex": 2,
    "gasUsed": "1472376",
    "logsBloom": "0x
    "blockHash": "0x1ffd63002e1809fb6b3354b67bc8b1efde97e32cd2ef8f3865ac4ff5e77a2bd6",
    "transactionHash": "0xe2dc669b539ed6b9abf821dcf8ae541ddc0111d32567e1ac255d84f74eb9d774",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 65248087,
        "transactionHash": "0xe2dc669b539ed6b9abf821dcf8ae541ddc0111d32567e1ac255d84f74eb9d774",
        "address": "0xA01C12A0AE9e36Ce6581c8E17AfF57BB6B666527",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 4,
        "blockHash": "0x1ffd63002e1809fb6b3354b67bc8b1efde97e32cd2ef8f3865ac4ff5e77a2bd6"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 65248087,
        "transactionHash": "0xe2dc669b539ed6b9abf821dcf8ae541ddc0111d32567e1ac255d84f74eb9d774",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c110b6e93a51acf1f3ded19c754789e7a2304f07",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000020b17d12b3626580000000000000000000000000000000000000000000000042dfe2a9df8bc6a72000000000000000000000000000000000000000000000985b0753a86cac67a920000000000000000000000000000000000000000000000042bf312cccd86441a000000000000000000000000000000000000000000000985b2805257f5fca0ea",
        "logIndex": 5,
        "blockHash": "0x1ffd63002e1809fb6b3354b67bc8b1efde97e32cd2ef8f3865ac4ff5e77a2bd6"
      }
    ],
    "blockNumber": 65248087,
    "cumulativeGasUsed": "1551422",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b9821e6aa5ae8bcd6a583375e546781d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pmx\",\"type\":\"address\"}],\"name\":\"PMXchanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_clearTiers\",\"type\":\"bool\"}],\"name\":\"addTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newThresholds\",\"type\":\"uint256[]\"}],\"name\":\"changeThresholdForTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingNFT\",\"outputs\":[{\"internalType\":\"contract IPrimexNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getLenderTierForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getTraderTierForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"}],\"name\":\"getTraderTiersForAddresses\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradingNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmingNFT\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_traderBalanceVault\",\"type\":\"address\"}],\"name\":\"initializeAfterUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingNFT\",\"outputs\":[{\"internalType\":\"contract IPrimexNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pmx\",\"type\":\"address\"}],\"name\":\"setPMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiersThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traderBalanceVault\",\"outputs\":[{\"internalType\":\"contract ITraderBalanceVaultV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingNFT\",\"outputs\":[{\"internalType\":\"contract IPrimexNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface id to check\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pmx()\":{\"notice\":\"Retrieves the EPMX address\"},\"registry()\":{\"notice\":\"Retrieves the instance of PrimexRegistry contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"traderBalanceVault()\":{\"notice\":\"Retrieves the instance of TraderBalanceVault contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TiersManager/TiersManager.sol\":\"TiersManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\\n// Magic values\\nuint256 constant TRADER_MAGIC_TIER = uint256(keccak256(\\\"TRADER_MAGIC_TIER\\\"));\\nuint256 constant LENDER_MAGIC_TIER = uint256(keccak256(\\\"LENDER_MAGIC_TIER\\\"));\\nuint256 constant FARMING_MAGIC_TIER = uint256(keccak256(\\\"FARMING_MAGIC_TIER\\\"));\\n\",\"keccak256\":\"0x806aeb2d3007701f19dd16fb2765b3e50c548869ca19310f096059b83ca339b5\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNS.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPrimexDNSStorage, IPrimexDNSStorageV3, IPrimexDNSStorageV4} from \\\"./IPrimexDNSStorage.sol\\\";\\n\\ninterface IPrimexDNSV3 is IPrimexDNSStorageV4 {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event TiersManagerchanged(address indexed tiersManager);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    event ChangeProtocolFeeRate(FeeRateType indexed feeRateType, uint256 indexed tier, uint256 feeRate);\\n    event ChangeAverageGasPerAction(TradingOrderType indexed tradingOrderType, uint256 indexed averageGasPerAction);\\n    event ChangeMaxProtocolFee(uint256 indexed maxProtocolFee);\\n    event ChangeProtocolFeeCoefficient(uint256 indexed protocolFeeCoefficient);\\n    event ChangeLiquidationGasAmount(uint256 indexed liquidationGasAmount);\\n    event ChangePmxDiscountMultiplier(uint256 indexed pmxDiscountMultiplier);\\n    event ChangeAdditionalGasSpent(uint256 indexed additionalGasSpent);\\n    event ChangeGasPriceBuffer(uint256 indexed gasPriceBuffer);\\n    event ChangeMinFeeRestrictions(CallingMethod indexed callingMethod, MinFeeRestrictions minFeeRestrictions);\\n    event ChangeLeverageTolerance(uint256 leverageTolerance);\\n\\n    /**\\n     * @param feeRateType The order type for which the rate is set\\n     * @param tier The tier for which the rate is set\\n     * @param feeRate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        FeeRateType feeRateType;\\n        uint256 tier;\\n        uint256 feeRate;\\n    }\\n\\n    struct AverageGasPerActionParams {\\n        TradingOrderType tradingOrderType;\\n        uint256 averageGasPerAction;\\n    }\\n\\n    /**\\n     * @dev Params for initialize() function\\n     * @param registry The address of the PrimexRegistry contract.\\n     * @param pmx The address of the PMX token contract.\\n     * @param treasury The address of the Treasury contract.\\n     * @param delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param feeRateParams An array of structs to set protocol fee rate on the corresponding\\n     * @param averageGasPerActionParams An array of structs to set average amount of gas spent by Keeper on the corresponding action\\n     * @param maxProtocolFee MaxProtocolFee that can be charged. Measured in NATIVE_CURRENCY\\n     * @param liquidationGasAmount Average gas amount spent for a single liquidation, measured in wei.\\n     * @param protocolFeeCoefficient Additional coefficient to calculate minProtocolFee, measured in wei.\\n     * @param additionalGasSpent Gas that will be additionally spend after gasSpent calculation.\\n     * @param pmxDiscountMultiplier Multiplier for PMX discount calculation\\n     * @param gasPriceBuffer Multiplier which protects position from immediate liquidation after gas price changed\\n     */\\n    struct InitParams {\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        uint256 delistingDelay;\\n        uint256 adminWithdrawalDelay;\\n        FeeRateParams[] feeRateParams;\\n        AverageGasPerActionParams[] averageGasPerActionParams;\\n        uint256 maxProtocolFee;\\n        uint256 liquidationGasAmount;\\n        uint256 protocolFeeCoefficient;\\n        uint256 additionalGasSpent;\\n        uint256 pmxDiscountMultiplier;\\n        uint256 gasPriceBuffer;\\n        uint256 leverageTolerance;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Sets the address of the TiersManager contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _tiersManager The address of the TiersManager token contract.\\n     */\\n    function setTiersManager(address _tiersManager) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @notice Set min protocol fee restrictions for different calling method.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setMinFeeRestrictions(\\n        CallingMethod _callingMethod,\\n        MinFeeRestrictions calldata _minFeeRestrictions\\n    ) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n\\n    /**\\n     * @notice Set the protocol fee rate for one type of order.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeRate(FeeRateParams[] calldata _feeRateType) external;\\n\\n    /**\\n     * @notice Set average gas amount of gas spent by Keeper on the corresponding action.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAverageGasPerAction(AverageGasPerActionParams calldata _averageGasPerActionParams) external;\\n\\n    /**\\n     * @notice Set the max protocol fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _maxProtocolFee The new max protocol fee.\\n     */\\n    function setMaxProtocolFee(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set protocol fee coefficient. Used to calculate the minProtocol fee\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeCoefficient(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set liquidation gas amount (average gas amount spent for a single liquidation).\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLiquidationGasAmount(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set pmxDiscountMultiplier.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     */\\n    function setPmxDiscountMultiplier(uint256 _pmxDiscountMultiplier) external;\\n\\n    /**\\n     * @notice Set new additionalGas. Used to calculate the minProtocol fee\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAdditionalGasSpent(uint256 _additionalGasSpent) external;\\n\\n    /**\\n     * @notice Set new gasPriceBuffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setGasPriceBuffer(uint256 _gasPriceBuffer) external;\\n\\n    /**\\n     * @notice Set new leverageTolerance.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLeverageTolerance(uint256 _leverageTolerance) external;\\n\\n    /**\\n     * @notice Retrieves pmx, treasury, feeRateType, maxProtocolFee, pmxDiscountMultiplier\\n     */\\n    function getPrimexDNSParams() external view returns (address, address, address, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves protocolFeeRateByTier by the feeRateType and the user tier\\n     */\\n    function getProtocolFeeRateByTier(FeeRateType _feeRateType, uint256 _tier) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves an array of protocolFeeRateByTier by the feeRateType\\n     */\\n\\n    function getProtocolFeeRatesByTier(\\n        FeeRateType _feeRateType,\\n        uint256[] calldata _tiers\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves liquidationGasAmount, protocolFeeCoefficient, additionalGasSpent, maxGasAmount and baseLength\\n     */\\n    function getParamsForMinProtocolFee(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength, averageGasPerAction, protocolFeeCoefficient and gasPriceBuffer\\n     */\\n    function getParamsForMinPositionSize(\\n        TradingOrderType _tradingOrderType\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength for L2 chain payment model depending from tradingOrderType\\n     */\\n    function getL1BaseLengthForTradingOrderType(TradingOrderType _tradingOrderType) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNS is IPrimexDNSStorage {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ChangeFeeRate(OrderType orderType, address token, uint256 rate);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    /**\\n     * @param orderType The order type for which the rate is set\\n     * @param feeToken The token address for which the rate is set\\n     * @param rate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        OrderType orderType;\\n        address feeToken;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _treasury The address of the Treasury contract.\\n     * @param _delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param _adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param _feeRateParams Initial fee params\\n     */\\n    function initialize(\\n        address _registry,\\n        address _pmx,\\n        address _treasury,\\n        uint256 _delistingDelay,\\n        uint256 _adminWithdrawalDelay,\\n        FeeRateParams[] calldata _feeRateParams\\n    ) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the protocol rate in PMX.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRate(FeeRateParams calldata _feeRateParams) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n}\\n\",\"keccak256\":\"0xcc4385cbb7d2c105887593e8c7a2db1145b27d5665b821b55ac6a17e9ba53a47\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNSStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {ITiersManager} from \\\"../TiersManager/ITiersManager.sol\\\";\\n\\ninterface IPrimexDNSStorage {\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Deprecated\\n    }\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER,\\n        SWAP_MARKET_ORDER,\\n        SWAP_LIMIT_ORDER\\n    }\\n\\n    struct BucketData {\\n        address bucketAddress;\\n        Status currentStatus;\\n        uint256 delistingDeadline;\\n        // The deadline is for the admin to call Bucket.withdrawAfterDelisting().\\n        uint256 adminDeadline;\\n    }\\n    struct DexData {\\n        address routerAddress;\\n        bool isActive;\\n    }\\n\\n    struct AdapterData {\\n        string[] dexes;\\n        bool isAdded;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function delistingDelay() external view returns (uint256);\\n\\n    function adminWithdrawalDelay() external view returns (uint256);\\n\\n    function buckets(string memory) external view returns (address, Status, uint256, uint256);\\n\\n    function dexes(string memory) external view returns (address, bool);\\n\\n    function cmTypeToAddress(uint256 cmType) external view returns (address);\\n\\n    function dexAdapter() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function aavePool() external view returns (address);\\n\\n    function feeRates(OrderType _orderType, address _token) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV2 is IPrimexDNSStorage {\\n    struct FeeRestrictions {\\n        uint256 minProtocolFee;\\n        uint256 maxProtocolFee;\\n    }\\n\\n    function feeRestrictions(\\n        OrderType _orderType\\n    ) external view returns (uint256 minProtocolFee, uint256 maxProtocolFee);\\n}\\n\\ninterface IPrimexDNSStorageV3 is IPrimexDNSStorageV2 {\\n    enum FeeRateType {\\n        MarginPositionClosedByTrader,\\n        SpotPositionClosedByTrader,\\n        MarginPositionClosedByKeeper,\\n        SpotPositionClosedByKeeper,\\n        MarginLimitOrderExecuted,\\n        SpotLimitOrderExecuted,\\n        SwapLimitOrderExecuted,\\n        SwapMarketOrder\\n    }\\n\\n    enum TradingOrderType {\\n        MarginMarketOrder,\\n        SpotMarketOrder,\\n        MarginLimitOrder,\\n        MarginLimitOrderDepositInThirdAsset,\\n        SpotLimitOrder,\\n        SwapLimitOrder\\n    }\\n\\n    enum CallingMethod {\\n        OpenPositionByOrder,\\n        ClosePositionByCondition\\n    }\\n    struct MinFeeRestrictions {\\n        uint256 maxGasAmount;\\n        uint256 baseLength;\\n    }\\n\\n    function protocolFeeRates(FeeRateType _feeRateType) external view returns (uint256);\\n\\n    function averageGasPerAction(TradingOrderType _tradingOrderType) external view returns (uint256);\\n\\n    function minFeeRestrictions(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256 maxGasAmount, uint256 baseLength);\\n\\n    function maxProtocolFee() external view returns (uint256);\\n\\n    function protocolFeeCoefficient() external view returns (uint256);\\n\\n    function liquidationGasAmount() external view returns (uint256);\\n\\n    function additionalGasSpent() external view returns (uint256);\\n\\n    function pmxDiscountMultiplier() external view returns (uint256);\\n\\n    function gasPriceBuffer() external view returns (uint256);\\n\\n    function leverageTolerance() external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV4 is IPrimexDNSStorageV3 {\\n    function protocolFeeRatesByTier(FeeRateType _feeRateType, uint256 _tier) external view returns (uint256);\\n\\n    function tiersManager() external view returns (ITiersManager);\\n}\\n\",\"keccak256\":\"0x7ed019ece2b07bc517166ff58f9365105deb46f399e66309085508324593e54f\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexNFT/IPrimexNFT.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport {IPrimexNFTStorage} from \\\"./IPrimexNFTStorage.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\n\\ninterface IPrimexNFT is IPrimexNFTStorage, IERC721EnumerableUpgradeable {\\n    struct SafeMintParams {\\n        uint256 chainId;\\n        uint256 id;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice Initializes the PrimexNFT contract.\\n     * @param _registry The address of the Registry contract.\\n     * @param _name The name of the NFT token\\n     * @param _symbol The name of the NFT token\\n     * @param _newBaseURI a new baseURI\\n     */\\n    function initialize(\\n        address _registry,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _newBaseURI\\n    ) external;\\n\\n    /**\\n     * @notice Mints an NFT with the provided signature and parameters.\\n     * @dev The signature should be created by the user with NFT_MINTER role assigned.\\n     * @param _sig The signature used to validate the minter.\\n     * @param _nftParams The SafeMintParams struct containing the parameters for minting the NFT.\\n     */\\n    function mint(bytes memory _sig, SafeMintParams memory _nftParams) external;\\n\\n    /**\\n     * @notice Mints an NFT with the provided parameters.\\n     * @dev Only callable by the NFT_MINTER role.\\n     * @param _nftParams The SafeMintParams struct containing the parameters for minting the NFT.\\n     */\\n    function mint(SafeMintParams memory _nftParams) external;\\n\\n    /**\\n     * @notice Mints NFT batch with the provided parameters.\\n     * @dev Only callable by the NFT_MINTER role.\\n     * @param _nftParams The array of SafeMintParams struct containing the parameters for minting the NFT.\\n     */\\n\\n    function mintBatch(SafeMintParams[] calldata _nftParams) external;\\n\\n    /**\\n     * @notice Returns an array of flag whether the user has an active token\\n     * @param _users an array of users\\n     * @return an array of flags\\n     */\\n    function haveUsersActiveTokens(address[] calldata _users) external view returns (bool[] memory);\\n\\n    /**\\n     * @notice Returns a flag whether the user has an active token\\n     * @param _user an address of the user\\n     */\\n    function hasUserActiveToken(address _user) external view returns (bool);\\n\\n    /**\\n     * @notice Sets deadlines for a batch of ids\\n     * @dev Only callable by the NFT_MINTER role.\\n     * @param _ids an array of ids\\n     * @param _deadlines an array of_deadlines\\n     */\\n\\n    function batchSetDeadline(uint256[] calldata _ids, uint256[] calldata _deadlines) external;\\n\\n    /**\\n     * @notice Sets the new baseURI\\n     * @dev Only callable by the NFT_MINTER role.\\n     * @param _newBaseURI a new baseURI\\n     */\\n    function setBaseURI(string calldata _newBaseURI) external;\\n}\\n\",\"keccak256\":\"0x1912ee3375696ba0019bfdb989cee80e03d1acd4324008b8144b9682149dba6e\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexNFT/IPrimexNFTStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IPrimexNFTStorage {\\n    function registry() external returns (IAccessControl);\\n\\n    function idToDeadLine(uint256 _id) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd0039cf31f75a0f04da1847d621111124fbfbcf94419923948e0be4c2cbae1e\",\"license\":\"BUSL-1.1\"},\"contracts/TiersManager/ITiersManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITiersManager {\\n    function initialize(\\n        address _pmx,\\n        address _registry,\\n        address _lendingNFT,\\n        address _tradingNFT,\\n        address _farmingNFT,\\n        uint256[] calldata _tiers,\\n        uint256[] calldata _thresholds\\n    ) external;\\n\\n    function initializeAfterUpgrade(address payable _traderBalanceVault) external;\\n\\n    function getTraderTierForAddress(address _userAddress) external view returns (uint256);\\n\\n    function getLenderTierForAddress(address _userAddress) external view returns (uint256);\\n\\n    function addTiers(uint256[] calldata _tiers, uint256[] calldata _thresholds, bool _clearTiers) external;\\n\\n    function changeThresholdForTier(uint256[] calldata _indexes, uint256[] calldata _newThresholds) external;\\n\\n    function getTiers() external view returns (uint256[] memory);\\n\\n    function setPMX(address _pmx) external;\\n\\n    function getTraderTiersForAddresses(address[] memory _userAddresses) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8bddf9a904e067ef36232630e1a6761ae420328df55882c5b251d055b7adb08d\",\"license\":\"BUSL-1.1\"},\"contracts/TiersManager/ITiersManagerStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ITraderBalanceVaultV2} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexNFT} from \\\"../PrimexNFT/IPrimexNFT.sol\\\";\\n\\ninterface ITiersManagerStorage {\\n    /**\\n     * @notice Retrieves the instance of PrimexRegistry contract.\\n     */\\n    function registry() external view returns (IAccessControl);\\n\\n    /**\\n     * @notice Retrieves the EPMX address\\n     */\\n    function pmx() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the instance of TraderBalanceVault contract.\\n     */\\n    function traderBalanceVault() external view returns (ITraderBalanceVaultV2);\\n\\n    function lendingNFT() external view returns (IPrimexNFT);\\n\\n    function tradingNFT() external view returns (IPrimexNFT);\\n\\n    function farmingNFT() external view returns (IPrimexNFT);\\n\\n    function tiersThresholds(uint256 tier) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa1794f1aed1a50bb52c233a47741adb2e88301bcecd1b030a6edc596a4b5f8fb\",\"license\":\"BUSL-1.1\"},\"contracts/TiersManager/TiersManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {ITraderBalanceVaultV2} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IPrimexNFT} from \\\"../PrimexNFT/IPrimexNFT.sol\\\";\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {TiersManagerStorage} from \\\"./TiersManagerStorage.sol\\\";\\nimport {ITiersManager} from \\\"./ITiersManager.sol\\\";\\nimport {SMALL_TIMELOCK_ADMIN, BIG_TIMELOCK_ADMIN, TRADER_MAGIC_TIER, FARMING_MAGIC_TIER, LENDER_MAGIC_TIER} from \\\"../Constants.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\ncontract TiersManager is ITiersManager, TiersManagerStorage {\\n    using WadRayMath for uint256;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not granted with _role\\n     * @param _role The role that is being checked for a function caller\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        _require(registry.hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    function initialize(\\n        address _pmx,\\n        address _registry,\\n        address _lendingNFT,\\n        address _tradingNFT,\\n        address _farmingNFT,\\n        uint256[] calldata _tiers,\\n        uint256[] calldata _thresholds\\n    ) external override initializer {\\n        _require(\\n            IERC165Upgradeable(_pmx).supportsInterface(type(IERC20).interfaceId) &&\\n                IERC165Upgradeable(_registry).supportsInterface(type(IAccessControl).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_lendingNFT != address(0)) {\\n            _require(\\n                IERC165Upgradeable(_lendingNFT).supportsInterface(type(IPrimexNFT).interfaceId),\\n                Errors.ADDRESS_NOT_SUPPORTED.selector\\n            );\\n            lendingNFT = IPrimexNFT(_lendingNFT);\\n        }\\n        if (_tradingNFT != address(0)) {\\n            _require(\\n                IERC165Upgradeable(_tradingNFT).supportsInterface(type(IPrimexNFT).interfaceId),\\n                Errors.ADDRESS_NOT_SUPPORTED.selector\\n            );\\n            tradingNFT = IPrimexNFT(_tradingNFT);\\n        }\\n        if (_farmingNFT != address(0)) {\\n            _require(\\n                IERC165Upgradeable(_farmingNFT).supportsInterface(type(IPrimexNFT).interfaceId),\\n                Errors.ADDRESS_NOT_SUPPORTED.selector\\n            );\\n            farmingNFT = IPrimexNFT(_farmingNFT);\\n        }\\n        pmx = _pmx;\\n        registry = IAccessControl(_registry);\\n        if (_tiers.length > 0) {\\n            _addTiers(_tiers, _thresholds, false);\\n        }\\n        __ERC165_init();\\n    }\\n\\n    function initializeAfterUpgrade(\\n        address payable _traderBalanceVault\\n    ) external override onlyRole(BIG_TIMELOCK_ADMIN) reinitializer(2) {\\n        _require(\\n            IERC165Upgradeable(_traderBalanceVault).supportsInterface(type(ITraderBalanceVaultV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        traderBalanceVault = ITraderBalanceVaultV2(_traderBalanceVault);\\n    }\\n\\n    /**\\n     * @inheritdoc ITiersManager\\n     */\\n    function setPMX(address _pmx) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        _require(\\n            IERC165Upgradeable(_pmx).supportsInterface(type(IERC20).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        pmx = _pmx;\\n        emit IPrimexDNSV3.PMXchanged(_pmx);\\n    }\\n\\n    function getTraderTiersForAddresses(\\n        address[] calldata _userAddresses\\n    ) external view override returns (uint256[] memory) {\\n        uint256[] memory userTiers = new uint256[](_userAddresses.length);\\n        uint256[] memory _tiers = tiers;\\n        bool[] memory userHasActiveTradingNft = tradingNFT.haveUsersActiveTokens(_userAddresses);\\n        bool[] memory userHasActiveFarmingNft = farmingNFT.haveUsersActiveTokens(_userAddresses);\\n        (uint256[] memory availableBalances, uint256[] memory lockedBalances) = traderBalanceVault\\n            .getBalancesForAddresses(_userAddresses, pmx);\\n        uint256 totalBalance;\\n        for (uint256 i; i < _userAddresses.length; i++) {\\n            if (userHasActiveTradingNft[i]) {\\n                userTiers[i] = TRADER_MAGIC_TIER;\\n                continue;\\n            }\\n            if (userHasActiveFarmingNft[i]) {\\n                userTiers[i] = FARMING_MAGIC_TIER;\\n                continue;\\n            }\\n            totalBalance = availableBalances[i] + lockedBalances[i];\\n            userTiers[i] = _getTierByBalance(_tiers, totalBalance);\\n        }\\n        return userTiers;\\n    }\\n\\n    function getTraderTierForAddress(address _userAddress) external view override returns (uint256) {\\n        (uint256 availableBalance, uint256 lockedBalance) = traderBalanceVault.balances(_userAddress, pmx);\\n        uint256 totalBalance = availableBalance + lockedBalance;\\n        bool userHasActiveTradingNft = tradingNFT.hasUserActiveToken(_userAddress);\\n        bool userHasActiveFarmingNft = farmingNFT.hasUserActiveToken(_userAddress);\\n        if (userHasActiveTradingNft) return TRADER_MAGIC_TIER;\\n        if (userHasActiveFarmingNft) return FARMING_MAGIC_TIER;\\n        // return zero tier\\n        if (totalBalance == 0 || tiers.length == 0) return 0;\\n        uint256 prevTier = 0;\\n        for (uint256 i; i < tiers.length; i++) {\\n            uint256 threshold = tiersThresholds[tiers[i]];\\n            if (totalBalance < threshold) {\\n                return prevTier;\\n            }\\n            prevTier = tiers[i];\\n        }\\n        // if this is the last tier and balance >= tier's threshold\\n        return prevTier;\\n    }\\n\\n    function getLenderTierForAddress(address _userAddress) external view override returns (uint256) {\\n        if (lendingNFT.hasUserActiveToken(_userAddress)) return LENDER_MAGIC_TIER;\\n        return 0;\\n    }\\n\\n    function addTiers(\\n        uint256[] calldata _tiers,\\n        uint256[] calldata _thresholds,\\n        bool _clearTiers\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _addTiers(_tiers, _thresholds, _clearTiers);\\n    }\\n\\n    function changeThresholdForTier(\\n        uint256[] calldata _indexes,\\n        uint256[] calldata _newThresholds\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_indexes.length == _newThresholds.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _indexes.length; i++) {\\n            tiersThresholds[tiers[_indexes[i]]] = _newThresholds[i];\\n        }\\n    }\\n\\n    function getTiers() external view override returns (uint256[] memory) {\\n        return tiers;\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(ITiersManager).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _getTierByBalance(uint256[] memory _tiers, uint256 totalBalance) internal view returns (uint256 prevTier) {\\n        if (totalBalance == 0 || _tiers.length == 0) return prevTier;\\n        for (uint256 i; i < _tiers.length; i++) {\\n            uint256 threshold = tiersThresholds[_tiers[i]];\\n            if (totalBalance < threshold) return prevTier;\\n            prevTier = _tiers[i];\\n        }\\n    }\\n\\n    function _addTiers(uint256[] calldata _tiers, uint256[] calldata _thresholds, bool _clearTiers) internal {\\n        if (_clearTiers) delete tiers;\\n        _require(_tiers.length == _thresholds.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        _checkTiers(_tiers);\\n        for (uint256 i; i < _tiers.length; i++) {\\n            tiers.push(_tiers[i]);\\n            tiersThresholds[_tiers[i]] = _thresholds[i];\\n        }\\n    }\\n\\n    function _checkTiers(uint256[] calldata _tiers) internal view {\\n        // zero tier by default\\n        _require(_tiers[0] > 0, Errors.INCORRECT_TIER.selector);\\n        if (tiers.length > 0) {\\n            _require(tiers[tiers.length - 1] < _tiers[0], Errors.INCORRECT_TIERS_ORDER.selector);\\n        }\\n        if (_tiers.length > 1) {\\n            for (uint256 i = 1; i < _tiers.length; i++) {\\n                _require(_tiers[i - 1] < _tiers[i], Errors.INCORRECT_TIERS_ORDER.selector);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2e1392b1c16b089aa8e90efd084307ec4e5c3011517729e9d2bd702cb833e8b\",\"license\":\"BUSL-1.1\"},\"contracts/TiersManager/TiersManagerStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ITraderBalanceVaultV2} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexNFT} from \\\"../PrimexNFT/IPrimexNFT.sol\\\";\\n\\nimport {ITiersManagerStorage} from \\\"./ITiersManagerStorage.sol\\\";\\n\\nabstract contract TiersManagerStorage is ITiersManagerStorage, ERC165Upgradeable {\\n    IAccessControl public override registry;\\n    ITraderBalanceVaultV2 public override traderBalanceVault;\\n    IPrimexNFT public override lendingNFT;\\n    IPrimexNFT public override tradingNFT;\\n    IPrimexNFT public override farmingNFT;\\n\\n    address public override pmx;\\n    //tier => qty of PMX tokens\\n    mapping(uint256 => uint256) public override tiersThresholds;\\n    uint256[] internal tiers;\\n}\\n\",\"keccak256\":\"0x2176366071df181cc073f507c18dfaf748650fcd503034614ab92cb158617731\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVault.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITraderBalanceVaultStorage} from \\\"./ITraderBalanceVaultStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITraderBalanceVault is ITraderBalanceVaultStorage, IPausable {\\n    /**\\n     * Types of way to open a position or order\\n     */\\n    enum OpenType {\\n        OPEN_BY_ORDER,\\n        OPEN,\\n        CREATE_LIMIT_ORDER\\n    }\\n\\n    /**\\n     * @param trader The trader, who opens margin deal\\n     * @param depositReceiver the address to which the deposit is transferred when blocked.\\n     * This happens because the trader's deposit is involved in the position\\n     * @param borrowedAsset The token to lock for deal in a borrowed asset\\n     * @param depositAsset The token is a deposit asset\\n     * (it is blocked when creating a limit order\\n     * For others, the operations is transferred to the account of the receiver of the deposit and is swapped )\\n     * @param depositAmount Amount of tokens in a deposit asset\\n     * @param depositInBorrowedAmount Amount of tokens to lock for deal in a borrowed asset\\n     * @param openType Corresponds to the purpose of locking\\n     */\\n    struct LockAssetParams {\\n        address trader;\\n        address depositReceiver;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        OpenType openType;\\n    }\\n\\n    /**\\n     * @param trader The trader who opened the position\\n     * @param receiver The receiver of the rest of trader deposit.\\n     * @param asset Borrowed asset of the position being closed (the need for accrual of profit).\\n     * @param unlockAmount The amount of unlocked collateral for deal\\n     * @param returnToTrader The returned to trader amount when position was closed.\\n     */\\n    struct UnlockAssetParams {\\n        address trader;\\n        address receiver;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param traders An array of traders for which available balance should be increased\\n     * @param amounts An array of amounts corresponding to traders' addresses that should be added to their available balances\\n     * @param asset Asset address which amount will be increased\\n     * @param length The amount of traders in an array\\n     */\\n    struct BatchTopUpAvailableBalanceParams {\\n        address[] traders;\\n        uint256[] amounts;\\n        address asset;\\n        uint256 length;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed asset, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address asset, uint256 amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _registry The address of Registry contract\\n     * @param _whiteBlackList The address of WhiteBlackList contract\\n     */\\n    function initialize(address _registry, address _whiteBlackList) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @dev Deposits trader collateral for margin deal\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws the rest of trader's deposit after closing deal\\n     * @param _asset The collateral asset for withdraw\\n     * @param _amount The amount of '_asset' to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Traders lock their collateral for the limit order.\\n     * @param _trader The owner of collateral\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function increaseLockedBalance(address _trader, address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Locks deposited trader's assets as collateral for orders.\\n     * Decreases the available balance when opening position.\\n     * Transfers deposited amount to the deposit receiver.\\n     * @param _params parameters necessary to lock asset\\n     */\\n    function useTraderAssets(LockAssetParams calldata _params) external;\\n\\n    /**\\n     * @dev Unlocks trader's collateral when open position by order or update deposit.\\n     * @param _params parameters necessary to unlock asset\\n     */\\n    function unlockAsset(UnlockAssetParams calldata _params) external;\\n\\n    /**\\n     * The function to increase available balance for several traders\\n     * @param _params A struct containing BatchTopUpAvailableBalanceParams\\n     */\\n    function batchTopUpAvailableBalance(BatchTopUpAvailableBalanceParams calldata _params) external;\\n\\n    /**\\n     * Withdraws an asset amount from an asset holder to a receiver\\n     * @param _from Withdraw from address\\n     * @param _to Withdraw to address\\n     * @param _asset Address of an asset\\n     * @param _amount Amount of an asset\\n     * @param fromLocked True if withdraw from locked balance\\n     */\\n    function withdrawFrom(address _from, address _to, address _asset, uint256 _amount, bool fromLocked) external;\\n\\n    /**\\n     * Increases available balance of a receiver in the protocol\\n     * @param receiver The address of an asset receiver\\n     * @param asset The asset address for which available balance will be increased\\n     * @param amount The amount of an asset\\n     */\\n    function topUpAvailableBalance(address receiver, address asset, uint256 amount) external payable;\\n}\\n\\ninterface ITraderBalanceVaultV2 is ITraderBalanceVault {\\n    function getBalancesForAddresses(\\n        address[] calldata _traders,\\n        address _asset\\n    ) external view returns (uint256[] memory availableBalances, uint256[] memory lockedBalances);\\n}\\n\",\"keccak256\":\"0x417b707256772a2304e45ff18a6489f1fe3a4a0d73b6a189d04e322d743ccfdd\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVaultStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITraderBalanceVaultStorage {\\n    struct TraderBalance {\\n        uint256 availableBalance;\\n        uint256 lockedBalance;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    /**\\n     *\\n     * @param trader Trader's address\\n     * @param asset Asset address\\n     * @return availableBalance availableBalance\\n     * @return lockedBalance lockedBalance\\n     */\\n    function balances(\\n        address trader,\\n        address asset\\n    ) external view returns (uint256 availableBalance, uint256 lockedBalance);\\n}\\n\",\"keccak256\":\"0xc0579c182c55abcfcda0e8092e30b04b13e8a8700d0c92914d086fe482673dec\",\"license\":\"BUSL-1.1\"},\"contracts/WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWhiteBlackList {\\n    enum AccessType {\\n        UNLISTED,\\n        WHITELISTED,\\n        BLACKLISTED\\n    }\\n    event WhitelistedAddressAdded(address indexed addr);\\n    event WhitelistedAddressRemoved(address indexed addr);\\n    event BlacklistedAddressAdded(address indexed addr);\\n    event BlacklistedAddressRemoved(address indexed addr);\\n\\n    function addAddressToWhitelist(address _address) external;\\n\\n    function addAddressesToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromWhitelist(address _address) external;\\n\\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external;\\n\\n    function addAddressToBlacklist(address _address) external;\\n\\n    function addAddressesToBlacklist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromBlacklist(address _address) external;\\n\\n    function removeAddressesFromBlacklist(address[] calldata _addresses) external;\\n\\n    function getAccessType(address _address) external view returns (AccessType);\\n\\n    function isBlackListed(address _address) external view returns (bool);\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x785da3d3b2de11abd60ed414f778047d6b216232dbbe6e06d4c1e907805aac85\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice returns an upper bound for the L1 fee for a given transaction size.\\n    /// It is provided for callers who wish to estimate L1 transaction costs in the\\n    /// write path, and is much more gas efficient than `getL1Fee`.\\n    /// It assumes the worst case of fastlz upper-bound which covers %99.99 txs.\\n    /// @param _unsignedTxSize Unsigned fully RLP-encoded transaction size to get the L1 fee for.\\n    /// @return L1 estimated upper-bound fee that should be paid for the tx\\n    function getL1FeeUpperBound(uint256 _unsignedTxSize) external view returns (uint256);\\n\\n    /// @notice Retrieves the current gas price (base fee).\\n    /// @return Current L2 gas price (base fee).\\n    function gasPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc2611c6c185d738d5370fb217f04ecc60b07c299abbc0b04130eb2b085ccce\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2024 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd36ff25b5efe39529dd92bec8aab8fba396c7fc7fed936e64a1de358e52ad2e4\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error WRONG_DEADLINE();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error INCORRECT_ORALLY_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error INCORRECT_CURVELP_ROUTE();\\n    error INCORRECT_UNISWAPV2LP_ROUTE();\\n    error ADDRESS_IS_NOT_UNISWAPV2LP_TOKEN();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    error STORK_VERIFY_FAILED();\\n    error NO_TOKEN_SYMBOL_FOUND();\\n    error NO_TOKEN_PAIR_FOUND();\\n    error INCORRECT_EIP4626_ROUTE();\\n    error NO_UNDERLYING_TOKEN_FOUND();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n\\n    // DepositManager\\n    error REWARD_PERCENT_SHOULD_BE_GREATER_THAN_ZERO();\\n    error TOKEN_CANNOT_BE_P_TOKEN();\\n    //Curve oracle\\n    error ORACLE_NOT_SUPPORT_LP();\\n    error ZERO_ADDRESS();\\n    error REENTRANCY_RISK();\\n    error ORACLE_DATA_AND_TOKENS_LENGTH_MISMATCH();\\n    error INCORRECT_LIMITS();\\n    error INCORRECT_ORACLE_DATA();\\n    error VALUE_OUT_OF_RANGE();\\n    //UniswapV2LPOracle\\n    error INVALID_RESERVES();\\n    error INVALID_PRICES();\\n\\n    // TiersManager\\n    error INCORRECT_TIERS_ORDER();\\n    error INCORRECT_TIER();\\n}\\n\",\"keccak256\":\"0xa994f6418d472a072bf4cb0e4c124e01a8a89847cc275a0793e474e68484087d\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523460bd576000549060ff8260081c16606b575060ff808216036031575b60405161192f90816100c38239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386022565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611258575080630460f0f31461122f5780630ee8c1431461120357806339b07f3e146111da5780633c5c1235146110455780635976cc8614610ef2578063609f047a14610ecf5780637b10399914610ea657806385e676fc14610e7b5780638cf5d1ae14610ba65780639968861e14610b7d578063a3ac887c146105cb578063b61fd5ed146105a2578063d4e8592a1461045b578063de1705701461042f578063df85639e146101085763f8bfd47d146100da57600080fd5b34610103576000366003190112610103576037546040516001600160a01b039091168152602090f35b600080fd5b34610103576060366003190112610103576004356001600160401b038111610103576101389036906004016112c1565b906024356001600160401b038111610103576101589036906004016112c1565b604492919235801515810361010357603354604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8600482015233602482015290602090829060449082906001600160a01b03165afa908115610423576000916103e9575b50156103d757610361575b80840361034f578315610339578135801561032757603a54806102fe575b505060018411610294575b60005b84811061020857005b610213818685611876565b3590603a54600160401b81101561027e5760019261023982856102529401603a556113c9565b90919082549060031b91821b91600019901b1916179055565b61025d818487611876565b35610269828887611876565b356000526039602052604060002055016101ff565b634e487b7160e01b600052604160045260246000fd5b60015b8481106102a457506101fc565b60001981018181116102e8576102bb908685611876565b356102c7828786611876565b3511156102d657600101610297565b6040516379fb858d60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b60001981019081116102e857610313906113c9565b90549060031b1c10156102d65784806101f1565b604051630512989960e51b8152600490fd5b634e487b7160e01b600052603260045260246000fd5b60405163554a08d160e11b8152600490fd5b603a546000603a5580610375575b506101d3565b603a6000527fa2999d817b6757290b50e8ecf3fa939673403dd35c97de392fdb343b4015ce9e017fa2999d817b6757290b50e8ecf3fa939673403dd35c97de392fdb343b4015ce9e5b8181106103cb575061036f565b600081556001016103be565b60405163036be76f60e61b8152600490fd5b90506020813d60201161041b575b816104046020938361132b565b81010312610103576104159061134c565b866101c8565b3d91506103f7565b6040513d6000823e3d90fd5b346101035760003660031901126101035761045761044b6116f2565b604051918291826112f1565b0390f35b34610103576040366003190112610103576004356001600160401b0381116101035761048b9036906004016112c1565b906024356001600160401b038111610103576104ab9036906004016112c1565b603354604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d86004820152336024820152929491939290602090829060449082906001600160a01b03165afa90811561042357600091610568575b50156103d75782810361034f5760005b81811061052a57005b806105386001928688611876565b3561054d610547838688611876565b356113c9565b90549060031b1c600052603960205260406000205501610521565b90506020813d60201161059a575b816105836020938361132b565b81010312610103576105949061134c565b85610511565b3d9150610576565b34610103576000366003190112610103576036546040516001600160a01b039091168152602090f35b346101035760e0366003190112610103576105e46112ab565b6024356001600160a01b03811690819003610103576044356001600160a01b03811690819003610103576064356001600160a01b0381169190829003610103576084356001600160a01b038116908190036101035760a4356001600160401b038111610103576106589036906004016112c1565b94909260c4356001600160401b0381116101035761067a9036906004016112c1565b9390956000549860ff8a60081c1615998a809b610b70575b8015610b59575b6106a290611359565b60ff1981166001176000558a610b47575b506040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b03919091169390602081602481885afa90811561042357600091610b0d575b5080610a9a575b156109385780610a0f575b5080610984575b50806108e7575b506001600160601b0360a01b60385416176038556001600160601b0360a01b6033541617603355831580156107ed575b50505050506000549060ff8260081c16156107945761075f57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b81850361034f57610339578135801561032757603a54806108be575b50506001841161087c575b60005b848110156107445761082a818685611876565b3590603a54600160401b81101561027e5760019261023982856108509401603a556113c9565b61085b818487611876565b35610867828887611876565b35600052603960205260406000205501610817565b60015b84811061088c5750610814565b60001981018181116102e8576108a3908685611876565b356108af828786611876565b3511156102d65760010161087f565b60001981019081116102e8576108d3906113c9565b90549060031b1c10156102d6578580610809565b6040516301ffc9a760e01b81526351c19f7560e01b6004820152602081602481855afa9081156104235760009161094a575b5015610938576001600160601b0360a01b603754161760375587610714565b60405163044aa57560e41b8152600490fd5b90506020813d60201161097c575b816109656020938361132b565b81010312610103576109769061134c565b89610919565b3d9150610958565b6040516301ffc9a760e01b81526351c19f7560e01b6004820152602081602481855afa908115610423576000916109d5575b5015610938576001600160601b0360a01b60365416176036558861070d565b90506020813d602011610a07575b816109f06020938361132b565b8101031261010357610a019061134c565b8a6109b6565b3d91506109e3565b6040516301ffc9a760e01b81526351c19f7560e01b6004820152602081602481855afa90811561042357600091610a60575b5015610938576001600160601b0360a01b603554161760355589610706565b90506020813d602011610a92575b81610a7b6020938361132b565b8101031261010357610a8c9061134c565b8b610a41565b3d9150610a6e565b506040516301ffc9a760e01b8152637965db0b60e01b6004820152602081602481895afa90811561042357600091610ad3575b506106fb565b90506020813d602011610b05575b81610aee6020938361132b565b8101031261010357610aff9061134c565b8b610acd565b3d9150610ae1565b90506020813d602011610b3f575b81610b286020938361132b565b8101031261010357610b399061134c565b8b6106f4565b3d9150610b1b565b61ffff1916610101176000558a6106b3565b50303b158015610699575060ff8116600114610699565b50600160ff821610610692565b34610103576000366003190112610103576034546040516001600160a01b039091168152602090f35b34610103576020366003190112610103576004356001600160401b03811161010357610bd69036906004016112c1565b610bdf816116db565b91610bed604051938461132b565b818352601f19610bfc836116db565b01366020850137610c0b6116f2565b60365460405163946af61960e01b81526020600482015291929060009083906001600160a01b03168180610c43602482018a886117c0565b03915afa91821561042357600092610e5e575b5060375460405163946af61960e01b8152602060048201529060009082906001600160a01b03168180610c8d602482018b896117c0565b03915afa90811561042357600091610e3b575b506034546038546040805163543fcebd60e01b815260048101919091529360009285926001600160a01b0391821692849283921690610ce59060448401908d906117c0565b90602483015203915afa928315610423576000928394610dd0575b5060005b868110610d1957604051806104578a826112f1565b80610d2660019284611862565b51610da557610d358185611862565b51610d7457610d62610d5c610d4a8388611862565b51610d55848a611862565b51906113bc565b88611886565b610d6c828b611862565b525b01610d04565b7f64819635aba340cc5804b9a3603326e0a36ae48001266a863078dcd2a3f6c370610d9f828b611862565b52610d6e565b7f837c639c3c0e126ea778fe4c47c9633279529d5aa1cc4ba539e287cda6367ee1610d9f828b611862565b929093503d8082853e610de3818561132b565b830190604084830312610e345783516001600160401b038111610e375782610e0c918601611805565b936020810151916001600160401b038311610e345750610e2d929101611805565b9287610d00565b80fd5b5080fd5b610e5891503d806000833e610e50818361132b565b81019061173f565b86610ca0565b610e749192503d806000833e610e50818361132b565b9085610c56565b34610103576020366003190112610103576020610e9e610e996112ab565b611636565b604051908152f35b34610103576000366003190112610103576033546040516001600160a01b039091168152602090f35b34610103576020366003190112610103576020610e9e610eed6112ab565b6113e4565b3461010357602036600319011261010357610f0b6112ab565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104235760009161100b575b50156103d7576040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b039190911690602081602481855afa90811561042357600091610fd1575b501561093857603880546001600160a01b031916821790557f904e838d0e0ea7d1f21757c4e5062aaed7a95f76bf22daa2c41066d6e466f675600080a2005b90506020813d602011611003575b81610fec6020938361132b565b8101031261010357610ffd9061134c565b82610f92565b3d9150610fdf565b90506020813d60201161103d575b816110266020938361132b565b81010312610103576110379061134c565b82610f4d565b3d9150611019565b34610103576020366003190112610103576004356001600160a01b0381169081900361010357603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa908115610423576000916111a0575b50156103d75760005460ff8160081c161580611193575b6110cd90611359565b61ffff191661010281176000556040516301ffc9a760e01b815263543fcebd60e01b6004820152602081602481865afa90811561042357600091611159575b5015610938576002916001600160601b0360a01b6034541617603455176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160028152a1005b90506020813d60201161118b575b816111746020938361132b565b81010312610103576111859061134c565b8361110c565b3d9150611167565b50600260ff8216106110c4565b90506020813d6020116111d2575b816111bb6020938361132b565b81010312610103576111cc9061134c565b826110ad565b3d91506111ae565b34610103576000366003190112610103576035546040516001600160a01b039091168152602090f35b346101035760203660031901126101035760043560005260396020526020604060002054604051908152f35b34610103576000366003190112610103576038546040516001600160a01b039091168152602090f35b34610103576020366003190112610103576004359063ffffffff60e01b821680920361010357602091637a70ca2360e01b811490811561129a575b5015158152f35b6301ffc9a760e01b14905083611293565b600435906001600160a01b038216820361010357565b9181601f84011215610103578235916001600160401b038311610103576020808501948460051b01011161010357565b602060408183019282815284518094520192019060005b8181106113155750505090565b8251845260209384019390920191600101611308565b90601f801991011681019081106001600160401b0382111761027e57604052565b5190811515820361010357565b1561136057565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b919082018092116102e857565b603a5481101561033957603a60005260206000200190600090565b6034546038546040805163c23f001f60e01b81526001600160a01b0394851660048201819052928516602482015291939192909183916044918391165afa801561042357600080916115fa575b61143b92506113bc565b906024602060018060a01b036036541660405192838092635cf5473f60e11b82528660048301525afa908115610423576000916115c0575b50603754604051635cf5473f60e11b81526004810193909352602090839060249082906001600160a01b03165afa91821561042357600092611584575b5061155e57611539578015801561152f575b611529576000906000603a54915b8282106114dd5750505090565b9091926114e9836113c9565b90549060031b1c6000526039602052604060002054821061152257506001611510836113c9565b90549060031b1c9201909291926114d0565b9250505090565b50600090565b50603a54156114c2565b507f64819635aba340cc5804b9a3603326e0a36ae48001266a863078dcd2a3f6c37090565b50507f837c639c3c0e126ea778fe4c47c9633279529d5aa1cc4ba539e287cda6367ee190565b9091506020813d6020116115b8575b816115a06020938361132b565b81010312610103576115b19061134c565b90386114b0565b3d9150611593565b90506020813d6020116115f2575b816115db6020938361132b565b81010312610103576115ec9061134c565b38611473565b3d91506115ce565b50506040813d60401161162e575b816116156040938361132b565b810103126101035780602061143b925191015190611431565b3d9150611608565b603554604051635cf5473f60e11b81526001600160a01b0392831660048201529160209183916024918391165afa908115610423576000916116a1575b5061167d57600090565b7f5e0bdf8c8515c219e88cbda025601f1613ca4e20cf180337516f5a79e67a3ca190565b90506020813d6020116116d3575b816116bc6020938361132b565b81010312610103576116cd9061134c565b38611673565b3d91506116af565b6001600160401b03811161027e5760051b60200190565b60405190603a548083528260208101603a60005260206000209260005b8181106117265750506117249250038361132b565b565b845483526001948501948794506020909301920161170f565b602081830312610103578051906001600160401b03821161010357019080601f83011215610103578151611772816116db565b92611780604051948561132b565b81845260208085019260051b82010192831161010357602001905b8282106117a85750505090565b602080916117b58461134c565b81520191019061179b565b916020908281520191906000905b8082106117db5750505090565b90919283359060018060a01b038216809203610103576020816001938293520194019201906117ce565b9080601f8301121561010357815161181c816116db565b9261182a604051948561132b565b81845260208085019260051b82010192831161010357602001905b8282106118525750505090565b8151815260209182019101611845565b80518210156103395760209160051b010190565b91908110156103395760051b0190565b916000821580156118f0575b6118e7576000905b84518210156118e0576118ad8286611862565b51600052603960205260406000205484106118d8575060016118cf8286611862565b5191019061189a565b925050915090565b9350509050565b50915050600090565b5083511561189256fea2646970667358221220fbbfca1916f59d56560b9f46073bb7a68cdb38ce9f43441a4e38c8e4da92e52c64736f6c634300081a0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611258575080630460f0f31461122f5780630ee8c1431461120357806339b07f3e146111da5780633c5c1235146110455780635976cc8614610ef2578063609f047a14610ecf5780637b10399914610ea657806385e676fc14610e7b5780638cf5d1ae14610ba65780639968861e14610b7d578063a3ac887c146105cb578063b61fd5ed146105a2578063d4e8592a1461045b578063de1705701461042f578063df85639e146101085763f8bfd47d146100da57600080fd5b34610103576000366003190112610103576037546040516001600160a01b039091168152602090f35b600080fd5b34610103576060366003190112610103576004356001600160401b038111610103576101389036906004016112c1565b906024356001600160401b038111610103576101589036906004016112c1565b604492919235801515810361010357603354604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8600482015233602482015290602090829060449082906001600160a01b03165afa908115610423576000916103e9575b50156103d757610361575b80840361034f578315610339578135801561032757603a54806102fe575b505060018411610294575b60005b84811061020857005b610213818685611876565b3590603a54600160401b81101561027e5760019261023982856102529401603a556113c9565b90919082549060031b91821b91600019901b1916179055565b61025d818487611876565b35610269828887611876565b356000526039602052604060002055016101ff565b634e487b7160e01b600052604160045260246000fd5b60015b8481106102a457506101fc565b60001981018181116102e8576102bb908685611876565b356102c7828786611876565b3511156102d657600101610297565b6040516379fb858d60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b60001981019081116102e857610313906113c9565b90549060031b1c10156102d65784806101f1565b604051630512989960e51b8152600490fd5b634e487b7160e01b600052603260045260246000fd5b60405163554a08d160e11b8152600490fd5b603a546000603a5580610375575b506101d3565b603a6000527fa2999d817b6757290b50e8ecf3fa939673403dd35c97de392fdb343b4015ce9e017fa2999d817b6757290b50e8ecf3fa939673403dd35c97de392fdb343b4015ce9e5b8181106103cb575061036f565b600081556001016103be565b60405163036be76f60e61b8152600490fd5b90506020813d60201161041b575b816104046020938361132b565b81010312610103576104159061134c565b866101c8565b3d91506103f7565b6040513d6000823e3d90fd5b346101035760003660031901126101035761045761044b6116f2565b604051918291826112f1565b0390f35b34610103576040366003190112610103576004356001600160401b0381116101035761048b9036906004016112c1565b906024356001600160401b038111610103576104ab9036906004016112c1565b603354604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d86004820152336024820152929491939290602090829060449082906001600160a01b03165afa90811561042357600091610568575b50156103d75782810361034f5760005b81811061052a57005b806105386001928688611876565b3561054d610547838688611876565b356113c9565b90549060031b1c600052603960205260406000205501610521565b90506020813d60201161059a575b816105836020938361132b565b81010312610103576105949061134c565b85610511565b3d9150610576565b34610103576000366003190112610103576036546040516001600160a01b039091168152602090f35b346101035760e0366003190112610103576105e46112ab565b6024356001600160a01b03811690819003610103576044356001600160a01b03811690819003610103576064356001600160a01b0381169190829003610103576084356001600160a01b038116908190036101035760a4356001600160401b038111610103576106589036906004016112c1565b94909260c4356001600160401b0381116101035761067a9036906004016112c1565b9390956000549860ff8a60081c1615998a809b610b70575b8015610b59575b6106a290611359565b60ff1981166001176000558a610b47575b506040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b03919091169390602081602481885afa90811561042357600091610b0d575b5080610a9a575b156109385780610a0f575b5080610984575b50806108e7575b506001600160601b0360a01b60385416176038556001600160601b0360a01b6033541617603355831580156107ed575b50505050506000549060ff8260081c16156107945761075f57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b81850361034f57610339578135801561032757603a54806108be575b50506001841161087c575b60005b848110156107445761082a818685611876565b3590603a54600160401b81101561027e5760019261023982856108509401603a556113c9565b61085b818487611876565b35610867828887611876565b35600052603960205260406000205501610817565b60015b84811061088c5750610814565b60001981018181116102e8576108a3908685611876565b356108af828786611876565b3511156102d65760010161087f565b60001981019081116102e8576108d3906113c9565b90549060031b1c10156102d6578580610809565b6040516301ffc9a760e01b81526351c19f7560e01b6004820152602081602481855afa9081156104235760009161094a575b5015610938576001600160601b0360a01b603754161760375587610714565b60405163044aa57560e41b8152600490fd5b90506020813d60201161097c575b816109656020938361132b565b81010312610103576109769061134c565b89610919565b3d9150610958565b6040516301ffc9a760e01b81526351c19f7560e01b6004820152602081602481855afa908115610423576000916109d5575b5015610938576001600160601b0360a01b60365416176036558861070d565b90506020813d602011610a07575b816109f06020938361132b565b8101031261010357610a019061134c565b8a6109b6565b3d91506109e3565b6040516301ffc9a760e01b81526351c19f7560e01b6004820152602081602481855afa90811561042357600091610a60575b5015610938576001600160601b0360a01b603554161760355589610706565b90506020813d602011610a92575b81610a7b6020938361132b565b8101031261010357610a8c9061134c565b8b610a41565b3d9150610a6e565b506040516301ffc9a760e01b8152637965db0b60e01b6004820152602081602481895afa90811561042357600091610ad3575b506106fb565b90506020813d602011610b05575b81610aee6020938361132b565b8101031261010357610aff9061134c565b8b610acd565b3d9150610ae1565b90506020813d602011610b3f575b81610b286020938361132b565b8101031261010357610b399061134c565b8b6106f4565b3d9150610b1b565b61ffff1916610101176000558a6106b3565b50303b158015610699575060ff8116600114610699565b50600160ff821610610692565b34610103576000366003190112610103576034546040516001600160a01b039091168152602090f35b34610103576020366003190112610103576004356001600160401b03811161010357610bd69036906004016112c1565b610bdf816116db565b91610bed604051938461132b565b818352601f19610bfc836116db565b01366020850137610c0b6116f2565b60365460405163946af61960e01b81526020600482015291929060009083906001600160a01b03168180610c43602482018a886117c0565b03915afa91821561042357600092610e5e575b5060375460405163946af61960e01b8152602060048201529060009082906001600160a01b03168180610c8d602482018b896117c0565b03915afa90811561042357600091610e3b575b506034546038546040805163543fcebd60e01b815260048101919091529360009285926001600160a01b0391821692849283921690610ce59060448401908d906117c0565b90602483015203915afa928315610423576000928394610dd0575b5060005b868110610d1957604051806104578a826112f1565b80610d2660019284611862565b51610da557610d358185611862565b51610d7457610d62610d5c610d4a8388611862565b51610d55848a611862565b51906113bc565b88611886565b610d6c828b611862565b525b01610d04565b7f64819635aba340cc5804b9a3603326e0a36ae48001266a863078dcd2a3f6c370610d9f828b611862565b52610d6e565b7f837c639c3c0e126ea778fe4c47c9633279529d5aa1cc4ba539e287cda6367ee1610d9f828b611862565b929093503d8082853e610de3818561132b565b830190604084830312610e345783516001600160401b038111610e375782610e0c918601611805565b936020810151916001600160401b038311610e345750610e2d929101611805565b9287610d00565b80fd5b5080fd5b610e5891503d806000833e610e50818361132b565b81019061173f565b86610ca0565b610e749192503d806000833e610e50818361132b565b9085610c56565b34610103576020366003190112610103576020610e9e610e996112ab565b611636565b604051908152f35b34610103576000366003190112610103576033546040516001600160a01b039091168152602090f35b34610103576020366003190112610103576020610e9e610eed6112ab565b6113e4565b3461010357602036600319011261010357610f0b6112ab565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104235760009161100b575b50156103d7576040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b039190911690602081602481855afa90811561042357600091610fd1575b501561093857603880546001600160a01b031916821790557f904e838d0e0ea7d1f21757c4e5062aaed7a95f76bf22daa2c41066d6e466f675600080a2005b90506020813d602011611003575b81610fec6020938361132b565b8101031261010357610ffd9061134c565b82610f92565b3d9150610fdf565b90506020813d60201161103d575b816110266020938361132b565b81010312610103576110379061134c565b82610f4d565b3d9150611019565b34610103576020366003190112610103576004356001600160a01b0381169081900361010357603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa908115610423576000916111a0575b50156103d75760005460ff8160081c161580611193575b6110cd90611359565b61ffff191661010281176000556040516301ffc9a760e01b815263543fcebd60e01b6004820152602081602481865afa90811561042357600091611159575b5015610938576002916001600160601b0360a01b6034541617603455176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160028152a1005b90506020813d60201161118b575b816111746020938361132b565b81010312610103576111859061134c565b8361110c565b3d9150611167565b50600260ff8216106110c4565b90506020813d6020116111d2575b816111bb6020938361132b565b81010312610103576111cc9061134c565b826110ad565b3d91506111ae565b34610103576000366003190112610103576035546040516001600160a01b039091168152602090f35b346101035760203660031901126101035760043560005260396020526020604060002054604051908152f35b34610103576000366003190112610103576038546040516001600160a01b039091168152602090f35b34610103576020366003190112610103576004359063ffffffff60e01b821680920361010357602091637a70ca2360e01b811490811561129a575b5015158152f35b6301ffc9a760e01b14905083611293565b600435906001600160a01b038216820361010357565b9181601f84011215610103578235916001600160401b038311610103576020808501948460051b01011161010357565b602060408183019282815284518094520192019060005b8181106113155750505090565b8251845260209384019390920191600101611308565b90601f801991011681019081106001600160401b0382111761027e57604052565b5190811515820361010357565b1561136057565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b919082018092116102e857565b603a5481101561033957603a60005260206000200190600090565b6034546038546040805163c23f001f60e01b81526001600160a01b0394851660048201819052928516602482015291939192909183916044918391165afa801561042357600080916115fa575b61143b92506113bc565b906024602060018060a01b036036541660405192838092635cf5473f60e11b82528660048301525afa908115610423576000916115c0575b50603754604051635cf5473f60e11b81526004810193909352602090839060249082906001600160a01b03165afa91821561042357600092611584575b5061155e57611539578015801561152f575b611529576000906000603a54915b8282106114dd5750505090565b9091926114e9836113c9565b90549060031b1c6000526039602052604060002054821061152257506001611510836113c9565b90549060031b1c9201909291926114d0565b9250505090565b50600090565b50603a54156114c2565b507f64819635aba340cc5804b9a3603326e0a36ae48001266a863078dcd2a3f6c37090565b50507f837c639c3c0e126ea778fe4c47c9633279529d5aa1cc4ba539e287cda6367ee190565b9091506020813d6020116115b8575b816115a06020938361132b565b81010312610103576115b19061134c565b90386114b0565b3d9150611593565b90506020813d6020116115f2575b816115db6020938361132b565b81010312610103576115ec9061134c565b38611473565b3d91506115ce565b50506040813d60401161162e575b816116156040938361132b565b810103126101035780602061143b925191015190611431565b3d9150611608565b603554604051635cf5473f60e11b81526001600160a01b0392831660048201529160209183916024918391165afa908115610423576000916116a1575b5061167d57600090565b7f5e0bdf8c8515c219e88cbda025601f1613ca4e20cf180337516f5a79e67a3ca190565b90506020813d6020116116d3575b816116bc6020938361132b565b81010312610103576116cd9061134c565b38611673565b3d91506116af565b6001600160401b03811161027e5760051b60200190565b60405190603a548083528260208101603a60005260206000209260005b8181106117265750506117249250038361132b565b565b845483526001948501948794506020909301920161170f565b602081830312610103578051906001600160401b03821161010357019080601f83011215610103578151611772816116db565b92611780604051948561132b565b81845260208085019260051b82010192831161010357602001905b8282106117a85750505090565b602080916117b58461134c565b81520191019061179b565b916020908281520191906000905b8082106117db5750505090565b90919283359060018060a01b038216809203610103576020816001938293520194019201906117ce565b9080601f8301121561010357815161181c816116db565b9261182a604051948561132b565b81845260208085019260051b82010192831161010357602001905b8282106118525750505090565b8151815260209182019101611845565b80518210156103395760209160051b010190565b91908110156103395760051b0190565b916000821580156118f0575b6118e7576000905b84518210156118e0576118ad8286611862565b51600052603960205260406000205484106118d8575060016118cf8286611862565b5191019061189a565b925050915090565b9350509050565b50915050600090565b5083511561189256fea2646970667358221220fbbfca1916f59d56560b9f46073bb7a68cdb38ce9f43441a4e38c8e4da92e52c64736f6c634300081a0033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface id to check"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pmx()": {
        "notice": "Retrieves the EPMX address"
      },
      "registry()": {
        "notice": "Retrieves the instance of PrimexRegistry contract."
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "traderBalanceVault()": {
        "notice": "Retrieves the instance of TraderBalanceVault contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3021,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3024,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6637,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 71373,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "registry",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IAccessControl)8010"
      },
      {
        "astId": 71377,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "traderBalanceVault",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ITraderBalanceVaultV2)71567"
      },
      {
        "astId": 71381,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "lendingNFT",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IPrimexNFT)62353"
      },
      {
        "astId": 71385,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "tradingNFT",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IPrimexNFT)62353"
      },
      {
        "astId": 71389,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "farmingNFT",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(IPrimexNFT)62353"
      },
      {
        "astId": 71392,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "pmx",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 71397,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "tiersThresholds",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 71400,
        "contract": "contracts/TiersManager/TiersManager.sol:TiersManager",
        "label": "tiers",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControl)8010": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(IPrimexNFT)62353": {
        "encoding": "inplace",
        "label": "contract IPrimexNFT",
        "numberOfBytes": "20"
      },
      "t_contract(ITraderBalanceVaultV2)71567": {
        "encoding": "inplace",
        "label": "contract ITraderBalanceVaultV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}