{
  "address": "0xC6B1AF3dEb9E379ccADF2Fa21263a50E91F4776C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uniswapV3Factory_",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapInterval_",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "poolUpdateInterval_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "T",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lastUpdatedTimestamp",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "lastUpdatedCardinalityNext",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct IUniswapPriceFeed.PoolData",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CARDINALITY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_INTERVAL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "name": "activeFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "addFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        }
      ],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lastUpdatedTimestamp",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "lastUpdatedCardinalityNext",
              "type": "uint16"
            }
          ],
          "internalType": "struct IUniswapPriceFeed.PoolData",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "secondsTwapInterval",
          "type": "uint32"
        }
      ],
      "name": "getQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "secondsTwapInterval",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "secondsUpdateInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "cardinalityNextIncrease",
          "type": "uint8"
        }
      ],
      "name": "getQuoteAndUpdatePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "secondsUpdateInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "cardinalityNextIncrease",
          "type": "uint8"
        }
      ],
      "name": "getUpdatedPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lastUpdatedTimestamp",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "lastUpdatedCardinalityNext",
              "type": "uint16"
            }
          ],
          "internalType": "struct IUniswapPriceFeed.PoolData",
          "name": "pool",
          "type": "tuple"
        },
        {
          "internalType": "int56[]",
          "name": "tickCumulatives",
          "type": "int56[]"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolUpdateInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint48",
          "name": "lastUpdatedTimestamp",
          "type": "uint48"
        },
        {
          "internalType": "uint16",
          "name": "lastUpdatedCardinalityNext",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolUpdateInterval",
          "type": "uint256"
        }
      ],
      "name": "setPoolUpdateInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_twapInterval",
          "type": "uint32"
        }
      ],
      "name": "setTwapInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "twapInterval",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "cardinalityNextIncrease",
          "type": "uint8"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint48",
              "name": "lastUpdatedTimestamp",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "lastUpdatedCardinalityNext",
              "type": "uint16"
            }
          ],
          "internalType": "struct IUniswapPriceFeed.PoolData",
          "name": "highestLiquidityPool",
          "type": "tuple"
        },
        {
          "internalType": "int56[]",
          "name": "tickCumulatives",
          "type": "int56[]"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfaa29eed51095ecf7c0bf00259118fc8210083549db0f0708034be9d320408e2",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xC6B1AF3dEb9E379ccADF2Fa21263a50E91F4776C",
    "transactionIndex": 65,
    "gasUsed": "2490583",
    "logsBloom": "0x
    "blockHash": "0x6d7d334e01126cfb4c37edef934eb14db6b85ac69454b5ed3a7d38544da101ea",
    "transactionHash": "0xfaa29eed51095ecf7c0bf00259118fc8210083549db0f0708034be9d320408e2",
    "logs": [],
    "blockNumber": 23351980,
    "cumulativeGasUsed": "18742463",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x33128a8fC17869897dcE68Ed026d694621f6FDfD",
    "60",
    "86400",
    "0x4FFa6c545a6249baF2D66ce21CeF3D2C2cCa69D0"
  ],
  "numDeployments": 1,
  "solcInputHash": "d3fdc0212b557b60d8931ff12ea439d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV3Factory_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapInterval_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"poolUpdateInterval_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"T\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdatedTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"lastUpdatedCardinalityNext\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct IUniswapPriceFeed.PoolData\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CARDINALITY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_INTERVAL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"activeFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"addFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdatedTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"lastUpdatedCardinalityNext\",\"type\":\"uint16\"}],\"internalType\":\"struct IUniswapPriceFeed.PoolData\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsTwapInterval\",\"type\":\"uint32\"}],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsTwapInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"secondsUpdateInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"cardinalityNextIncrease\",\"type\":\"uint8\"}],\"name\":\"getQuoteAndUpdatePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondsUpdateInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"cardinalityNextIncrease\",\"type\":\"uint8\"}],\"name\":\"getUpdatedPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdatedTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"lastUpdatedCardinalityNext\",\"type\":\"uint16\"}],\"internalType\":\"struct IUniswapPriceFeed.PoolData\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUpdateInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdatedTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"lastUpdatedCardinalityNext\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolUpdateInterval\",\"type\":\"uint256\"}],\"name\":\"setPoolUpdateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_twapInterval\",\"type\":\"uint32\"}],\"name\":\"setTwapInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"cardinalityNextIncrease\",\"type\":\"uint8\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdatedTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"lastUpdatedCardinalityNext\",\"type\":\"uint16\"}],\"internalType\":\"struct IUniswapPriceFeed.PoolData\",\"name\":\"highestLiquidityPool\",\"type\":\"tuple\"},{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"jacopo.eth <jacopo@slice.so>\",\"kind\":\"dev\",\"methods\":{\"addFee(uint24)\":{\"params\":{\"fee\":\"tier to add\"}},\"getExchangeRate(address,address)\":{\"params\":{\"baseToken\":\"Address of an ERC20 token contract used as the baseAmount denomination\",\"quoteToken\":\"Address of an ERC20 token contract used as the quoteAmount denomination\"}},\"getPool(address,address)\":{\"params\":{\"tokenA\":\"Address of one of the ERC20 token contract in the pool\",\"tokenB\":\"Address of the other ERC20 token contract in the pool\"},\"returns\":{\"pool\":\"address, fee, last edit timestamp and last recorded cardinality.\"}},\"getQuote(uint128,address,address,uint32)\":{\"params\":{\"baseAmount\":\"Amount of baseToken to be converted\",\"baseToken\":\"Address of an ERC20 token contract used as the baseAmount denomination\",\"quoteToken\":\"Address of an ERC20 token contract used as the quoteAmount denomination\",\"secondsTwapInterval\":\"Number of seconds in the past from which to calculate the time-weighted quote\"},\"returns\":{\"quoteAmount\":\"Equivalent amount of ERC20 token for baseAmount\"}},\"getQuoteAndUpdatePool(uint128,address,address,uint32,uint256,uint8)\":{\"params\":{\"baseAmount\":\"Amount of baseToken to be converted\",\"baseToken\":\"Address of an ERC20 token contract used as the baseAmount denomination\",\"cardinalityNextIncrease\":\"The increase in cardinality to trigger in a pool if current value < MAX_CARDINALITY\",\"quoteToken\":\"Address of an ERC20 token contract used as the quoteAmount denomination\",\"secondsTwapInterval\":\"Number of seconds in the past from which to calculate the time-weighted quote\",\"secondsUpdateInterval\":\"Seconds after which a pool is considered stale and an update is triggered\"},\"returns\":{\"quoteAmount\":\"Equivalent amount of ERC20 token for baseAmount Note: Set `secondsUpdateInterval` to 0 to always trigger an update, or to block.timestamp to only update if a pool has not been stored yet. Note: Set `cardinalityNextIncrease` to 0 to disable increasing cardinality when updating pool.\"}},\"getUpdatedPool(address,address,uint256,uint8)\":{\"params\":{\"cardinalityNextIncrease\":\"The amount of cardinality to increase when updating a pool, if current value < MAX_CARDINALITY.\",\"secondsUpdateInterval\":\"Seconds after which a pool is considered stale and an update is triggered\",\"tokenA\":\"Address of one of the ERC20 token contract in the pool\",\"tokenB\":\"Address of the other ERC20 token contract in the pool\"},\"returns\":{\"pool\":\"address, fee, last edit timestamp and last recorded cardinality.\",\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value Note: Set `secondsUpdateInterval` to 0 to always trigger an update, or to block.timestamp to only update if a pool has not been stored yet. Note: Set `cardinalityNextIncrease` to 0 to disable increasing cardinality when updating pool.\",\"tickCumulatives\":\"Cumulative tick values as of 30 minutes from the current block timestamp\"}},\"setPoolUpdateInterval(uint256)\":{\"params\":{\"_poolUpdateInterval\":\"new poolUpdateInterval in seconds\"}},\"setTwapInterval(uint32)\":{\"params\":{\"_twapInterval\":\"new TWAP interval in seconds\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"updatePool(address,address,uint8)\":{\"params\":{\"cardinalityNextIncrease\":\"The amount of observation cardinality to increase when updating a pool if current value < MAX_CARDINALITY\",\"tokenA\":\"Address of one of the ERC20 token contract in the pool\",\"tokenB\":\"Address of the other ERC20 token contract in the pool\"},\"returns\":{\"highestLiquidityPool\":\"Pool with the highest harmonic mean liquidity\",\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value\",\"tickCumulatives\":\"Cumulative tick values as of 30 minutes from the current block timestamp\"}}},\"version\":1},\"userdoc\":{\"events\":{\"PoolUpdated((address,uint24,uint48,uint16))\":{\"notice\":\"Emitted when a pool is updated\"}},\"kind\":\"user\",\"methods\":{\"MAX_CARDINALITY()\":{\"notice\":\"Current observation cardinality value under which a cardinality increase is triggered when updating pools\"},\"UPDATE_INTERVAL()\":{\"notice\":\"TWAP interval used when updating pools\"},\"activeFees(uint24)\":{\"notice\":\"Mapping of active fee tiers\"},\"addFee(uint24)\":{\"notice\":\"Add a fee tier to `fees` if supported on Uniswap.\"},\"constructor\":{\"notice\":\"================================= ========== Constructor ========== =================================\"},\"fees(uint256)\":{\"notice\":\"UniswapV3Pool fee tiers\"},\"getExchangeRate(address,address)\":{\"notice\":\"Converts quote amount to exchange rate and updates the pool as needed\"},\"getPool(address,address)\":{\"notice\":\"Retrieves stored pool given tokenA and tokenB regardless of order.\"},\"getQuote(uint128,address,address,uint32)\":{\"notice\":\"Get the time-weighted quote of `quoteToken` received in exchange for a `baseAmount` of `baseToken`, from the pool with highest liquidity, based on a `secondsTwapInterval` twap interval.\"},\"getQuoteAndUpdatePool(uint128,address,address,uint32,uint256,uint8)\":{\"notice\":\"Get the time-weighted quote of `quoteToken`, and updates the pool when necessary.\"},\"getUpdatedPool(address,address,uint256,uint8)\":{\"notice\":\"Retrieves stored pool given tokenA and tokenB regardless of order, and updates pool if necessary.\"},\"pools(address,address)\":{\"notice\":\"Mapping from currency to PoolData\"},\"setPoolUpdateInterval(uint256)\":{\"notice\":\"Set a new twap interval\"},\"setTwapInterval(uint32)\":{\"notice\":\"Set a new twap interval\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"twapInterval()\":{\"notice\":\"TWAP interval in seconds\"},\"uniswapV3Factory()\":{\"notice\":\"UniswapV3Factory contract address\"},\"updatePool(address,address,uint8)\":{\"notice\":\"Updates stored pool with the one having the highest TWAL in the last 30 minutes. See `_updatePool`.\"}},\"notice\":\"Price feed based on Uniswap V3 TWAP oracles.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapPriceFeed/UniswapPriceFeed.sol\":\"UniswapPriceFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolErrors,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0x4e64844c56061cd90e0a80de73534a9166704c43eed579eb83f90bc2780ce968\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/pool/IUniswapV3PoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Errors emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolErrors {\\n    error LOK();\\n    error TLU();\\n    error TLM();\\n    error TUM();\\n    error AI();\\n    error M0();\\n    error M1();\\n    error AS();\\n    error IIA();\\n    error L();\\n    error F0();\\n    error F1();\\n}\\n\",\"keccak256\":\"0xf80abf13fb1fafc127ba4e792f240dd8ea7c8c893978cdfd8439c27fae9a037b\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// @return observationIndex The index of the last oracle observation that was written,\\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @return The liquidity at the current price of the pool\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper\\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return liquidity The amount of liquidity in the position,\\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// @return initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x44fa2ce1182f6c2f6bead3d1737804bf7e112252ae86e0f2e92f9b8249603f43\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery-0.8/contracts/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport '@uniswap/v3-core-0.8/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core-0.8/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core-0.8/contracts/interfaces/IUniswapV3Pool.sol';\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\\n    /// @param pool Address of the pool that we want to observe\\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\\n    function consult(address pool, uint32 secondsAgo)\\n        internal\\n        view\\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\\n    {\\n        require(secondsAgo != 0, 'BP');\\n\\n        uint32[] memory secondsAgos = new uint32[](2);\\n        secondsAgos[0] = secondsAgo;\\n        secondsAgos[1] = 0;\\n\\n        (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) = IUniswapV3Pool(pool)\\n            .observe(secondsAgos);\\n\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[1] -\\n            secondsPerLiquidityCumulativeX128s[0];\\n\\n        arithmeticMeanTick = int24(tickCumulativesDelta / int56(uint56(secondsAgo)));\\n        // Always round to negative infinity\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(secondsAgo)) != 0)) arithmeticMeanTick--;\\n\\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\\n        harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n\\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\\n    function getOldestObservationSecondsAgo(address pool) internal view returns (uint32 secondsAgo) {\\n        (, , uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\\n        require(observationCardinality > 0, 'NI');\\n\\n        (uint32 observationTimestamp, , , bool initialized) = IUniswapV3Pool(pool).observations(\\n            (observationIndex + 1) % observationCardinality\\n        );\\n\\n        // The next index might not be initialized if the cardinality is in the process of increasing\\n        // In this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\\n        }\\n\\n        unchecked {\\n            secondsAgo = uint32(block.timestamp) - observationTimestamp;\\n        }\\n    }\\n\\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool Address of Uniswap V3 pool\\n    /// @return The tick that the pool was in at the start of the current block\\n    function getBlockStartingTickAndLiquidity(address pool) internal view returns (int24, uint128) {\\n        (, int24 tick, uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationCardinality > 1, 'NEO');\\n\\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\\n        (\\n            uint32 observationTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n\\n        ) = IUniswapV3Pool(pool).observations(observationIndex);\\n        if (observationTimestamp != uint32(block.timestamp)) {\\n            return (tick, IUniswapV3Pool(pool).liquidity());\\n        }\\n\\n        uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\\n        (\\n            uint32 prevObservationTimestamp,\\n            int56 prevTickCumulative,\\n            uint160 prevSecondsPerLiquidityCumulativeX128,\\n            bool prevInitialized\\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\\n\\n        require(prevInitialized, 'ONI');\\n\\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\\n        tick = int24((tickCumulative - int56(uint56(prevTickCumulative))) / int56(uint56(delta)));\\n        uint128 liquidity = uint128(\\n            (uint192(delta) * type(uint160).max) /\\n                (uint192(secondsPerLiquidityCumulativeX128 - prevSecondsPerLiquidityCumulativeX128) << 32)\\n        );\\n        return (tick, liquidity);\\n    }\\n\\n    /// @notice Information for calculating a weighted arithmetic mean tick\\n    struct WeightedTickData {\\n        int24 tick;\\n        uint128 weight;\\n    }\\n\\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\\n    /// @param weightedTickData An array of ticks and weights\\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\\n    function getWeightedArithmeticMeanTick(WeightedTickData[] memory weightedTickData)\\n        internal\\n        pure\\n        returns (int24 weightedArithmeticMeanTick)\\n    {\\n        // Accumulates the sum of products between each tick and its weight\\n        int256 numerator;\\n\\n        // Accumulates the sum of the weights\\n        uint256 denominator;\\n\\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\\n        for (uint256 i; i < weightedTickData.length; i++) {\\n            numerator += weightedTickData[i].tick * int256(uint256(weightedTickData[i].weight));\\n            denominator += weightedTickData[i].weight;\\n        }\\n\\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\\n        // Always round to negative infinity\\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedArithmeticMeanTick--;\\n    }\\n\\n    /// @notice Returns the \\\"synthetic\\\" tick which represents the price of the first entry in `tokens` in terms of the last\\n    /// @dev Useful for calculating relative prices along routes.\\n    /// @dev There must be one tick for each pairwise set of tokens.\\n    /// @param tokens The token contract addresses\\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks)\\n        internal\\n        pure\\n        returns (int256 syntheticTick)\\n    {\\n        require(tokens.length - 1 == ticks.length, 'DL');\\n        for (uint256 i = 1; i <= ticks.length; i++) {\\n            // check the tokens for address sort order, then accumulate the\\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \\\"cancel out\\\"\\n            tokens[i - 1] < tokens[i] ? syntheticTick += ticks[i - 1] : syntheticTick -= ticks[i - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb59e12cc9834d6d04bbd63e8a78a3726d46b621ef2981923b704ae0e62fdf76d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\",\"keccak256\":\"0x877c0b0df911dc5658c824d17ca011aa9480696630e326a4f1a046d2db4f2ea1\",\"license\":\"BUSL-1.1\"},\"contracts/UniswapPriceFeed/IUniswapPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n/** @notice This contract (originally IPriceFeed) was taken from (https://github.com/decentralizedlabs/uniswap-v3-price-feed)\\n\\n*/\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IUniswapPriceFeed {\\n    struct PoolData {\\n        address poolAddress;\\n        uint24 fee;\\n        uint48 lastUpdatedTimestamp;\\n        uint16 lastUpdatedCardinalityNext;\\n    }\\n\\n    function uniswapV3Factory() external view returns (address uniswapV3Factory);\\n\\n    function activeFees(uint24 index) external view returns (bool);\\n\\n    function fees(uint256 index) external view returns (uint24 fee);\\n\\n    function pools(\\n        address token0,\\n        address token1\\n    )\\n        external\\n        view\\n        returns (address poolAddress, uint24 fee, uint48 lastUpdatedTimestamp, uint16 lastUpdatedCardinality);\\n\\n    function getPool(address tokenA, address tokenB) external view returns (PoolData memory pool);\\n\\n    function getQuote(\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken,\\n        uint32 secondsTwapInterval\\n    ) external view returns (uint256 quoteAmount);\\n\\n    function getUpdatedPool(\\n        address tokenA,\\n        address tokenB,\\n        uint256 secondsUpdateInterval,\\n        uint8 cardinalityNextIncrease\\n    ) external returns (PoolData memory pool, int56[] memory tickCumulatives, uint160 sqrtPriceX96);\\n\\n    function getQuoteAndUpdatePool(\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken,\\n        uint32 secondsTwapInterval,\\n        uint256 secondsUpdateInterval,\\n        uint8 cardinalityNextIncrease\\n    ) external returns (uint256 quoteAmount);\\n\\n    function updatePool(\\n        address tokenA,\\n        address tokenB,\\n        uint8 cardinalityNextIncrease\\n    ) external returns (PoolData memory highestLiquidityPool, int56[] memory tickCumulatives, uint160 sqrtPriceX96);\\n\\n    function addFee(uint24 fee) external;\\n\\n    function getExchangeRate(address baseToken, address quoteToken) external returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function twapInterval() external view returns (uint32);\\n\\n    function poolUpdateInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa73c5b7447c4956ee8c62d2f99971b980842cee3248eeb23094bd4d9e9a93b61\",\"license\":\"MIT\"},\"contracts/UniswapPriceFeed/UniswapPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/** @notice  A modified version of PriceFeed contract\\n    Origin: https://github.com/decentralizedlabs/uniswap-v3-price-feed\\n    The getExchangeRate function was added, which converts quote amount to exchange rate and updates the pool as needed\\n    Fixed TWAP calculations in the getQuoteAndUpdatePool function\\n    Added several set functions\\n*/\\n\\nimport \\\"./IUniswapPriceFeed.sol\\\";\\nimport {OracleLibrary} from \\\"@uniswap/v3-periphery-0.8/contracts/libraries/OracleLibrary.sol\\\";\\nimport {IUniswapV3Factory} from \\\"@uniswap/v3-core-0.8/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport {IUniswapV3Pool} from \\\"@uniswap/v3-core-0.8/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport {PoolAddress} from \\\"../libraries/utils/PoolAddress.sol\\\";\\nimport {FullMath} from \\\"@uniswap/v3-core-0.8/contracts/libraries/FullMath.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {SMALL_TIMELOCK_ADMIN, MEDIUM_TIMELOCK_ADMIN} from \\\"../Constants.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n// solhint-disable\\n/**\\n * @author jacopo.eth <jacopo@slice.so>\\n *\\n * @notice Price feed based on Uniswap V3 TWAP oracles.\\n */\\ncontract UniswapPriceFeed is IUniswapPriceFeed, ERC165 {\\n    using WadRayMath for uint256;\\n    /// =================================\\n    /// ============ Events =============\\n    /// =================================\\n\\n    /// Emitted when a pool is updated\\n    event PoolUpdated(PoolData pool);\\n\\n    /// =================================\\n    /// ======= Immutable Storage =======\\n    /// =================================\\n\\n    /// Current observation cardinality value under which a cardinality increase is triggered when updating pools\\n    uint16 public constant MAX_CARDINALITY = 256;\\n    /// TWAP interval used when updating pools\\n    uint32 public constant UPDATE_INTERVAL = 30 minutes;\\n    /// UPDATE_INTERVAL multiplied by 2**160\\n    uint192 private constant UPDATE_INTERVAL_X160 = uint192(UPDATE_INTERVAL) << 160;\\n    /// UPDATE_INTERVAL formatted as uint32[]\\n    uint32[] private UPDATE_SECONDS_AGO = [UPDATE_INTERVAL, 0];\\n    /// UniswapV3Pool fee tiers\\n    uint24[] public fees = [10000, 3000, 500, 100];\\n    /// Mapping of active fee tiers\\n    mapping(uint24 => bool) public activeFees;\\n    /// UniswapV3Factory contract address\\n    address public immutable uniswapV3Factory;\\n\\n    /// =================================\\n    /// ============ Storage ============\\n    /// =================================\\n\\n    /// Mapping from currency to PoolData\\n    mapping(address => mapping(address => PoolData)) public pools;\\n\\n    IAccessControl public override registry;\\n\\n    /// TWAP interval in seconds\\n    uint32 public override twapInterval;\\n\\n    // time in seconds showing at what interval the existing pool will be updated\\n    uint256 public override poolUpdateInterval;\\n\\n    /// =================================\\n    /// ========== Constructor ==========\\n    /// =================================\\n\\n    constructor(address uniswapV3Factory_, uint32 twapInterval_, uint256 poolUpdateInterval_, address registry_) {\\n        _require(\\n            ERC165(registry_).supportsInterface(type(IAccessControl).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uniswapV3Factory = uniswapV3Factory_;\\n        twapInterval = twapInterval_;\\n        poolUpdateInterval = poolUpdateInterval_;\\n        registry = IAccessControl(registry_);\\n        // Activate fee tiers\\n        for (uint256 i; i < fees.length; ) {\\n            activeFees[fees[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not granted with _role\\n     * @param _role The role that is being checked for a function caller\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        _require(IAccessControl(registry).hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    /// =================================\\n    /// =========== Functions ===========\\n    /// =================================\\n\\n    /**\\n     * @notice Retrieves stored pool given tokenA and tokenB regardless of order.\\n     * @param tokenA Address of one of the ERC20 token contract in the pool\\n     * @param tokenB Address of the other ERC20 token contract in the pool\\n     * @return pool address, fee, last edit timestamp and last recorded cardinality.\\n     */\\n    function getPool(address tokenA, address tokenB) public view returns (PoolData memory pool) {\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\n        pool = pools[token0][token1];\\n    }\\n\\n    /**\\n     * @notice Converts quote amount to exchange rate and updates the pool as needed\\n     * @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     * @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     */\\n\\n    function getExchangeRate(address baseToken, address quoteToken) external override returns (uint256) {\\n        uint128 baseAmount = uint128(10 ** IERC20Metadata(baseToken).decimals());\\n        uint256 multiplierBase = 10 ** (18 - IERC20Metadata(baseToken).decimals());\\n        uint256 multiplierQuote = 10 ** (18 - IERC20Metadata(quoteToken).decimals());\\n        return\\n            (getQuoteAndUpdatePool(baseAmount, baseToken, quoteToken, twapInterval, poolUpdateInterval, 0) *\\n                multiplierQuote).wdiv(baseAmount * multiplierBase);\\n    }\\n\\n    /**\\n     * @notice Get the time-weighted quote of `quoteToken` received in exchange for a `baseAmount`\\n     * of `baseToken`, from the pool with highest liquidity, based on a `secondsTwapInterval` twap interval.\\n     * @param baseAmount Amount of baseToken to be converted\\n     * @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     * @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     * @param secondsTwapInterval Number of seconds in the past from which to calculate the time-weighted quote\\n     * @return quoteAmount Equivalent amount of ERC20 token for baseAmount\\n     */\\n    function getQuote(\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken,\\n        uint32 secondsTwapInterval\\n    ) public view returns (uint256 quoteAmount) {\\n        address pool = getPool(baseToken, quoteToken).poolAddress;\\n\\n        if (pool != address(0)) {\\n            // Get spot price\\n            if (secondsTwapInterval == 0) {\\n                // Get sqrtPriceX96 from slot0\\n                (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();\\n                quoteAmount = _getQuoteAtSqrtPriceX96(sqrtPriceX96, baseAmount, baseToken, quoteToken);\\n            }\\n            // Get TWAP price\\n            else {\\n                int24 arithmeticMeanTick = _getArithmeticMeanTick(pool, secondsTwapInterval);\\n                quoteAmount = OracleLibrary.getQuoteAtTick(arithmeticMeanTick, baseAmount, baseToken, quoteToken);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves stored pool given tokenA and tokenB regardless of order, and updates pool if necessary.\\n     * @param tokenA Address of one of the ERC20 token contract in the pool\\n     * @param tokenB Address of the other ERC20 token contract in the pool\\n     * @param secondsUpdateInterval Seconds after which a pool is considered stale and an update is triggered\\n     * @param cardinalityNextIncrease The amount of cardinality to increase when updating a pool, if\\n     * current value < MAX_CARDINALITY.\\n     * @return pool address, fee, last edit timestamp and last recorded cardinality.\\n     * @return tickCumulatives Cumulative tick values as of 30 minutes from the current block timestamp\\n     * @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n     *\\n     * Note: Set `secondsUpdateInterval` to 0 to always trigger an update, or to block.timestamp to only update if a pool\\n     * has not been stored yet.\\n     * Note: Set `cardinalityNextIncrease` to 0 to disable increasing cardinality when updating pool.\\n     */\\n    function getUpdatedPool(\\n        address tokenA,\\n        address tokenB,\\n        uint256 secondsUpdateInterval,\\n        uint8 cardinalityNextIncrease\\n    ) public returns (PoolData memory pool, int56[] memory tickCumulatives, uint160 sqrtPriceX96) {\\n        // Shortcircuit update when `secondsUpdateInterval` == 0\\n        if (secondsUpdateInterval == 0)\\n            return _updatePool(tokenA, tokenB, secondsUpdateInterval, cardinalityNextIncrease);\\n\\n        pool = getPool(tokenA, tokenB);\\n\\n        // Update pool if no pool is stored or `secondsUpdateInterval` has passed since `lastUpdatedTimestamp`\\n        if (pool.poolAddress == address(0) || pool.lastUpdatedTimestamp + secondsUpdateInterval <= block.timestamp) {\\n            return _updatePool(tokenA, tokenB, secondsUpdateInterval, cardinalityNextIncrease);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the time-weighted quote of `quoteToken`, and updates the pool when necessary.\\n     * @param baseAmount Amount of baseToken to be converted\\n     * @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n     * @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n     * @param secondsTwapInterval Number of seconds in the past from which to calculate the time-weighted quote\\n     * @param secondsUpdateInterval Seconds after which a pool is considered stale and an update is triggered\\n     * @param cardinalityNextIncrease The increase in cardinality to trigger in a pool if current value < MAX_CARDINALITY\\n     * @return quoteAmount Equivalent amount of ERC20 token for baseAmount\\n     * Note: Set `secondsUpdateInterval` to 0 to always trigger an update, or to block.timestamp to only update if a pool\\n     * has not been stored yet.\\n     * Note: Set `cardinalityNextIncrease` to 0 to disable increasing cardinality when updating pool.\\n     */\\n    function getQuoteAndUpdatePool(\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken,\\n        uint32 secondsTwapInterval,\\n        uint256 secondsUpdateInterval,\\n        uint8 cardinalityNextIncrease\\n    ) public returns (uint256 quoteAmount) {\\n        (PoolData memory pool, , uint160 sqrtPriceX96) = getUpdatedPool(\\n            baseToken,\\n            quoteToken,\\n            secondsUpdateInterval,\\n            cardinalityNextIncrease\\n        );\\n\\n        // If pool exists\\n        if (pool.poolAddress != address(0)) {\\n            // Get spot price\\n            if (secondsTwapInterval == 0) {\\n                // If sqrtPriceX96 was not returned from `getUpdatedPool`\\n                if (sqrtPriceX96 == 0) {\\n                    // Get sqrtPriceX96 from slot0\\n                    (sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool.poolAddress).slot0();\\n                }\\n                quoteAmount = _getQuoteAtSqrtPriceX96(sqrtPriceX96, baseAmount, baseToken, quoteToken);\\n            }\\n            // Get TWAP price\\n            else {\\n                quoteAmount = OracleLibrary.getQuoteAtTick(\\n                    _getArithmeticMeanTick(pool.poolAddress, secondsTwapInterval),\\n                    baseAmount,\\n                    baseToken,\\n                    quoteToken\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates stored pool with the one having the highest TWAL in the last 30 minutes. See `_updatePool`.\\n     * @param tokenA Address of one of the ERC20 token contract in the pool\\n     * @param tokenB Address of the other ERC20 token contract in the pool\\n     * @param cardinalityNextIncrease The amount of observation cardinality to increase when updating a pool if\\n     * current value < MAX_CARDINALITY\\n     * @return highestLiquidityPool Pool with the highest harmonic mean liquidity\\n     * @return tickCumulatives Cumulative tick values as of 30 minutes from the current block timestamp\\n     * @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n     */\\n    function updatePool(\\n        address tokenA,\\n        address tokenB,\\n        uint8 cardinalityNextIncrease\\n    ) public returns (PoolData memory highestLiquidityPool, int56[] memory tickCumulatives, uint160 sqrtPriceX96) {\\n        return _updatePool(tokenA, tokenB, 0, cardinalityNextIncrease);\\n    }\\n\\n    /**\\n     * @notice Updates stored pool with the one having the highest TWAL in the last 30 minutes.\\n     * @param tokenA Address of one of the ERC20 token contract in the pool\\n     * @param tokenB Address of the other ERC20 token contract in the pool\\n     * @param secondsTwapInterval Number of seconds in the past from which to calculate the time-weighted quote\\n     * @param cardinalityNextIncrease The amount of observation cardinality to increase when updating a pool if\\n     * current value < MAX_CARDINALITY\\n     * @return highestLiquidityPool Pool with the highest harmonic mean liquidity\\n     * @return tickCumulatives Cumulative tick values as of 30 minutes from the current block timestamp\\n     * @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n     */\\n    function _updatePool(\\n        address tokenA,\\n        address tokenB,\\n        uint256 secondsTwapInterval,\\n        uint8 cardinalityNextIncrease\\n    ) internal returns (PoolData memory highestLiquidityPool, int56[] memory tickCumulatives, uint160 sqrtPriceX96) {\\n        // Order token addresses\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\n        // Get highest liquidity pool\\n        (highestLiquidityPool, tickCumulatives, sqrtPriceX96) = _getHighestLiquidityPool(\\n            token0,\\n            token1,\\n            secondsTwapInterval,\\n            cardinalityNextIncrease\\n        );\\n\\n        /// Update pool in storage with `highestLiquidityPool`\\n        /// @dev New value should be stored even if highestPool = currentPool to update `lastUpdatedTimestamp`.\\n        pools[token0][token1] = highestLiquidityPool;\\n        emit PoolUpdated(highestLiquidityPool);\\n    }\\n\\n    /**\\n     * @notice Add a fee tier to `fees` if supported on Uniswap.\\n     * @param fee tier to add\\n     */\\n    function addFee(uint24 fee) public {\\n        if (IUniswapV3Factory(uniswapV3Factory).feeAmountTickSpacing(fee) != 0 && !activeFees[fee]) {\\n            activeFees[fee] = true;\\n            fees.push(fee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set a new twap interval\\n     * @param _twapInterval new TWAP interval in seconds\\n     */\\n    function setTwapInterval(uint32 _twapInterval) external onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        twapInterval = _twapInterval;\\n    }\\n\\n    /**\\n     * @notice Set a new twap interval\\n     * @param _poolUpdateInterval new poolUpdateInterval in seconds\\n     */\\n    function setPoolUpdateInterval(uint256 _poolUpdateInterval) external onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        poolUpdateInterval = _poolUpdateInterval;\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IUniswapPriceFeed).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Gets the pool with the highest harmonic liquidity.\\n     * @param token0 Address of the first ERC20 token contract in the pool\\n     * @param token1 Address of the second ERC20 token contract in the pool\\n     * @param secondsTwapInterval Number of seconds in the past from which to calculate the time-weighted quote\\n     * @param cardinalityNextIncrease The amount of observation cardinality to increase when updating a pool if\\n     * current value < MAX_CARDINALITY\\n     * @return highestLiquidityPool Pool with the highest harmonic mean liquidity\\n     * @return highestTickCumulatives Cumulative tick values of the pool with the highest liquidity\\n     * as of 30 minutes from the current block timestamp\\n     * @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n     */\\n    function _getHighestLiquidityPool(\\n        address token0,\\n        address token1,\\n        uint256 secondsTwapInterval,\\n        uint8 cardinalityNextIncrease\\n    )\\n        private\\n        returns (PoolData memory highestLiquidityPool, int56[] memory highestTickCumulatives, uint160 sqrtPriceX96)\\n    {\\n        // Add reference for highest liquidity value\\n        uint256 highestLiquidity;\\n\\n        // Add reference for values used in loop\\n        address poolAddress;\\n        uint256 harmonicMeanLiquidity;\\n        int56[] memory tickCumulatives;\\n\\n        for (uint256 i; i < fees.length; ) {\\n            // Compute pool address\\n            poolAddress = PoolAddress.computeAddress(uniswapV3Factory, PoolAddress.PoolKey(token0, token1, fees[i]));\\n            // If pool has been deployed\\n            if (poolAddress.code.length != 0) {\\n                // Get 30-min harmonic mean liquidity\\n                (harmonicMeanLiquidity, tickCumulatives) = _getHarmonicMeanLiquidity(poolAddress);\\n                // If liquidity is higher than the previously stored one\\n                if (harmonicMeanLiquidity > highestLiquidity) {\\n                    // Update reference values except pool cardinality\\n                    highestLiquidity = harmonicMeanLiquidity;\\n                    highestLiquidityPool = PoolData(poolAddress, fees[i], uint48(block.timestamp), 0);\\n                    highestTickCumulatives = tickCumulatives;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // If there is a pool to update\\n        if (highestLiquidityPool.poolAddress != address(0)) {\\n            if (cardinalityNextIncrease != 0 || secondsTwapInterval == 0) {\\n                // Update observation cardinality of `highestLiquidityPool`\\n                (sqrtPriceX96, , , , highestLiquidityPool.lastUpdatedCardinalityNext, , ) = IUniswapV3Pool(\\n                    highestLiquidityPool.poolAddress\\n                ).slot0();\\n\\n                // If a cardinality increase is wanted and current cardinalityNext < MAX_CARDINALITY\\n                if (cardinalityNextIncrease != 0) {\\n                    if (highestLiquidityPool.lastUpdatedCardinalityNext < MAX_CARDINALITY) {\\n                        // Increase cardinality and update value in reference pool\\n                        // Cannot overflow uint16 as MAX_CARDINALITY + type(uint8).max < uint(16).max\\n                        unchecked {\\n                            highestLiquidityPool.lastUpdatedCardinalityNext += cardinalityNextIncrease;\\n                            IUniswapV3Pool(highestLiquidityPool.poolAddress).increaseObservationCardinalityNext(\\n                                highestLiquidityPool.lastUpdatedCardinalityNext\\n                            );\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Same as `consult` in {OracleLibrary} but saves gas by not calculating `harmonicMeanLiquidity`.\\n     * @param pool Address of the pool that we want to observe\\n     * @param secondsTwapInterval Number of seconds in the past from which to calculate the time-weighted means\\n     * @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsTwapInterval) to block.timestamp\\n     */\\n    function _getArithmeticMeanTick(\\n        address pool,\\n        uint32 secondsTwapInterval\\n    ) private view returns (int24 arithmeticMeanTick) {\\n        uint32[] memory secondsTwapIntervals = new uint32[](2);\\n        secondsTwapIntervals[0] = secondsTwapInterval;\\n        secondsTwapIntervals[1] = 0;\\n\\n        // Call uniswapV3Pool.observe\\n        (bool success, bytes memory data) = pool.staticcall(abi.encodeWithSelector(0x883bdbfd, secondsTwapIntervals));\\n\\n        // If observe hasn't reverted\\n        if (success) {\\n            // Decode `tickCumulatives` from returned data\\n            (int56[] memory tickCumulatives, ) = abi.decode(data, (int56[], uint160[]));\\n\\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n            arithmeticMeanTick = int24(tickCumulativesDelta / int56(uint56(secondsTwapInterval)));\\n            // Always round to negative infinity\\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(secondsTwapInterval)) != 0))\\n                arithmeticMeanTick--;\\n        } else {\\n            _revert(Errors.POOL_CALL_FAILED.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Same as `consult` in {OracleLibrary} but saves gas by not calculating `arithmeticMeanTick` and\\n     * defaulting to twap interval to `UPDATE_SECONDS_AGO`.\\n     * @param pool Address of the pool that we want to observe\\n     * @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsTwapInterval) to block.timestamp\\n     * @return tickCumulatives Cumulative tick values as of 30 minutes from the current block timestamp\\n     *\\n     * @dev Silently handles errors in `uniswapV3Pool.observe` to prevent reverts.\\n     */\\n    function _getHarmonicMeanLiquidity(\\n        address pool\\n    ) private view returns (uint128 harmonicMeanLiquidity, int56[] memory tickCumulatives) {\\n        // Call uniswapV3Pool.observe\\n        (bool success, bytes memory data) = pool.staticcall(abi.encodeWithSelector(0x883bdbfd, UPDATE_SECONDS_AGO));\\n\\n        // If observe hasn't reverted\\n        if (success) {\\n            uint160[] memory secondsPerLiquidityCumulativeX128s;\\n            // Decode `tickCumulatives` and `secondsPerLiquidityCumulativeX128s` from returned data\\n            (tickCumulatives, secondsPerLiquidityCumulativeX128s) = abi.decode(data, (int56[], uint160[]));\\n\\n            uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[1] -\\n                secondsPerLiquidityCumulativeX128s[0];\\n\\n            harmonicMeanLiquidity = uint128(\\n                UPDATE_INTERVAL_X160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32)\\n            );\\n        }\\n    }\\n\\n    /// @notice Reduced `getQuoteAtTick` logic which directly uses sqrtPriceX96\\n    /// @param sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function _getQuoteAtSqrtPriceX96(\\n        uint160 sqrtPriceX96,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) private pure returns (uint256 quoteAmount) {\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtPriceX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtPriceX96) * sqrtPriceX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x223f5322caf5290a98d246957822e58e99e11a8ffbd742a6fc4860b0d83949ff\",\"license\":\"MIT\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice returns an upper bound for the L1 fee for a given transaction size.\\n    /// It is provided for callers who wish to estimate L1 transaction costs in the\\n    /// write path, and is much more gas efficient than `getL1Fee`.\\n    /// It assumes the worst case of fastlz upper-bound which covers %99.99 txs.\\n    /// @param _unsignedTxSize Unsigned fully RLP-encoded transaction size to get the L1 fee for.\\n    /// @return L1 estimated upper-bound fee that should be paid for the tx\\n    function getL1FeeUpperBound(uint256 _unsignedTxSize) external view returns (uint256);\\n\\n    /// @notice Retrieves the current gas price (base fee).\\n    /// @return Current L2 gas price (base fee).\\n    function gasPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc2611c6c185d738d5370fb217f04ecc60b07c299abbc0b04130eb2b085ccce\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n\\n    // DepositManager\\n    error REWARD_PERCENT_SHOULD_BE_GREATER_THAN_ZERO();\\n    error TOKEN_CANNOT_BE_P_TOKEN();\\n}\\n\",\"keccak256\":\"0xe51b2018b7a236e4977fd971fb615ea73c9d07ce6a647725352da8b9158ce48a\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/utils/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// solhint-disable\\n\\n/** @notice Origin: https://github.com/decentralizedlabs/uniswap-v3-price-feed/blob/main/contracts/utils/PoolAddress.sol */\\n\\npragma solidity >=0.5.0;\\n\\n/// @title PoolAddress modified to have <0.8 POOL_INIT_CODE_HASH\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(address tokenA, address tokenB, uint24 fee) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                            POOL_INIT_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc0a26cdea9b39aa42989da39ba2f7bb5fb8f102f79edaa6dfcc18da067cbb8cc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x61014080604052600436101561001457600080fd5b600060c05260c0513560e01c90816301ffc9a71461131a5750806311be8a5214610c6f5780631d27050f14610b865780633c1d5df014610b5e578063403e05d314610a0d5780634acc79ed146109d0578063531aa03e146109955780635b5491821461094f57806363711362146108675780637b1039991461083d5780638200d8731461081f57806389ac414714610801578063901754d71461077557806394fafa12146106a8578063a2d7046f14610656578063b21dfd2014610616578063baaa61be1461027e578063c14152331461025f5763d5cefadc146100f757600080fd5b346102595760c0366003190112610259576101106114b6565b610118611388565b61012061139e565b61012861144e565b60a435929060ff841684036102595760c051936101499060843585856116cb565b82519093849250906001600160a01b03168061016b575b602088604051908152f35b909192939495965063ffffffff8216156000146102395750506001600160a01b0316156101ae575b50906020936101a29392612549565b38808080808080610160565b51604051633850c7bd60e01b81529392915060e090849060049082906001600160a01b03165afa93841561022c576020946101a29460c051916101f7575b509192935093610193565b610219915060e03d60e011610225575b610211818361151a565b810190611644565b505050505050386101ec565b503d610207565b6040513d60c051823e3d90fd5b61025496959450602097935061024f9250611fb3565b61213d565b6101a2565b60c05180fd5b346102595760c051366003190112610259576020600554604051908152f35b346102595760403660031901126102595761029761136d565b61029f611388565b60405163313ce56760e01b81526001600160a01b0383169290602081600481875afa90811561022c5760c051916105ca575b5060206001600160801b036102e7600493611754565b16946040519283809263313ce56760e01b82525afa90811561022c5760c05191610589575b5061031961031e91611765565b611754565b60405163313ce56760e01b81529091906020816004816001600160a01b0388165afa90811561022c5760c05191610548575b5061031961035d91611765565b9063ffffffff60045460a01c1693856005549560c0515061038660c0519760c0519085876116cb565b82519093849250906001600160a01b031680610469575b50505050505050506103b2906103b893611776565b92611776565b60c05150670de0b6b3a7640000820291808304670de0b6b3a7640000148115171561045157670de0b6b3a764000083040361043e576103fa8160011c836116a8565b91821061042b5780156104135760209104604051908152f35b634e487b7160e01b60c051526012600452602460c051fd5b630a77254f60e01b60c05152600460c051fd5b631550e8b760e01b60c05152600460c051fd5b634e487b7160e01b60c051526011600452602460c051fd5b90809293949596979a50156000146105265750506001600160a01b0316156104af575b50916103b8956104a0926103b29594612549565b9381925085878080808061039d565b51604051633850c7bd60e01b81529493925060e09150849060049082906001600160a01b03165afa90811561022c576103b895876104a0936103b29660c05191610501575b509294955092509561048c565b61051a915060e03d60e01161022557610211818361151a565b5050505050508a6104f4565b6103b2979694506103b89993506105439592509061024f91611fb3565b6104a0565b90506020813d602011610581575b816105636020938361151a565b810103126102595761031961057a61035d92611636565b9150610350565b3d9150610556565b90506020813d6020116105c2575b816105a46020938361151a565b81010312610259576103196105bb61031e92611636565b915061030c565b3d9150610597565b90506020813d60201161060e575b816105e56020938361151a565b810103126102595760206001600160801b036102e7610605600494611636565b935050506102d1565b3d91506105d8565b346102595760203660031901126102595760043562ffffff81168091036102595760c051526002602052602060ff604060c0512054166040519015158152f35b346102595760803660031901126102595761066f61136d565b610677611388565b60643560ff81168103610259576106a49261069592604435916116cb565b604093919351938493846113f1565b0390f35b34610259576020366003190112610259576044602060018060a01b036004541660405192838092632474521560e21b82527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b6360048301523360248301525afa90811561022c5760c0519161073b575b50156107295760043560055560c05180f35b60405163036be76f60e61b8152600490fd5b90506020813d60201161076d575b816107566020938361151a565b810103126102595761076790611561565b81610717565b3d9150610749565b346102595760403660031901126102595761078e61136d565b610796611388565b9060018060a01b031660c051526003602052604060c051209060018060a01b0316600052602052608060406000205461ffff6040519160018060a01b038116835262ffffff8160a01c16602084015265ffffffffffff8160b81c16604084015260e81c166060820152f35b346102595760c0513660031901126102595760206040516107088152f35b346102595760c0513660031901126102595760206040516101008152f35b346102595760c051366003190112610259576004546040516001600160a01b039091168152602090f35b34610259576080366003190112610259576108806114b6565b610888611388565b61089061139e565b9161089961144e565b60c051909390926001600160a01b036108b2838361157c565b511694856108c6575b602085604051908152f35b929350909163ffffffff811661093a575060e06004939460405194858092633850c7bd851b82525afa93841561022c5760209461090c9460c05191610915575b50612549565b828080806108bb565b61092e915060e03d60e01161022557610211818361151a565b50505050505086610906565b9261024f61094a94602096611fb3565b61090c565b346102595760c051366003190112610259576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102595760403660031901126102595760806109c16109b361136d565b6109bb611388565b9061157c565b6109ce60405180926113b4565bf35b34610259576020366003190112610259576004356001548110156102595762ffffff6109fd602092611461565b90549060031b1c16604051908152f35b346102595760203660031901126102595760043562ffffff8116809103610259576040516322afcccb60e01b8152600481018290526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561022c5760c05191610b24575b5060020b151580610b09575b610a9b575b60c05180f35b8060c051526002602052604060c05120600160ff19825416179055600154600160401b811015610af157806001610ad59201600155611461565b62ffffff829392549160031b92831b921b191617905580610a95565b634e487b7160e01b60c051526041600452602460c051fd5b508060c05152600260205260ff604060c05120541615610a90565b90506020813d602011610b56575b81610b3f6020938361151a565b8101031261025957610b509061156e565b82610a84565b3d9150610b32565b346102595760c05136600319011261025957602063ffffffff60045460a01c16604051908152f35b346102595760203660031901126102595760043563ffffffff811681036102595760048054604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d89281019290925233602483015291906020816044816001600160a01b0387165afa90811561022c5760c05191610c35575b50156107295763ffffffff60a01b1990911660a09190911b63ffffffff60a01b161760045560c05180f35b90506020813d602011610c67575b81610c506020938361151a565b8101031261025957610c6190611561565b83610c0a565b3d9150610c43565b3461025957606036600319011261025957610c8861136d565b610c90611388565b6044359160ff8316830361025957610ca661153c565b50610caf61153c565b506001600160a01b03828116908216101561131557905b60c051608081905260a052610cd961153c565b608052606060a081905260c0516001549093918491907f0000000000000000000000000000000000000000000000000000000000000000901b6bffffffffffffffffffffffff1916825b828110610f25575050608051516001600160a01b03169150819050610e1f575b506106a4935060a051506080515060018060a01b031660c051526003602052604060c051209060018060a01b0316600052602052604060002060018060a01b036080515116815462ffffff60a01b6020608051015160a01b1665ffffffffffff60b81b6040608051015160b81b169161ffff60e81b6060608051015160e81b169361ffff60e81b199162ffffff60e81b16171617171790557fa4f1f360d824552e10292fb28c429d3e58b8d91cb89604b82559507cf4d72ff66080604051610e0c8183516113b4565ba160405191829160a051608051846113f1565b60ff8516159081158092610f1d575b610e39575b50610d43565b604051633850c7bd60e01b815291945060e090829060049082905afa94851561022c5760c0519160c05196610ef2575b5061ffff6060608051019616918287529415610e3357610100821015610e335760ff160161ffff1693849052608051516001600160a01b0316803b1561025957604051946332148f6760e01b865260048601528460248160c0519360c051905af193841561022c576106a494610ee0575b80610e33565b60c051610eec9161151a565b84610eda565b909550610f0e915060e03d60e01161022557610211818361151a565b50509392505050909486610e69565b506001610e2e565b62ffffff610f3282611461565b90549060031b1c168060408051610f48816114fe565b6001600160a01b03898116808352908b16602083018190529290910192909252111561025957604051602081019160018060a01b038816835260018060a01b0389166040830152606082015260608152610fa360808261151a565b51902060405190602082019060ff60f81b825284602184015260358301527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54605583015260558252610ff660758361151a565b905190206001600160a01b0316803b611013575b50600101610d23565b60c0805160405163883bdbfd60e01b6020808301919091526024820152825154604482018190528351805292516060937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639183916064830191905b806007830110611290576110cb945491818110611279575b818110611260575b818110611246575b81811061122d575b818110611213575b8181106111f9575b8181106111df575b106111d1575b5003601f19810183528261151a565b60c0519060c05190602081519101865afa6110e4611e74565b90611156575b506001600160801b0316868111611103575b505061100a565b95506001929162ffffff61111684611461565b90549060031b1c166040519161112b836114cc565b8252602082015265ffffffffffff4216604082015260c051606082015260805260a0529089806110fc565b905061116c915060208082518301019101611eb4565b6001600160a01b0361117d82611e57565b5116906001600160a01b039061119290611e67565b511690036001600160a01b0381116104515760201b640100000000600160c01b031680156104135760e160a31b046001600160801b03908116906110ea565b60e01c81526020018f6110bc565b92602060019163ffffffff8560c01c1681520193016110b6565b92602060019163ffffffff8560a01c1681520193016110ae565b92602060019163ffffffff8560801c1681520193016110a6565b92602060019163ffffffff858c1c16815201930161109e565b92602060019163ffffffff8560401c168152019301611096565b92602060019163ffffffff85831c16815201930161108e565b92602060019163ffffffff85168152019301611086565b916008919350610100600191865463ffffffff8116825263ffffffff8160201c16602083015263ffffffff8160401c16604083015263ffffffff818c1c168b83015263ffffffff8160801c16608083015263ffffffff8160a01c1660a083015263ffffffff8160c01c1660c083015260e01c60e082015201940192018492939161106e565b610cc6565b34610259576020366003190112610259576004359063ffffffff60e01b821680920361025957602091630cc36a0960e11b811490811561135c575b5015158152f35b6301ffc9a760e01b14905083611355565b600435906001600160a01b038216820361138357565b600080fd5b602435906001600160a01b038216820361138357565b604435906001600160a01b038216820361138357565b80516001600160a01b0316825260208082015162ffffff169083015260408082015165ffffffffffff169083015260609081015161ffff16910152565b919392936114038360c08101936113b4565b60c060808401528051809252602060e0840191019160005b81811061143557505060a0915093600180831b0316910152565b835160060b83526020938401939092019160010161141b565b6064359063ffffffff8216820361138357565b906001548210156114a0576001600052600a8083047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601920660030290565b634e487b7160e01b600052603260045260246000fd5b600435906001600160801b038216820361138357565b6080810190811067ffffffffffffffff8211176114e857604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176114e857604052565b90601f8019910116810190811067ffffffffffffffff8211176114e857604052565b60405190611549826114cc565b60006060838281528260208201528260408201520152565b5190811515820361138357565b51908160020b820361138357565b61158461153c565b506001600160a01b03828116908216101561160d575b60018060a01b0316600052600360205260406000209060018060a01b0316600052602052604060002061ffff604051916115d3836114cc565b546001600160a01b038116835260a081901c62ffffff16602084015260b881901c65ffffffffffff16604084015260e81c16606082015290565b9061159a565b51906001600160a01b038216820361138357565b519061ffff8216820361138357565b519060ff8216820361138357565b908160e09103126113835761165881611613565b916116656020830161156e565b9161167260408201611627565b9161167f60608301611627565b9161168c60808201611627565b916116a560c061169e60a08501611636565b9301611561565b90565b919082018092116116b557565b634e487b7160e01b600052601160045260246000fd5b939091926116d761153c565b506060936000938115611745576116ee818861157c565b80519097906001600160a01b0316158015611726575b61170e5750505050565b9193965091935061171f9450611789565b9192909190565b5061173d8365ffffffffffff60408b0151166116a8565b421015611704565b919350919461171f9450611789565b60ff16604d81116116b557600a0a90565b60ff166012039060ff82116116b557565b818102929181159184041417156116b557565b939192909361179661153c565b506000610120526001600160a01b038581169082161015611e395793925b6101205160e0819052610100526117c961153c565b60e052606061010052610120516001546001600160a01b03909616959092908390815b8181106119ec57505060e051516001600160a01b0316919050816118d1575b50505090610100519260e0519461012051526003602052604061012051209060018060a01b0316600052602052604060002060018060a01b0360e0515116815462ffffff60a01b602060e051015160a01b1665ffffffffffff60b81b604060e051015160b81b169161ffff60e81b606060e051015160e81b169361ffff60e81b199162ffffff60e81b16171617171790557fa4f1f360d824552e10292fb28c429d3e58b8d91cb89604b82559507cf4d72ff660806040516118ce8160e0516113b4565ba1565b60ff169081159283159081946119e3575b506118ed575b61180b565b60049192935060e09060405192838092633850c7bd851b82525afa9182156119a357610120519161012051936119b8575b5061ffff606060e05101931691828452931561180b576101008210156118e8570161ffff169081905260e051516001600160a01b0316803b156119b157604051916332148f6760e01b8352600483015281602481610120519361012051905af180156119a357611990575b808061180b565b6101205161199d9161151a565b38611989565b6040513d61012051823e3d90fd5b6101205180fd5b9092506119d4915060e03d60e01161022557610211818361151a565b5050939250505090913861191e565b905015386118e2565b62ffffff6119f982611461565b90549060031b1c168060408051611a0f816114fe565b8c81526001600160a01b038c16602082018190529101919091528a10156119b15760405160208101918b835260018060a01b038b166040830152606082015260608152611a5d60808261151a565b51902060405190602082019060ff60f81b82526bffffffffffffffffffffffff197f000000000000000000000000000000000000000000000000000000000000000060601b16602184015260358301527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54605583015260558252611ae260758361151a565b905190206001600160a01b0316803b611aff575b506001016117ec565b610120805160405163883bdbfd60e01b6020808301919091526024820152825154604482018190528351805292516060937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639183916064830191905b806007830110611db457611bb7945491818110611d9d575b818110611d84575b818110611d6a575b818110611d51575b818110611d37575b818110611d1d575b818110611d03575b10611cf5575003601f19810183528261151a565b61012051906101205190602081519101865afa611bd2611e74565b90611c46575b506001600160801b0316858111611bf1575b5050611af6565b94506001929162ffffff611c0484611461565b90549060031b1c1660405191611c19836114cc565b8252602082015265ffffffffffff4216604082015261012051606082015260e05261010052903880611bea565b9050611c5c915060208082518301019101611eb4565b6001600160a01b03611c6d82611e57565b5116906001600160a01b0390611c8290611e67565b511690036001600160a01b038111611cdb5760201b640100000000600160c01b03168015611cc15760e160a31b046001600160801b0390811690611bd8565b634e487b7160e01b61012051526012600452602461012051fd5b634e487b7160e01b61012051526011600452602461012051fd5b60e01c8152602001386110bc565b92602060019163ffffffff8560c01c168152019301611ba3565b92602060019163ffffffff8560a01c168152019301611b9b565b92602060019163ffffffff8560801c168152019301611b93565b92602060019163ffffffff858c1c168152019301611b8b565b92602060019163ffffffff8560401c168152019301611b83565b92602060019163ffffffff85831c168152019301611b7b565b92602060019163ffffffff85168152019301611b73565b916008919350610100600191865463ffffffff8116825263ffffffff8160201c16602083015263ffffffff8160401c16604083015263ffffffff818c1c168b83015263ffffffff8160801c16608083015263ffffffff8160a01c1660a083015263ffffffff8160c01c1660c083015260e01c60e0820152019401920184929391611b5b565b926117b4565b67ffffffffffffffff81116114e85760051b60200190565b8051600110156114a05760400190565b8051156114a05760200190565b3d15611eaf573d9067ffffffffffffffff82116114e85760405191611ea3601f8201601f19166020018461151a565b82523d6000602084013e565b606090565b919060408382031261138357825167ffffffffffffffff811161138357830181601f82011215611383578051611ee981611e3f565b91611ef7604051938461151a565b81835260208084019260051b8201019084821161138357602001915b818310611f99575050509260208101519067ffffffffffffffff821161138357019080601f83011215611383578151611f4b81611e3f565b92611f59604051948561151a565b81845260208085019260051b82010192831161138357602001905b828210611f815750505090565b60208091611f8e84611613565b815201910190611f74565b82518060060b810361138357815260209283019201611f13565b919091604051611fc460608261151a565b6002815260208101604036823763ffffffff611fdf83611e67565b95168095526000611fef83611e57565b5260405163883bdbfd60e01b602080830191825260248301529251604482018190529091606483019160005b81811061212157505050918161203e60009593869503601f19810183528261151a565b51915afa61204a611e74565b901561210f578060208061206393518301019101611eb4565b5061207a61207082611e57565b5160060b91611e67565b5160060b900391667fffffffffffff198312667fffffffffffff8413176116b55760060b9160060b82156120f957667fffffffffffff1981146000198414166116b55782810560020b926000821291826120ea575b50506120d757565b90627fffff1981146116b5576000190190565b0760060b1515905038806120cf565b634e487b7160e01b600052601260045260246000fd5b6040516303875aeb60e51b8152600490fd5b825163ffffffff1684526020938401939092019160010161201b565b9092919060020b60008112156125435780600003905b620d89e88211612532576001821615612520576001600160881b036ffffcb933bd6fad37aa2d162d1a5940015b169160028116612504575b600481166124e8575b600881166124cc575b601081166124b0575b60208116612494575b60408116612478575b6080811661245c575b6101008116612440575b6102008116612424575b6104008116612408575b61080081166123ec575b61100081166123d0575b61200081166123b4575b6140008116612398575b618000811661237c575b620100008116612360575b620200008116612345575b62040000811661232a575b6208000016612311575b600012612302575b63ffffffff81166122fa576000905b60201c60ff91909116016001600160a01b03166001600160801b0381116122b7578061227e91611776565b916001600160a01b03908116911610156122a5576001600160801b036116a5921690612722565b6001600160801b036116a5921661269f565b806122c19161256e565b916001600160a01b03908116911610156122e8576001600160801b036116a5921690612650565b6001600160801b036116a592166125c0565b600190612253565b80156120f95760001904612244565b6b048a170391f7dc42444e8fa290910260801c9061223c565b6d2216e584f5fa1ea926041bedfe9890920260801c91612232565b916e5d6af8dedb81196699c329225ee6040260801c91612227565b916f09aa508b5b7a84e1c677de54f3e99bc90260801c9161221c565b916f31be135f97d08fd981231505542fcfa60260801c91612211565b916f70d869a156d2a1b890bb3df62baf32f70260801c91612207565b916fa9f746462d870fdf8a65dc1f90e061e50260801c916121fd565b916fd097f3bdfd2022b8845ad8f792aa58250260801c916121f3565b916fe7159475a2c29b7443b29c7fa6e889d90260801c916121e9565b916ff3392b0822b70005940c7a398e4b70f30260801c916121df565b916ff987a7253ac413176f2b074cf7815e540260801c916121d5565b916ffcbe86c7900a88aedcffc83b479aa3a40260801c916121cb565b916ffe5dee046a99a2a811c461f1969c30530260801c916121c1565b916fff2ea16466c96a3843ec78b326b528610260801c916121b8565b916fff973b41fa98c081472e6896dfb254c00260801c916121af565b916fffcb9843d60f6159c9db58835c9266440260801c916121a6565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c9161219d565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91612194565b916ffff97272373d413259a46990580e213a0260801c9161218b565b6001600160881b03600160801b612180565b6315e4079d60e11b60005260046000fd5b80612153565b909291906001600160a01b03166001600160801b0381116122b7578061227e91611776565b60009160001981830991818102938480851094039380850394146125b65783600160401b11156125b3575090600160401b910990828211900360c01b910360401c1790565b80fd5b5050505060401c90565b60001981600160801b09918160801b918280851094039380850394146126435783821115611383578190600160801b09818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b5080925015611383570490565b60009190600019828209918082029384808510940393808503941461269557600160801b8410156125b35750600160801b910990828211900360801b910360801c1790565b5050505060801c90565b60001981600160c01b09918160c01b918280851094039380850394146126435783821115611383578190600160c01b09818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b60009190600019828209918082029384808510940393808503941461276757600160c01b8410156125b35750600160c01b910990828211900360401b910360c01c1790565b5050505060c01c9056fea26469706673582212200b964bf468ca1117b085c88518203a06e5fd80421882fdd438e055dabcd3c67d64736f6c634300081a0033",
  "devdoc": {
    "author": "jacopo.eth <jacopo@slice.so>",
    "kind": "dev",
    "methods": {
      "addFee(uint24)": {
        "params": {
          "fee": "tier to add"
        }
      },
      "getExchangeRate(address,address)": {
        "params": {
          "baseToken": "Address of an ERC20 token contract used as the baseAmount denomination",
          "quoteToken": "Address of an ERC20 token contract used as the quoteAmount denomination"
        }
      },
      "getPool(address,address)": {
        "params": {
          "tokenA": "Address of one of the ERC20 token contract in the pool",
          "tokenB": "Address of the other ERC20 token contract in the pool"
        },
        "returns": {
          "pool": "address, fee, last edit timestamp and last recorded cardinality."
        }
      },
      "getQuote(uint128,address,address,uint32)": {
        "params": {
          "baseAmount": "Amount of baseToken to be converted",
          "baseToken": "Address of an ERC20 token contract used as the baseAmount denomination",
          "quoteToken": "Address of an ERC20 token contract used as the quoteAmount denomination",
          "secondsTwapInterval": "Number of seconds in the past from which to calculate the time-weighted quote"
        },
        "returns": {
          "quoteAmount": "Equivalent amount of ERC20 token for baseAmount"
        }
      },
      "getQuoteAndUpdatePool(uint128,address,address,uint32,uint256,uint8)": {
        "params": {
          "baseAmount": "Amount of baseToken to be converted",
          "baseToken": "Address of an ERC20 token contract used as the baseAmount denomination",
          "cardinalityNextIncrease": "The increase in cardinality to trigger in a pool if current value < MAX_CARDINALITY",
          "quoteToken": "Address of an ERC20 token contract used as the quoteAmount denomination",
          "secondsTwapInterval": "Number of seconds in the past from which to calculate the time-weighted quote",
          "secondsUpdateInterval": "Seconds after which a pool is considered stale and an update is triggered"
        },
        "returns": {
          "quoteAmount": "Equivalent amount of ERC20 token for baseAmount Note: Set `secondsUpdateInterval` to 0 to always trigger an update, or to block.timestamp to only update if a pool has not been stored yet. Note: Set `cardinalityNextIncrease` to 0 to disable increasing cardinality when updating pool."
        }
      },
      "getUpdatedPool(address,address,uint256,uint8)": {
        "params": {
          "cardinalityNextIncrease": "The amount of cardinality to increase when updating a pool, if current value < MAX_CARDINALITY.",
          "secondsUpdateInterval": "Seconds after which a pool is considered stale and an update is triggered",
          "tokenA": "Address of one of the ERC20 token contract in the pool",
          "tokenB": "Address of the other ERC20 token contract in the pool"
        },
        "returns": {
          "pool": "address, fee, last edit timestamp and last recorded cardinality.",
          "sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value Note: Set `secondsUpdateInterval` to 0 to always trigger an update, or to block.timestamp to only update if a pool has not been stored yet. Note: Set `cardinalityNextIncrease` to 0 to disable increasing cardinality when updating pool.",
          "tickCumulatives": "Cumulative tick values as of 30 minutes from the current block timestamp"
        }
      },
      "setPoolUpdateInterval(uint256)": {
        "params": {
          "_poolUpdateInterval": "new poolUpdateInterval in seconds"
        }
      },
      "setTwapInterval(uint32)": {
        "params": {
          "_twapInterval": "new TWAP interval in seconds"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "updatePool(address,address,uint8)": {
        "params": {
          "cardinalityNextIncrease": "The amount of observation cardinality to increase when updating a pool if current value < MAX_CARDINALITY",
          "tokenA": "Address of one of the ERC20 token contract in the pool",
          "tokenB": "Address of the other ERC20 token contract in the pool"
        },
        "returns": {
          "highestLiquidityPool": "Pool with the highest harmonic mean liquidity",
          "sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value",
          "tickCumulatives": "Cumulative tick values as of 30 minutes from the current block timestamp"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "PoolUpdated((address,uint24,uint48,uint16))": {
        "notice": "Emitted when a pool is updated"
      }
    },
    "kind": "user",
    "methods": {
      "MAX_CARDINALITY()": {
        "notice": "Current observation cardinality value under which a cardinality increase is triggered when updating pools"
      },
      "UPDATE_INTERVAL()": {
        "notice": "TWAP interval used when updating pools"
      },
      "activeFees(uint24)": {
        "notice": "Mapping of active fee tiers"
      },
      "addFee(uint24)": {
        "notice": "Add a fee tier to `fees` if supported on Uniswap."
      },
      "constructor": {
        "notice": "================================= ========== Constructor ========== ================================="
      },
      "fees(uint256)": {
        "notice": "UniswapV3Pool fee tiers"
      },
      "getExchangeRate(address,address)": {
        "notice": "Converts quote amount to exchange rate and updates the pool as needed"
      },
      "getPool(address,address)": {
        "notice": "Retrieves stored pool given tokenA and tokenB regardless of order."
      },
      "getQuote(uint128,address,address,uint32)": {
        "notice": "Get the time-weighted quote of `quoteToken` received in exchange for a `baseAmount` of `baseToken`, from the pool with highest liquidity, based on a `secondsTwapInterval` twap interval."
      },
      "getQuoteAndUpdatePool(uint128,address,address,uint32,uint256,uint8)": {
        "notice": "Get the time-weighted quote of `quoteToken`, and updates the pool when necessary."
      },
      "getUpdatedPool(address,address,uint256,uint8)": {
        "notice": "Retrieves stored pool given tokenA and tokenB regardless of order, and updates pool if necessary."
      },
      "pools(address,address)": {
        "notice": "Mapping from currency to PoolData"
      },
      "setPoolUpdateInterval(uint256)": {
        "notice": "Set a new twap interval"
      },
      "setTwapInterval(uint32)": {
        "notice": "Set a new twap interval"
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "twapInterval()": {
        "notice": "TWAP interval in seconds"
      },
      "uniswapV3Factory()": {
        "notice": "UniswapV3Factory contract address"
      },
      "updatePool(address,address,uint8)": {
        "notice": "Updates stored pool with the one having the highest TWAL in the last 30 minutes. See `_updatePool`."
      }
    },
    "notice": "Price feed based on Uniswap V3 TWAP oracles.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67162,
        "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
        "label": "UPDATE_SECONDS_AGO",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 67171,
        "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
        "label": "fees",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint24)dyn_storage"
      },
      {
        "astId": 67176,
        "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
        "label": "activeFees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint24,t_bool)"
      },
      {
        "astId": 67187,
        "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PoolData)66958_storage))"
      },
      {
        "astId": 67191,
        "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
        "label": "registry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAccessControl)7879"
      },
      {
        "astId": 67195,
        "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
        "label": "twapInterval",
        "offset": 20,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 67198,
        "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
        "label": "poolUpdateInterval",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint24)dyn_storage": {
        "base": "t_uint24",
        "encoding": "dynamic_array",
        "label": "uint24[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControl)7879": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(PoolData)66958_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IUniswapPriceFeed.PoolData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(PoolData)66958_storage)"
      },
      "t_mapping(t_address,t_struct(PoolData)66958_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IUniswapPriceFeed.PoolData)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolData)66958_storage"
      },
      "t_mapping(t_uint24,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(PoolData)66958_storage": {
        "encoding": "inplace",
        "label": "struct IUniswapPriceFeed.PoolData",
        "members": [
          {
            "astId": 66951,
            "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 66953,
            "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
            "label": "fee",
            "offset": 20,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 66955,
            "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
            "label": "lastUpdatedTimestamp",
            "offset": 23,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 66957,
            "contract": "contracts/UniswapPriceFeed/UniswapPriceFeed.sol:UniswapPriceFeed",
            "label": "lastUpdatedCardinalityNext",
            "offset": 29,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}