/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IRedeemerStorage {
  export type VestingScheduleStruct = {
    beneficiary: AddressLike;
    cliff: BigNumberish;
    amountTotal: BigNumberish;
    released: BigNumberish;
  };

  export type VestingScheduleStructOutput = [
    beneficiary: string,
    cliff: bigint,
    amountTotal: bigint,
    released: bigint
  ] & {
    beneficiary: string;
    cliff: bigint;
    amountTotal: bigint;
    released: bigint;
  };

  export type VestingParamsStruct = {
    cliff: BigNumberish;
    duration: BigNumberish;
    slicePeriodSeconds: BigNumberish;
    initialUnlockPercentage: BigNumberish;
    redeemDeadline: BigNumberish;
  };

  export type VestingParamsStructOutput = [
    cliff: bigint,
    duration: bigint,
    slicePeriodSeconds: bigint,
    initialUnlockPercentage: bigint,
    redeemDeadline: bigint
  ] & {
    cliff: bigint;
    duration: bigint;
    slicePeriodSeconds: bigint;
    initialUnlockPercentage: bigint;
    redeemDeadline: bigint;
  };
}

export interface RedeemerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computeNextVestingScheduleIdForHolder"
      | "computeReleasableAmount"
      | "computeVestingScheduleIdForAddressAndIndex"
      | "createVestingSchedule"
      | "epmx"
      | "getAllVestingSchedulesByAddress"
      | "getLastVestingScheduleForHolder"
      | "getVestingIdAtIndex"
      | "getVestingSchedule"
      | "getVestingScheduleByAddressAndIndex"
      | "getVestingSchedulesCount"
      | "getVestingSchedulesCountByBeneficiary"
      | "getVestingSchedulesTotalAmount"
      | "getWithdrawableAmount"
      | "initialize"
      | "isBlackListed"
      | "isWhiteListed"
      | "pmx"
      | "registry"
      | "release"
      | "setStatusesToBlackList"
      | "setStatusesToWhiteList"
      | "setVestingParams"
      | "switchWhiteListingFlag"
      | "treasury"
      | "vestingParams"
      | "withdrawUnclaimed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "TokenReleased"
      | "VestingScheduleCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "computeNextVestingScheduleIdForHolder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingSchedule",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllVestingSchedulesByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastVestingScheduleForHolder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingScheduleByAddressAndIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedulesTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean,
      IRedeemerStorage.VestingParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlackListed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhiteListed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatusesToBlackList",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatusesToWhiteList",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingParams",
    values: [IRedeemerStorage.VestingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "switchWhiteListingFlag",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestingParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnclaimed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "computeNextVestingScheduleIdForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeVestingScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllVestingSchedulesByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastVestingScheduleForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingScheduleByAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesCountByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedulesTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlackListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhiteListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStatusesToBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStatusesToWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchWhiteListingFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnclaimed",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenReleasedEvent {
  export type InputTuple = [
    _beneficiary: AddressLike,
    _amount: BigNumberish,
    _id: BytesLike
  ];
  export type OutputTuple = [
    _beneficiary: string,
    _amount: bigint,
    _id: string
  ];
  export interface OutputObject {
    _beneficiary: string;
    _amount: bigint;
    _id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingScheduleCreatedEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _beneficiary: AddressLike,
    _amount: BigNumberish,
    _id: BytesLike
  ];
  export type OutputTuple = [
    _sender: string,
    _beneficiary: string,
    _amount: bigint,
    _id: string
  ];
  export interface OutputObject {
    _sender: string;
    _beneficiary: string;
    _amount: bigint;
    _id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Redeemer extends BaseContract {
  connect(runner?: ContractRunner | null): Redeemer;
  waitForDeployment(): Promise<this>;

  interface: RedeemerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeNextVestingScheduleIdForHolder: TypedContractMethod<
    [holder: AddressLike],
    [string],
    "view"
  >;

  computeReleasableAmount: TypedContractMethod<
    [vestingScheduleId: BytesLike],
    [bigint],
    "view"
  >;

  computeVestingScheduleIdForAddressAndIndex: TypedContractMethod<
    [holder: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  createVestingSchedule: TypedContractMethod<
    [_beneficiary: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  epmx: TypedContractMethod<[], [string], "view">;

  getAllVestingSchedulesByAddress: TypedContractMethod<
    [holder: AddressLike],
    [IRedeemerStorage.VestingScheduleStructOutput[]],
    "view"
  >;

  getLastVestingScheduleForHolder: TypedContractMethod<
    [holder: AddressLike],
    [IRedeemerStorage.VestingScheduleStructOutput],
    "view"
  >;

  getVestingIdAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getVestingSchedule: TypedContractMethod<
    [vestingScheduleId: BytesLike],
    [IRedeemerStorage.VestingScheduleStructOutput],
    "view"
  >;

  getVestingScheduleByAddressAndIndex: TypedContractMethod<
    [holder: AddressLike, index: BigNumberish],
    [IRedeemerStorage.VestingScheduleStructOutput],
    "view"
  >;

  getVestingSchedulesCount: TypedContractMethod<[], [bigint], "view">;

  getVestingSchedulesCountByBeneficiary: TypedContractMethod<
    [_beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  getVestingSchedulesTotalAmount: TypedContractMethod<[], [bigint], "view">;

  getWithdrawableAmount: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _epmx: AddressLike,
      _pmx: AddressLike,
      _registry: AddressLike,
      _treasury: AddressLike,
      _whiteListingEnabled: boolean,
      _vestingParams: IRedeemerStorage.VestingParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  isBlackListed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isWhiteListed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  pmx: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  release: TypedContractMethod<
    [vestingScheduleId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStatusesToBlackList: TypedContractMethod<
    [_addresses: AddressLike[], _statuses: boolean[]],
    [void],
    "nonpayable"
  >;

  setStatusesToWhiteList: TypedContractMethod<
    [_addresses: AddressLike[], _statuses: boolean[]],
    [void],
    "nonpayable"
  >;

  setVestingParams: TypedContractMethod<
    [_vestingParams: IRedeemerStorage.VestingParamsStruct],
    [void],
    "nonpayable"
  >;

  switchWhiteListingFlag: TypedContractMethod<[], [void], "nonpayable">;

  treasury: TypedContractMethod<[], [string], "view">;

  vestingParams: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        cliff: bigint;
        duration: bigint;
        slicePeriodSeconds: bigint;
        initialUnlockPercentage: bigint;
        redeemDeadline: bigint;
      }
    ],
    "view"
  >;

  withdrawUnclaimed: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeNextVestingScheduleIdForHolder"
  ): TypedContractMethod<[holder: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "computeReleasableAmount"
  ): TypedContractMethod<[vestingScheduleId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "computeVestingScheduleIdForAddressAndIndex"
  ): TypedContractMethod<
    [holder: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createVestingSchedule"
  ): TypedContractMethod<
    [_beneficiary: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "epmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllVestingSchedulesByAddress"
  ): TypedContractMethod<
    [holder: AddressLike],
    [IRedeemerStorage.VestingScheduleStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastVestingScheduleForHolder"
  ): TypedContractMethod<
    [holder: AddressLike],
    [IRedeemerStorage.VestingScheduleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingIdAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedule"
  ): TypedContractMethod<
    [vestingScheduleId: BytesLike],
    [IRedeemerStorage.VestingScheduleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingScheduleByAddressAndIndex"
  ): TypedContractMethod<
    [holder: AddressLike, index: BigNumberish],
    [IRedeemerStorage.VestingScheduleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingSchedulesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedulesCountByBeneficiary"
  ): TypedContractMethod<[_beneficiary: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedulesTotalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawableAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _epmx: AddressLike,
      _pmx: AddressLike,
      _registry: AddressLike,
      _treasury: AddressLike,
      _whiteListingEnabled: boolean,
      _vestingParams: IRedeemerStorage.VestingParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBlackListed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhiteListed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<
    [vestingScheduleId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStatusesToBlackList"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _statuses: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStatusesToWhiteList"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _statuses: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVestingParams"
  ): TypedContractMethod<
    [_vestingParams: IRedeemerStorage.VestingParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "switchWhiteListingFlag"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vestingParams"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        cliff: bigint;
        duration: bigint;
        slicePeriodSeconds: bigint;
        initialUnlockPercentage: bigint;
        redeemDeadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawUnclaimed"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "TokenReleased"
  ): TypedContractEvent<
    TokenReleasedEvent.InputTuple,
    TokenReleasedEvent.OutputTuple,
    TokenReleasedEvent.OutputObject
  >;
  getEvent(
    key: "VestingScheduleCreated"
  ): TypedContractEvent<
    VestingScheduleCreatedEvent.InputTuple,
    VestingScheduleCreatedEvent.OutputTuple,
    VestingScheduleCreatedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "TokenReleased(address,uint256,bytes32)": TypedContractEvent<
      TokenReleasedEvent.InputTuple,
      TokenReleasedEvent.OutputTuple,
      TokenReleasedEvent.OutputObject
    >;
    TokenReleased: TypedContractEvent<
      TokenReleasedEvent.InputTuple,
      TokenReleasedEvent.OutputTuple,
      TokenReleasedEvent.OutputObject
    >;

    "VestingScheduleCreated(address,address,uint256,bytes32)": TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
    VestingScheduleCreated: TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
  };
}
