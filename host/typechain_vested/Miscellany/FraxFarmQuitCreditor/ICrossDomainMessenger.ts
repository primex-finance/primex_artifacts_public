/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICrossDomainMessengerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MESSAGE_VERSION"
      | "MIN_GAS_CALLDATA_OVERHEAD"
      | "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR"
      | "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR"
      | "OTHER_MESSENGER"
      | "RELAY_CALL_OVERHEAD"
      | "RELAY_CONSTANT_OVERHEAD"
      | "RELAY_GAS_CHECK_BUFFER"
      | "RELAY_RESERVED_GAS"
      | "baseGas"
      | "failedMessages"
      | "initialize"
      | "l1CrossDomainMessenger"
      | "messageNonce"
      | "paused"
      | "relayMessage"
      | "sendMessage"
      | "successfulMessages"
      | "version"
      | "xDomainMessageSender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MESSAGE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_CALLDATA_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTHER_MESSENGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAY_CALL_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAY_CONSTANT_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAY_GAS_CHECK_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAY_RESERVED_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseGas",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1CrossDomainMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayMessage",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MESSAGE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_CALLDATA_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OTHER_MESSENGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAY_CALL_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAY_CONSTANT_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAY_GAS_CHECK_BUFFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAY_RESERVED_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "failedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1CrossDomainMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;
}

export interface ICrossDomainMessenger extends BaseContract {
  connect(runner?: ContractRunner | null): ICrossDomainMessenger;
  waitForDeployment(): Promise<this>;

  interface: ICrossDomainMessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MESSAGE_VERSION: TypedContractMethod<[], [bigint], "view">;

  MIN_GAS_CALLDATA_OVERHEAD: TypedContractMethod<[], [bigint], "view">;

  MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR: TypedContractMethod<[], [bigint], "view">;

  OTHER_MESSENGER: TypedContractMethod<[], [string], "view">;

  RELAY_CALL_OVERHEAD: TypedContractMethod<[], [bigint], "view">;

  RELAY_CONSTANT_OVERHEAD: TypedContractMethod<[], [bigint], "view">;

  RELAY_GAS_CHECK_BUFFER: TypedContractMethod<[], [bigint], "view">;

  RELAY_RESERVED_GAS: TypedContractMethod<[], [bigint], "view">;

  baseGas: TypedContractMethod<
    [_message: BytesLike, _minGasLimit: BigNumberish],
    [bigint],
    "view"
  >;

  failedMessages: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  l1CrossDomainMessenger: TypedContractMethod<[], [string], "view">;

  messageNonce: TypedContractMethod<[], [bigint], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  relayMessage: TypedContractMethod<
    [
      _nonce: BigNumberish,
      _sender: AddressLike,
      _target: AddressLike,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [_target: AddressLike, _message: BytesLike, _minGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  successfulMessages: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  version: TypedContractMethod<[], [string], "view">;

  xDomainMessageSender: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MESSAGE_VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_GAS_CALLDATA_OVERHEAD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OTHER_MESSENGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RELAY_CALL_OVERHEAD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAY_CONSTANT_OVERHEAD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAY_GAS_CHECK_BUFFER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAY_RESERVED_GAS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseGas"
  ): TypedContractMethod<
    [_message: BytesLike, _minGasLimit: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "failedMessages"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "l1CrossDomainMessenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messageNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "relayMessage"
  ): TypedContractMethod<
    [
      _nonce: BigNumberish,
      _sender: AddressLike,
      _target: AddressLike,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [_target: AddressLike, _message: BytesLike, _minGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "successfulMessages"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xDomainMessageSender"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
