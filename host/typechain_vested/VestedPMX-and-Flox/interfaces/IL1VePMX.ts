/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IL1VePMX {
  export type LockedBalanceStruct = {
    amount: BigNumberish;
    end: BigNumberish;
    blockTimestamp: BigNumberish;
  };

  export type LockedBalanceStructOutput = [
    amount: bigint,
    end: bigint,
    blockTimestamp: bigint
  ] & { amount: bigint; end: bigint; blockTimestamp: bigint };
}

export interface IL1VePMXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LOCKED_SLOT_INDEX"
      | "acceptOwnership"
      | "adminProofVePMX"
      | "balanceOf"
      | "initialize"
      | "locked"
      | "owner"
      | "pendingOwner"
      | "proofVePMX"
      | "renounceOwnership"
      | "transferOwnership"
      | "vePMXAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LOCKED_SLOT_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminProofVePMX",
    values: [AddressLike[], IL1VePMX.LockedBalanceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "locked", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proofVePMX",
    values: [AddressLike, BigNumberish, BytesLike[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vePMXAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "LOCKED_SLOT_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminProofVePMX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proofVePMX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vePMXAddress",
    data: BytesLike
  ): Result;
}

export interface IL1VePMX extends BaseContract {
  connect(runner?: ContractRunner | null): IL1VePMX;
  waitForDeployment(): Promise<this>;

  interface: IL1VePMXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LOCKED_SLOT_INDEX: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  adminProofVePMX: TypedContractMethod<
    [
      _addresses: AddressLike[],
      _lockedBalances: IL1VePMX.LockedBalanceStruct[]
    ],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [_stateRootOracle: AddressLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  locked: TypedContractMethod<
    [account: AddressLike],
    [IL1VePMX.LockedBalanceStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proofVePMX: TypedContractMethod<
    [
      _address: AddressLike,
      _blockNumber: BigNumberish,
      _accountProof: BytesLike[],
      _storageProof1: BytesLike[],
      _storageProof2: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vePMXAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LOCKED_SLOT_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminProofVePMX"
  ): TypedContractMethod<
    [
      _addresses: AddressLike[],
      _lockedBalances: IL1VePMX.LockedBalanceStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_stateRootOracle: AddressLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<
    [account: AddressLike],
    [IL1VePMX.LockedBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proofVePMX"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _blockNumber: BigNumberish,
      _accountProof: BytesLike[],
      _storageProof1: BytesLike[],
      _storageProof2: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vePMXAddress"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
