/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IvePMXStructs {
  export type LockedBalanceStruct = { amount: BigNumberish; end: BigNumberish };

  export type LockedBalanceStructOutput = [amount: bigint, end: bigint] & {
    amount: bigint;
    end: bigint;
  };

  export type PointStruct = {
    bias: BigNumberish;
    slope: BigNumberish;
    ts: BigNumberish;
    blk: BigNumberish;
    pmxAmt: BigNumberish;
  };

  export type PointStructOutput = [
    bias: bigint,
    slope: bigint,
    ts: bigint,
    blk: bigint,
    pmxAmt: bigint
  ] & { bias: bigint; slope: bigint; ts: bigint; blk: bigint; pmxAmt: bigint };
}

export interface IVestedPMXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAXTIME_INT128"
      | "MAXTIME_UINT256"
      | "MAX_CONTRIBUTOR_LOCKS"
      | "MAX_USER_LOCKS"
      | "MULTIPLIER_UINT256"
      | "VOTE_WEIGHT_MULTIPLIER_INT128"
      | "VOTE_WEIGHT_MULTIPLIER_UINT256"
      | "WEEK_UINT128"
      | "WEEK_UINT256"
      | "acceptTransferOwnership"
      | "activateEmergencyUnlock"
      | "admin"
      | "balanceOf"
      | "balanceOfAllLocksAtBlock"
      | "balanceOfAllLocksAtTime"
      | "balanceOfAt"
      | "balanceOfOneLockAtBlock"
      | "balanceOfOneLockAtTime"
      | "checkpoint"
      | "commitTransferOwnership"
      | "createLock"
      | "decimals"
      | "depositFor"
      | "emergencyUnlockActive"
      | "epoch"
      | "findBlockEpoch"
      | "floxContributors"
      | "futureAdmin"
      | "getLastUserSlope"
      | "increaseAmount"
      | "increaseUnlockTime"
      | "indicesToIds"
      | "isPaused"
      | "locked"
      | "lockedById"
      | "lockedByIndex"
      | "lockedEnd"
      | "name"
      | "nextId"
      | "numLocks"
      | "numberOfFloxContributorCreatedLocks"
      | "pointHistory"
      | "recoverIERC20"
      | "setFloxContributor"
      | "setVePMXUtils"
      | "slopeChanges"
      | "supply"
      | "supplyAt"
      | "symbol"
      | "toggleContractPause"
      | "token"
      | "totalPMXSupply"
      | "totalPMXSupplyAt"
      | "totalSupply()"
      | "totalSupply(uint256)"
      | "totalSupplyAt"
      | "userPointEpoch"
      | "userPointHistory"
      | "userPointHistoryTs"
      | "vePmxUtils"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAXTIME_INT128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXTIME_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONTRIBUTOR_LOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_USER_LOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_INT128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEK_UINT128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEK_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyUnlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAllLocksAtBlock",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAllLocksAtTime",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOneLockAtBlock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOneLockAtTime",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitTransferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnlockActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "findBlockEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floxContributors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "futureAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUserSlope",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUnlockTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indicesToIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedById",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedEnd",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextId", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfFloxContributorCreatedLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pointHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverIERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFloxContributor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVePMXUtils",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slopeChanges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyAt",
    values: [IvePMXStructs.PointStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleContractPause",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPMXSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPMXSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointEpoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointHistory",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointHistoryTs",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vePmxUtils",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAXTIME_INT128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXTIME_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONTRIBUTOR_LOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_USER_LOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTIPLIER_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_INT128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEK_UINT128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEK_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAllLocksAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAllLocksAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOneLockAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOneLockAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnlockActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findBlockEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floxContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUserSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indicesToIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfFloxContributorCreatedLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverIERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFloxContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVePMXUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slopeChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPMXSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPMXSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointHistoryTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vePmxUtils", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IVestedPMX extends BaseContract {
  connect(runner?: ContractRunner | null): IVestedPMX;
  waitForDeployment(): Promise<this>;

  interface: IVestedPMXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAXTIME_INT128: TypedContractMethod<[], [bigint], "view">;

  MAXTIME_UINT256: TypedContractMethod<[], [bigint], "view">;

  MAX_CONTRIBUTOR_LOCKS: TypedContractMethod<[], [bigint], "view">;

  MAX_USER_LOCKS: TypedContractMethod<[], [bigint], "view">;

  MULTIPLIER_UINT256: TypedContractMethod<[], [bigint], "view">;

  VOTE_WEIGHT_MULTIPLIER_INT128: TypedContractMethod<[], [bigint], "view">;

  VOTE_WEIGHT_MULTIPLIER_UINT256: TypedContractMethod<[], [bigint], "view">;

  WEEK_UINT128: TypedContractMethod<[], [bigint], "view">;

  WEEK_UINT256: TypedContractMethod<[], [bigint], "view">;

  acceptTransferOwnership: TypedContractMethod<[], [void], "nonpayable">;

  activateEmergencyUnlock: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[_addr: AddressLike], [bigint], "view">;

  balanceOfAllLocksAtBlock: TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfAllLocksAtTime: TypedContractMethod<
    [_addr: AddressLike, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfAt: TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfOneLockAtBlock: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _block: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfOneLockAtTime: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  checkpoint: TypedContractMethod<[], [void], "nonpayable">;

  commitTransferOwnership: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  createLock: TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _unlockTime: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  depositFor: TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyUnlockActive: TypedContractMethod<[], [boolean], "view">;

  epoch: TypedContractMethod<[], [bigint], "view">;

  findBlockEpoch: TypedContractMethod<
    [_block: BigNumberish, _maxEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  floxContributors: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  futureAdmin: TypedContractMethod<[], [string], "view">;

  getLastUserSlope: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish],
    [bigint],
    "view"
  >;

  increaseAmount: TypedContractMethod<
    [_value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseUnlockTime: TypedContractMethod<
    [_unlockTime: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  indicesToIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  locked: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;

  lockedById: TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [IvePMXStructs.LockedBalanceStructOutput],
    "view"
  >;

  lockedByIndex: TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [IvePMXStructs.LockedBalanceStructOutput],
    "view"
  >;

  lockedEnd: TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  numLocks: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  numberOfFloxContributorCreatedLocks: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  pointHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;

  recoverIERC20: TypedContractMethod<
    [_tokenAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFloxContributor: TypedContractMethod<
    [_floxContributor: AddressLike, _isFloxContributor: boolean],
    [void],
    "nonpayable"
  >;

  setVePMXUtils: TypedContractMethod<
    [_vePmxUtilsAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  slopeChanges: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  supply: TypedContractMethod<[], [bigint], "view">;

  supplyAt: TypedContractMethod<
    [_point: IvePMXStructs.PointStruct, _t: BigNumberish],
    [bigint],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  toggleContractPause: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  totalPMXSupply: TypedContractMethod<[], [bigint], "view">;

  totalPMXSupplyAt: TypedContractMethod<
    [_block: BigNumberish],
    [bigint],
    "view"
  >;

  "totalSupply()": TypedContractMethod<[], [bigint], "view">;

  "totalSupply(uint256)": TypedContractMethod<
    [_timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  totalSupplyAt: TypedContractMethod<[_block: BigNumberish], [bigint], "view">;

  userPointEpoch: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userPointHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;

  userPointHistoryTs: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _idx: BigNumberish],
    [bigint],
    "view"
  >;

  vePmxUtils: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAXTIME_INT128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAXTIME_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CONTRIBUTOR_LOCKS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_USER_LOCKS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MULTIPLIER_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTE_WEIGHT_MULTIPLIER_INT128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTE_WEIGHT_MULTIPLIER_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK_UINT128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptTransferOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateEmergencyUnlock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAllLocksAtBlock"
  ): TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfAllLocksAtTime"
  ): TypedContractMethod<
    [_addr: AddressLike, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfOneLockAtBlock"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _block: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfOneLockAtTime"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitTransferOwnership"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLock"
  ): TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _unlockTime: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyUnlockActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "findBlockEpoch"
  ): TypedContractMethod<
    [_block: BigNumberish, _maxEpoch: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "floxContributors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "futureAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastUserSlope"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAmount"
  ): TypedContractMethod<
    [_value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseUnlockTime"
  ): TypedContractMethod<
    [_unlockTime: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "indicesToIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedById"
  ): TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [IvePMXStructs.LockedBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedByIndex"
  ): TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [IvePMXStructs.LockedBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedEnd"
  ): TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numLocks"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfFloxContributorCreatedLocks"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoverIERC20"
  ): TypedContractMethod<
    [_tokenAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFloxContributor"
  ): TypedContractMethod<
    [_floxContributor: AddressLike, _isFloxContributor: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVePMXUtils"
  ): TypedContractMethod<[_vePmxUtilsAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slopeChanges"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyAt"
  ): TypedContractMethod<
    [_point: IvePMXStructs.PointStruct, _t: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleContractPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalPMXSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPMXSupplyAt"
  ): TypedContractMethod<[_block: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply(uint256)"
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_block: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPointEpoch"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userPointHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userPointHistoryTs"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _idx: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "vePmxUtils"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_lockIndex: BigNumberish], [void], "nonpayable">;

  filters: {};
}
