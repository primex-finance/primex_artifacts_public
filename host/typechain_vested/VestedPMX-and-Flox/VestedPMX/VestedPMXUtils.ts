/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IvePMXStructs {
  export type LockedBalanceExtendedStruct = {
    id: BigNumberish;
    index: BigNumberish;
    amount: BigNumberish;
    end: BigNumberish;
  };

  export type LockedBalanceExtendedStructOutput = [
    id: bigint,
    index: bigint,
    amount: bigint,
    end: bigint
  ] & { id: bigint; index: bigint; amount: bigint; end: bigint };

  export type DetailedUserLockInfoStruct = {
    user: AddressLike;
    numberOfLocks: BigNumberish;
    allLocks: IvePMXStructs.LockedBalanceExtendedStruct[];
    activeLocks: IvePMXStructs.LockedBalanceExtendedStruct[];
    expiredLocks: IvePMXStructs.LockedBalanceExtendedStruct[];
    totalPmx: [BigNumberish, BigNumberish, BigNumberish];
  };

  export type DetailedUserLockInfoStructOutput = [
    user: string,
    numberOfLocks: bigint,
    allLocks: IvePMXStructs.LockedBalanceExtendedStructOutput[],
    activeLocks: IvePMXStructs.LockedBalanceExtendedStructOutput[],
    expiredLocks: IvePMXStructs.LockedBalanceExtendedStructOutput[],
    totalPmx: [bigint, bigint, bigint]
  ] & {
    user: string;
    numberOfLocks: bigint;
    allLocks: IvePMXStructs.LockedBalanceExtendedStructOutput[];
    activeLocks: IvePMXStructs.LockedBalanceExtendedStructOutput[];
    expiredLocks: IvePMXStructs.LockedBalanceExtendedStructOutput[];
    totalPmx: [bigint, bigint, bigint];
  };

  export type LockedBalanceStruct = { amount: BigNumberish; end: BigNumberish };

  export type LockedBalanceStructOutput = [amount: bigint, end: bigint] & {
    amount: bigint;
    end: bigint;
  };

  export type LongestLockStruct = {
    lock: IvePMXStructs.LockedBalanceStruct;
    lockIndex: BigNumberish;
    user: AddressLike;
  };

  export type LongestLockStructOutput = [
    lock: IvePMXStructs.LockedBalanceStructOutput,
    lockIndex: bigint,
    user: string
  ] & {
    lock: IvePMXStructs.LockedBalanceStructOutput;
    lockIndex: bigint;
    user: string;
  };
}

export interface VestedPMXUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCrudeExpectedVePMXMultiLock"
      | "getCrudeExpectedVePMXOneLock"
      | "getCrudeExpectedVePMXUser"
      | "getDetailedUserLockInfo"
      | "getDetailedUserLockInfoBulk"
      | "getLongestLock"
      | "getLongestLockBulk"
      | "token"
      | "vePMX"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCrudeExpectedVePMXMultiLock",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrudeExpectedVePMXOneLock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrudeExpectedVePMXUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedUserLockInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedUserLockInfoBulk",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLongestLock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLongestLockBulk",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "vePMX", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getCrudeExpectedVePMXMultiLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrudeExpectedVePMXOneLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrudeExpectedVePMXUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedUserLockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedUserLockInfoBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongestLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongestLockBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vePMX", data: BytesLike): Result;
}

export interface VestedPMXUtils extends BaseContract {
  connect(runner?: ContractRunner | null): VestedPMXUtils;
  waitForDeployment(): Promise<this>;

  interface: VestedPMXUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCrudeExpectedVePMXMultiLock: TypedContractMethod<
    [_pmxAmounts: BigNumberish[], _lockSecsU128: BigNumberish[]],
    [bigint],
    "view"
  >;

  getCrudeExpectedVePMXOneLock: TypedContractMethod<
    [_pmxAmount: BigNumberish, _lockSecsU128: BigNumberish],
    [bigint],
    "view"
  >;

  getCrudeExpectedVePMXUser: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getDetailedUserLockInfo: TypedContractMethod<
    [_user: AddressLike],
    [IvePMXStructs.DetailedUserLockInfoStructOutput],
    "view"
  >;

  getDetailedUserLockInfoBulk: TypedContractMethod<
    [_users: AddressLike[]],
    [IvePMXStructs.DetailedUserLockInfoStructOutput[]],
    "view"
  >;

  getLongestLock: TypedContractMethod<
    [user: AddressLike],
    [[IvePMXStructs.LockedBalanceStructOutput, bigint]],
    "view"
  >;

  getLongestLockBulk: TypedContractMethod<
    [users: AddressLike[]],
    [IvePMXStructs.LongestLockStructOutput[]],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  vePMX: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCrudeExpectedVePMXMultiLock"
  ): TypedContractMethod<
    [_pmxAmounts: BigNumberish[], _lockSecsU128: BigNumberish[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCrudeExpectedVePMXOneLock"
  ): TypedContractMethod<
    [_pmxAmount: BigNumberish, _lockSecsU128: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCrudeExpectedVePMXUser"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDetailedUserLockInfo"
  ): TypedContractMethod<
    [_user: AddressLike],
    [IvePMXStructs.DetailedUserLockInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDetailedUserLockInfoBulk"
  ): TypedContractMethod<
    [_users: AddressLike[]],
    [IvePMXStructs.DetailedUserLockInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLongestLock"
  ): TypedContractMethod<
    [user: AddressLike],
    [[IvePMXStructs.LockedBalanceStructOutput, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLongestLockBulk"
  ): TypedContractMethod<
    [users: AddressLike[]],
    [IvePMXStructs.LongestLockStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vePMX"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
