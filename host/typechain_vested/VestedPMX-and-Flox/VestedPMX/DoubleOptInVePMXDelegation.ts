/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IvePMXStructs {
  export type LockedBalanceExtendedV2Struct = {
    id: BigNumberish;
    index: BigNumberish;
    amount: BigNumberish;
    end: BigNumberish;
    location: AddressLike;
    estimatedCurrLockVePMX: BigNumberish;
  };

  export type LockedBalanceExtendedV2StructOutput = [
    id: bigint,
    index: bigint,
    amount: bigint,
    end: bigint,
    location: string,
    estimatedCurrLockVePMX: bigint
  ] & {
    id: bigint;
    index: bigint;
    amount: bigint;
    end: bigint;
    location: string;
    estimatedCurrLockVePMX: bigint;
  };
}

export interface DoubleOptInVePMXDelegationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptDelegation"
      | "acceptOwnership"
      | "aggregator"
      | "balanceOf"
      | "decimals"
      | "delegateeFor"
      | "delegationInfo"
      | "delegatorFor"
      | "getAllCurrActiveLocks"
      | "getAllExpiredLocks"
      | "initialize"
      | "messenger"
      | "name"
      | "nominateDelegatee"
      | "nominateDelegateeCrossChain"
      | "nominateNewOwner"
      | "nominatedDelegatee"
      | "nominatedOwner"
      | "owner"
      | "rescindDelegationAsDelegatee"
      | "rescindDelegationAsDelegator"
      | "rescindDelegationAsDelegatorCrossChain"
      | "setVepmxAggregator"
      | "symbol"
      | "ttlCombinedVePMX"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegateeNominated"
      | "DelegationRescinded"
      | "NominationAccepted"
      | "OwnerChanged"
      | "OwnerNominated"
      | "VePmxAggregatorChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptDelegation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateeFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCurrActiveLocks",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllExpiredLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominateDelegatee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateDelegateeCrossChain",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedDelegatee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rescindDelegationAsDelegatee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescindDelegationAsDelegator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescindDelegationAsDelegatorCrossChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVepmxAggregator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ttlCombinedVePMX",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateeFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCurrActiveLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateDelegatee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateDelegateeCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedDelegatee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescindDelegationAsDelegatee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescindDelegationAsDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescindDelegationAsDelegatorCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVepmxAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ttlCombinedVePMX",
    data: BytesLike
  ): Result;
}

export namespace DelegateeNominatedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    nominatedDelegatee: AddressLike
  ];
  export type OutputTuple = [delegator: string, nominatedDelegatee: string];
  export interface OutputObject {
    delegator: string;
    nominatedDelegatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationRescindedEvent {
  export type InputTuple = [
    sender: AddressLike,
    delegator: AddressLike,
    delegatee: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    delegator: string,
    delegatee: string
  ];
  export interface OutputObject {
    sender: string;
    delegator: string;
    delegatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NominationAcceptedEvent {
  export type InputTuple = [delegator: AddressLike, delegatee: AddressLike];
  export type OutputTuple = [delegator: string, delegatee: string];
  export interface OutputObject {
    delegator: string;
    delegatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VePmxAggregatorChangedEvent {
  export type InputTuple = [vepmxAggregator: AddressLike];
  export type OutputTuple = [vepmxAggregator: string];
  export interface OutputObject {
    vepmxAggregator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DoubleOptInVePMXDelegation extends BaseContract {
  connect(runner?: ContractRunner | null): DoubleOptInVePMXDelegation;
  waitForDeployment(): Promise<this>;

  interface: DoubleOptInVePMXDelegationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptDelegation: TypedContractMethod<
    [_delegator: AddressLike],
    [void],
    "nonpayable"
  >;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  aggregator: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[_addr: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegateeFor: TypedContractMethod<[delegator: AddressLike], [string], "view">;

  delegationInfo: TypedContractMethod<
    [_addr: AddressLike],
    [
      [bigint, string, string] & {
        _addressType: bigint;
        _delegator: string;
        _delegatee: string;
      }
    ],
    "view"
  >;

  delegatorFor: TypedContractMethod<[delegatee: AddressLike], [string], "view">;

  getAllCurrActiveLocks: TypedContractMethod<
    [_account: AddressLike, _estimateCrudeVePMX: boolean],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;

  getAllExpiredLocks: TypedContractMethod<
    [_account: AddressLike],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [_owner: AddressLike, _aggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  messenger: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nominateDelegatee: TypedContractMethod<
    [_delegatee: AddressLike],
    [void],
    "nonpayable"
  >;

  nominateDelegateeCrossChain: TypedContractMethod<
    [_delegatee: AddressLike],
    [void],
    "nonpayable"
  >;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedDelegatee: TypedContractMethod<
    [delegator: AddressLike],
    [string],
    "view"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rescindDelegationAsDelegatee: TypedContractMethod<[], [void], "nonpayable">;

  rescindDelegationAsDelegator: TypedContractMethod<[], [void], "nonpayable">;

  rescindDelegationAsDelegatorCrossChain: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  setVepmxAggregator: TypedContractMethod<
    [_vepmxAggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  ttlCombinedVePMX: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptDelegation"
  ): TypedContractMethod<[_delegator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "aggregator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegateeFor"
  ): TypedContractMethod<[delegator: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "delegationInfo"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [
      [bigint, string, string] & {
        _addressType: bigint;
        _delegator: string;
        _delegatee: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegatorFor"
  ): TypedContractMethod<[delegatee: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAllCurrActiveLocks"
  ): TypedContractMethod<
    [_account: AddressLike, _estimateCrudeVePMX: boolean],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllExpiredLocks"
  ): TypedContractMethod<
    [_account: AddressLike],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_owner: AddressLike, _aggregator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "messenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nominateDelegatee"
  ): TypedContractMethod<[_delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominateDelegateeCrossChain"
  ): TypedContractMethod<[_delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedDelegatee"
  ): TypedContractMethod<[delegator: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rescindDelegationAsDelegatee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescindDelegationAsDelegator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescindDelegationAsDelegatorCrossChain"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVepmxAggregator"
  ): TypedContractMethod<[_vepmxAggregator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ttlCombinedVePMX"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getEvent(
    key: "DelegateeNominated"
  ): TypedContractEvent<
    DelegateeNominatedEvent.InputTuple,
    DelegateeNominatedEvent.OutputTuple,
    DelegateeNominatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationRescinded"
  ): TypedContractEvent<
    DelegationRescindedEvent.InputTuple,
    DelegationRescindedEvent.OutputTuple,
    DelegationRescindedEvent.OutputObject
  >;
  getEvent(
    key: "NominationAccepted"
  ): TypedContractEvent<
    NominationAcceptedEvent.InputTuple,
    NominationAcceptedEvent.OutputTuple,
    NominationAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;
  getEvent(
    key: "VePmxAggregatorChanged"
  ): TypedContractEvent<
    VePmxAggregatorChangedEvent.InputTuple,
    VePmxAggregatorChangedEvent.OutputTuple,
    VePmxAggregatorChangedEvent.OutputObject
  >;

  filters: {
    "DelegateeNominated(address,address)": TypedContractEvent<
      DelegateeNominatedEvent.InputTuple,
      DelegateeNominatedEvent.OutputTuple,
      DelegateeNominatedEvent.OutputObject
    >;
    DelegateeNominated: TypedContractEvent<
      DelegateeNominatedEvent.InputTuple,
      DelegateeNominatedEvent.OutputTuple,
      DelegateeNominatedEvent.OutputObject
    >;

    "DelegationRescinded(address,address,address)": TypedContractEvent<
      DelegationRescindedEvent.InputTuple,
      DelegationRescindedEvent.OutputTuple,
      DelegationRescindedEvent.OutputObject
    >;
    DelegationRescinded: TypedContractEvent<
      DelegationRescindedEvent.InputTuple,
      DelegationRescindedEvent.OutputTuple,
      DelegationRescindedEvent.OutputObject
    >;

    "NominationAccepted(address,address)": TypedContractEvent<
      NominationAcceptedEvent.InputTuple,
      NominationAcceptedEvent.OutputTuple,
      NominationAcceptedEvent.OutputObject
    >;
    NominationAccepted: TypedContractEvent<
      NominationAcceptedEvent.InputTuple,
      NominationAcceptedEvent.OutputTuple,
      NominationAcceptedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;

    "VePmxAggregatorChanged(address)": TypedContractEvent<
      VePmxAggregatorChangedEvent.InputTuple,
      VePmxAggregatorChangedEvent.OutputTuple,
      VePmxAggregatorChangedEvent.OutputObject
    >;
    VePmxAggregatorChanged: TypedContractEvent<
      VePmxAggregatorChangedEvent.InputTuple,
      VePmxAggregatorChangedEvent.OutputTuple,
      VePmxAggregatorChangedEvent.OutputObject
    >;
  };
}
