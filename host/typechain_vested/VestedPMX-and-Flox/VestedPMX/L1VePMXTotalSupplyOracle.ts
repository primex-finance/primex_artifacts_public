/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface L1VePMXTotalSupplyOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "blkWhenTotalSupplyRead"
      | "botAddress"
      | "lastBotUpdate"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "owner"
      | "setBot"
      | "totalSupply"
      | "totalSupplyExtra"
      | "totalSupplyStored"
      | "tsWhenTotalSupplyRead"
      | "updateInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "InfoUpdated" | "OwnerChanged" | "OwnerNominated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blkWhenTotalSupplyRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "botAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBotUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBot", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyExtra",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tsWhenTotalSupplyRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateInfo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blkWhenTotalSupplyRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "botAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBotUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyExtra",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tsWhenTotalSupplyRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateInfo", data: BytesLike): Result;
}

export namespace InfoUpdatedEvent {
  export type InputTuple = [
    totalSupply: BigNumberish,
    blk: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [totalSupply: bigint, blk: bigint, ts: bigint];
  export interface OutputObject {
    totalSupply: bigint;
    blk: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface L1VePMXTotalSupplyOracle extends BaseContract {
  connect(runner?: ContractRunner | null): L1VePMXTotalSupplyOracle;
  waitForDeployment(): Promise<this>;

  interface: L1VePMXTotalSupplyOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  blkWhenTotalSupplyRead: TypedContractMethod<[], [bigint], "view">;

  botAddress: TypedContractMethod<[], [string], "view">;

  lastBotUpdate: TypedContractMethod<[], [bigint], "view">;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setBot: TypedContractMethod<[_newBot: AddressLike], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyExtra: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalSupply: bigint;
        _blk: bigint;
        _ts: bigint;
      }
    ],
    "view"
  >;

  totalSupplyStored: TypedContractMethod<[], [bigint], "view">;

  tsWhenTotalSupplyRead: TypedContractMethod<[], [bigint], "view">;

  updateInfo: TypedContractMethod<
    [_totalSupply: BigNumberish, _blk: BigNumberish, _ts: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "blkWhenTotalSupplyRead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "botAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastBotUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBot"
  ): TypedContractMethod<[_newBot: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyExtra"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalSupply: bigint;
        _blk: bigint;
        _ts: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupplyStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tsWhenTotalSupplyRead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateInfo"
  ): TypedContractMethod<
    [_totalSupply: BigNumberish, _blk: BigNumberish, _ts: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "InfoUpdated"
  ): TypedContractEvent<
    InfoUpdatedEvent.InputTuple,
    InfoUpdatedEvent.OutputTuple,
    InfoUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;

  filters: {
    "InfoUpdated(uint256,uint128,uint128)": TypedContractEvent<
      InfoUpdatedEvent.InputTuple,
      InfoUpdatedEvent.OutputTuple,
      InfoUpdatedEvent.OutputObject
    >;
    InfoUpdated: TypedContractEvent<
      InfoUpdatedEvent.InputTuple,
      InfoUpdatedEvent.OutputTuple,
      InfoUpdatedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
  };
}
