/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IvePMXStructs {
  export type PointStruct = {
    bias: BigNumberish;
    slope: BigNumberish;
    ts: BigNumberish;
    blk: BigNumberish;
    pmxAmt: BigNumberish;
  };

  export type PointStructOutput = [
    bias: bigint,
    slope: bigint,
    ts: bigint,
    blk: bigint,
    pmxAmt: bigint
  ] & { bias: bigint; slope: bigint; ts: bigint; blk: bigint; pmxAmt: bigint };

  export type LockedBalanceExtendedStruct = {
    id: BigNumberish;
    index: BigNumberish;
    amount: BigNumberish;
    end: BigNumberish;
  };

  export type LockedBalanceExtendedStructOutput = [
    id: bigint,
    index: bigint,
    amount: bigint,
    end: bigint
  ] & { id: bigint; index: bigint; amount: bigint; end: bigint };
}

export interface VestedPMXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAXTIME_INT128"
      | "MAXTIME_UINT256"
      | "MAX_CONTRIBUTOR_LOCKS"
      | "MAX_USER_LOCKS"
      | "MIN_LOCK_AMOUNT"
      | "MULTIPLIER_UINT256"
      | "VOTE_WEIGHT_MULTIPLIER_INT128"
      | "VOTE_WEIGHT_MULTIPLIER_UINT256"
      | "WEEK_UINT128"
      | "WEEK_UINT256"
      | "acceptTransferOwnership"
      | "activateEmergencyUnlock"
      | "admin"
      | "balanceOf"
      | "balanceOfAllLocksAtBlock"
      | "balanceOfAllLocksAtTime"
      | "balanceOfAt"
      | "balanceOfLockedPmx"
      | "balanceOfOneLockAtBlock"
      | "balanceOfOneLockAtTime"
      | "checkpoint"
      | "commitTransferOwnership"
      | "createLock"
      | "decimals"
      | "depositFor"
      | "emergencyUnlockActive"
      | "epoch"
      | "findBlockEpoch"
      | "findUserTimestampEpoch"
      | "floxContributors"
      | "futureAdmin"
      | "getCreateLockTsBounds"
      | "getIncreaseUnlockTimeTsBounds"
      | "getLastGlobalPoint"
      | "getLastUserPoint"
      | "getLastUserSlope"
      | "getLockIndexById"
      | "getUserPointAtEpoch"
      | "increaseAmount"
      | "increaseUnlockTime"
      | "indicesToIds"
      | "initialize"
      | "isLockCreatedByFloxContributor"
      | "isPaused"
      | "locked"
      | "lockedById"
      | "lockedByIdExtended"
      | "lockedByIndex"
      | "lockedEnd"
      | "name"
      | "nextId"
      | "numLocks"
      | "numberOfFloxContributorCreatedLocks"
      | "numberOfUserCreatedLocks"
      | "pointHistory"
      | "recoverIERC20"
      | "setFloxContributor"
      | "setVePMXUtils"
      | "slopeChanges"
      | "supply"
      | "supplyAt"
      | "symbol"
      | "toggleContractPause"
      | "token"
      | "totalPMXSupply"
      | "totalPMXSupplyAt"
      | "totalSupply()"
      | "totalSupply(uint256)"
      | "totalSupplyAt"
      | "userPointEpoch"
      | "userPointHistory"
      | "userPointHistoryTs"
      | "vePmxUtils"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApplyOwnership"
      | "CommitOwnership"
      | "ContractPause"
      | "Deposit"
      | "EmergencyUnlockActivated"
      | "FloxContributorUpdate"
      | "Supply"
      | "VePmxUtilsContractUpdated"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAXTIME_INT128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXTIME_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONTRIBUTOR_LOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_USER_LOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LOCK_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_INT128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEK_UINT128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEK_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyUnlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAllLocksAtBlock",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAllLocksAtTime",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfLockedPmx",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOneLockAtBlock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOneLockAtTime",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitTransferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnlockActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "findBlockEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findUserTimestampEpoch",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floxContributors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "futureAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateLockTsBounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreaseUnlockTimeTsBounds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastGlobalPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUserPoint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUserSlope",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockIndexById",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPointAtEpoch",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUnlockTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indicesToIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLockCreatedByFloxContributor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedById",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedByIdExtended",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedEnd",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextId", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfFloxContributorCreatedLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfUserCreatedLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pointHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverIERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFloxContributor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVePMXUtils",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slopeChanges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyAt",
    values: [IvePMXStructs.PointStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleContractPause",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPMXSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPMXSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointEpoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointHistory",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointHistoryTs",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vePmxUtils",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAXTIME_INT128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXTIME_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONTRIBUTOR_LOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_USER_LOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOCK_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTIPLIER_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_INT128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_WEIGHT_MULTIPLIER_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEK_UINT128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEK_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAllLocksAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAllLocksAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfLockedPmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOneLockAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOneLockAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnlockActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findBlockEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findUserTimestampEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floxContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateLockTsBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreaseUnlockTimeTsBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastGlobalPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUserPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUserSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockIndexById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPointAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indicesToIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLockCreatedByFloxContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedByIdExtended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfFloxContributorCreatedLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfUserCreatedLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverIERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFloxContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVePMXUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slopeChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPMXSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPMXSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointHistoryTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vePmxUtils", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApplyOwnershipEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitOwnershipEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractPauseEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    staker: AddressLike,
    payor: AddressLike,
    endingTimestamp: BigNumberish,
    value: BigNumberish,
    depositType: BigNumberish,
    txTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    staker: string,
    payor: string,
    endingTimestamp: bigint,
    value: bigint,
    depositType: bigint,
    txTimestamp: bigint
  ];
  export interface OutputObject {
    staker: string;
    payor: string;
    endingTimestamp: bigint;
    value: bigint;
    depositType: bigint;
    txTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyUnlockActivatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FloxContributorUpdateEvent {
  export type InputTuple = [contributor: AddressLike, isContributor: boolean];
  export type OutputTuple = [contributor: string, isContributor: boolean];
  export interface OutputObject {
    contributor: string;
    isContributor: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [prevSupply: BigNumberish, supply: BigNumberish];
  export type OutputTuple = [prevSupply: bigint, supply: bigint];
  export interface OutputObject {
    prevSupply: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VePmxUtilsContractUpdatedEvent {
  export type InputTuple = [vePmxUtilsAddr: AddressLike];
  export type OutputTuple = [vePmxUtilsAddr: string];
  export interface OutputObject {
    vePmxUtilsAddr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    staker: AddressLike,
    recipient: AddressLike,
    value: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    staker: string,
    recipient: string,
    value: bigint,
    ts: bigint
  ];
  export interface OutputObject {
    staker: string;
    recipient: string;
    value: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VestedPMX extends BaseContract {
  connect(runner?: ContractRunner | null): VestedPMX;
  waitForDeployment(): Promise<this>;

  interface: VestedPMXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAXTIME_INT128: TypedContractMethod<[], [bigint], "view">;

  MAXTIME_UINT256: TypedContractMethod<[], [bigint], "view">;

  MAX_CONTRIBUTOR_LOCKS: TypedContractMethod<[], [bigint], "view">;

  MAX_USER_LOCKS: TypedContractMethod<[], [bigint], "view">;

  MIN_LOCK_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MULTIPLIER_UINT256: TypedContractMethod<[], [bigint], "view">;

  VOTE_WEIGHT_MULTIPLIER_INT128: TypedContractMethod<[], [bigint], "view">;

  VOTE_WEIGHT_MULTIPLIER_UINT256: TypedContractMethod<[], [bigint], "view">;

  WEEK_UINT128: TypedContractMethod<[], [bigint], "view">;

  WEEK_UINT256: TypedContractMethod<[], [bigint], "view">;

  acceptTransferOwnership: TypedContractMethod<[], [void], "nonpayable">;

  activateEmergencyUnlock: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[_addr: AddressLike], [bigint], "view">;

  balanceOfAllLocksAtBlock: TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfAllLocksAtTime: TypedContractMethod<
    [_addr: AddressLike, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfAt: TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfLockedPmx: TypedContractMethod<
    [_addr: AddressLike],
    [bigint],
    "view"
  >;

  balanceOfOneLockAtBlock: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _block: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfOneLockAtTime: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  checkpoint: TypedContractMethod<[], [void], "nonpayable">;

  commitTransferOwnership: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  createLock: TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _unlockTime: BigNumberish],
    [[bigint, bigint] & { _index: bigint; _newLockId: bigint }],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  depositFor: TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyUnlockActive: TypedContractMethod<[], [boolean], "view">;

  epoch: TypedContractMethod<[], [bigint], "view">;

  findBlockEpoch: TypedContractMethod<
    [_block: BigNumberish, _maxEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  findUserTimestampEpoch: TypedContractMethod<
    [_addr: AddressLike, _lockId: BigNumberish, _ts: BigNumberish],
    [bigint],
    "view"
  >;

  floxContributors: TypedContractMethod<
    [contributor: AddressLike],
    [boolean],
    "view"
  >;

  futureAdmin: TypedContractMethod<[], [string], "view">;

  getCreateLockTsBounds: TypedContractMethod<
    [],
    [[bigint, bigint] & { _earliestLockEnd: bigint; _latestLockEnd: bigint }],
    "view"
  >;

  getIncreaseUnlockTimeTsBounds: TypedContractMethod<
    [_user: AddressLike, _id: BigNumberish],
    [[bigint, bigint] & { _earliestLockEnd: bigint; _latestLockEnd: bigint }],
    "view"
  >;

  getLastGlobalPoint: TypedContractMethod<
    [],
    [IvePMXStructs.PointStructOutput],
    "view"
  >;

  getLastUserPoint: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish],
    [IvePMXStructs.PointStructOutput],
    "view"
  >;

  getLastUserSlope: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish],
    [bigint],
    "view"
  >;

  getLockIndexById: TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [bigint],
    "view"
  >;

  getUserPointAtEpoch: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _uepoch: BigNumberish],
    [IvePMXStructs.PointStructOutput],
    "view"
  >;

  increaseAmount: TypedContractMethod<
    [_value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseUnlockTime: TypedContractMethod<
    [_unlockTime: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  indicesToIds: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _admin: AddressLike,
      _tokenAddr: AddressLike,
      _name: string,
      _symbol: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;

  isLockCreatedByFloxContributor: TypedContractMethod<
    [user: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  locked: TypedContractMethod<
    [user: AddressLike, id: BigNumberish],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;

  lockedById: TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [[bigint, bigint] & { _amount: bigint; _end: bigint }],
    "view"
  >;

  lockedByIdExtended: TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [IvePMXStructs.LockedBalanceExtendedStructOutput],
    "view"
  >;

  lockedByIndex: TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [[bigint, bigint] & { _amount: bigint; _end: bigint }],
    "view"
  >;

  lockedEnd: TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextId: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  numLocks: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  numberOfFloxContributorCreatedLocks: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  numberOfUserCreatedLocks: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  pointHistory: TypedContractMethod<
    [epoch: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;

  recoverIERC20: TypedContractMethod<
    [_tokenAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFloxContributor: TypedContractMethod<
    [_floxContributor: AddressLike, _isFloxContributor: boolean],
    [void],
    "nonpayable"
  >;

  setVePMXUtils: TypedContractMethod<
    [_vePmxUtilsAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  slopeChanges: TypedContractMethod<[time: BigNumberish], [bigint], "view">;

  supply: TypedContractMethod<[], [bigint], "view">;

  supplyAt: TypedContractMethod<
    [_point: IvePMXStructs.PointStruct, _t: BigNumberish],
    [bigint],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  toggleContractPause: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  totalPMXSupply: TypedContractMethod<[], [bigint], "view">;

  totalPMXSupplyAt: TypedContractMethod<
    [_block: BigNumberish],
    [bigint],
    "view"
  >;

  "totalSupply()": TypedContractMethod<[], [bigint], "view">;

  "totalSupply(uint256)": TypedContractMethod<
    [_timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  totalSupplyAt: TypedContractMethod<[_block: BigNumberish], [bigint], "view">;

  userPointEpoch: TypedContractMethod<
    [user: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  userPointHistory: TypedContractMethod<
    [user: AddressLike, id: BigNumberish, epoch: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;

  userPointHistoryTs: TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _idx: BigNumberish],
    [bigint],
    "view"
  >;

  vePmxUtils: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_lockIndex: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAXTIME_INT128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAXTIME_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CONTRIBUTOR_LOCKS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_USER_LOCKS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_LOCK_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MULTIPLIER_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTE_WEIGHT_MULTIPLIER_INT128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTE_WEIGHT_MULTIPLIER_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK_UINT128"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK_UINT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptTransferOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateEmergencyUnlock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAllLocksAtBlock"
  ): TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfAllLocksAtTime"
  ): TypedContractMethod<
    [_addr: AddressLike, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [_addr: AddressLike, _block: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfLockedPmx"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfOneLockAtBlock"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _block: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfOneLockAtTime"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitTransferOwnership"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLock"
  ): TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _unlockTime: BigNumberish],
    [[bigint, bigint] & { _index: bigint; _newLockId: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyUnlockActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "findBlockEpoch"
  ): TypedContractMethod<
    [_block: BigNumberish, _maxEpoch: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "findUserTimestampEpoch"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockId: BigNumberish, _ts: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "floxContributors"
  ): TypedContractMethod<[contributor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "futureAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCreateLockTsBounds"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _earliestLockEnd: bigint; _latestLockEnd: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIncreaseUnlockTimeTsBounds"
  ): TypedContractMethod<
    [_user: AddressLike, _id: BigNumberish],
    [[bigint, bigint] & { _earliestLockEnd: bigint; _latestLockEnd: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastGlobalPoint"
  ): TypedContractMethod<[], [IvePMXStructs.PointStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLastUserPoint"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish],
    [IvePMXStructs.PointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastUserSlope"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLockIndexById"
  ): TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPointAtEpoch"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _uepoch: BigNumberish],
    [IvePMXStructs.PointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAmount"
  ): TypedContractMethod<
    [_value: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseUnlockTime"
  ): TypedContractMethod<
    [_unlockTime: BigNumberish, _lockIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "indicesToIds"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _admin: AddressLike,
      _tokenAddr: AddressLike,
      _name: string,
      _symbol: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isLockCreatedByFloxContributor"
  ): TypedContractMethod<
    [user: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<
    [user: AddressLike, id: BigNumberish],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedById"
  ): TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [[bigint, bigint] & { _amount: bigint; _end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedByIdExtended"
  ): TypedContractMethod<
    [_addr: AddressLike, _id: BigNumberish],
    [IvePMXStructs.LockedBalanceExtendedStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedByIndex"
  ): TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [[bigint, bigint] & { _amount: bigint; _end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedEnd"
  ): TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numLocks"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfFloxContributorCreatedLocks"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfUserCreatedLocks"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointHistory"
  ): TypedContractMethod<
    [epoch: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoverIERC20"
  ): TypedContractMethod<
    [_tokenAddr: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFloxContributor"
  ): TypedContractMethod<
    [_floxContributor: AddressLike, _isFloxContributor: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVePMXUtils"
  ): TypedContractMethod<[_vePmxUtilsAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slopeChanges"
  ): TypedContractMethod<[time: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyAt"
  ): TypedContractMethod<
    [_point: IvePMXStructs.PointStruct, _t: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleContractPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalPMXSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPMXSupplyAt"
  ): TypedContractMethod<[_block: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply(uint256)"
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_block: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPointEpoch"
  ): TypedContractMethod<
    [user: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userPointHistory"
  ): TypedContractMethod<
    [user: AddressLike, id: BigNumberish, epoch: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
        pmxAmt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userPointHistoryTs"
  ): TypedContractMethod<
    [_addr: AddressLike, _lockIndex: BigNumberish, _idx: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "vePmxUtils"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_lockIndex: BigNumberish], [bigint], "nonpayable">;

  getEvent(
    key: "ApplyOwnership"
  ): TypedContractEvent<
    ApplyOwnershipEvent.InputTuple,
    ApplyOwnershipEvent.OutputTuple,
    ApplyOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "CommitOwnership"
  ): TypedContractEvent<
    CommitOwnershipEvent.InputTuple,
    CommitOwnershipEvent.OutputTuple,
    CommitOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "ContractPause"
  ): TypedContractEvent<
    ContractPauseEvent.InputTuple,
    ContractPauseEvent.OutputTuple,
    ContractPauseEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyUnlockActivated"
  ): TypedContractEvent<
    EmergencyUnlockActivatedEvent.InputTuple,
    EmergencyUnlockActivatedEvent.OutputTuple,
    EmergencyUnlockActivatedEvent.OutputObject
  >;
  getEvent(
    key: "FloxContributorUpdate"
  ): TypedContractEvent<
    FloxContributorUpdateEvent.InputTuple,
    FloxContributorUpdateEvent.OutputTuple,
    FloxContributorUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;
  getEvent(
    key: "VePmxUtilsContractUpdated"
  ): TypedContractEvent<
    VePmxUtilsContractUpdatedEvent.InputTuple,
    VePmxUtilsContractUpdatedEvent.OutputTuple,
    VePmxUtilsContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ApplyOwnership(address)": TypedContractEvent<
      ApplyOwnershipEvent.InputTuple,
      ApplyOwnershipEvent.OutputTuple,
      ApplyOwnershipEvent.OutputObject
    >;
    ApplyOwnership: TypedContractEvent<
      ApplyOwnershipEvent.InputTuple,
      ApplyOwnershipEvent.OutputTuple,
      ApplyOwnershipEvent.OutputObject
    >;

    "CommitOwnership(address)": TypedContractEvent<
      CommitOwnershipEvent.InputTuple,
      CommitOwnershipEvent.OutputTuple,
      CommitOwnershipEvent.OutputObject
    >;
    CommitOwnership: TypedContractEvent<
      CommitOwnershipEvent.InputTuple,
      CommitOwnershipEvent.OutputTuple,
      CommitOwnershipEvent.OutputObject
    >;

    "ContractPause(bool)": TypedContractEvent<
      ContractPauseEvent.InputTuple,
      ContractPauseEvent.OutputTuple,
      ContractPauseEvent.OutputObject
    >;
    ContractPause: TypedContractEvent<
      ContractPauseEvent.InputTuple,
      ContractPauseEvent.OutputTuple,
      ContractPauseEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256,uint128,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EmergencyUnlockActivated()": TypedContractEvent<
      EmergencyUnlockActivatedEvent.InputTuple,
      EmergencyUnlockActivatedEvent.OutputTuple,
      EmergencyUnlockActivatedEvent.OutputObject
    >;
    EmergencyUnlockActivated: TypedContractEvent<
      EmergencyUnlockActivatedEvent.InputTuple,
      EmergencyUnlockActivatedEvent.OutputTuple,
      EmergencyUnlockActivatedEvent.OutputObject
    >;

    "FloxContributorUpdate(address,bool)": TypedContractEvent<
      FloxContributorUpdateEvent.InputTuple,
      FloxContributorUpdateEvent.OutputTuple,
      FloxContributorUpdateEvent.OutputObject
    >;
    FloxContributorUpdate: TypedContractEvent<
      FloxContributorUpdateEvent.InputTuple,
      FloxContributorUpdateEvent.OutputTuple,
      FloxContributorUpdateEvent.OutputObject
    >;

    "Supply(uint256,uint256)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;

    "VePmxUtilsContractUpdated(address)": TypedContractEvent<
      VePmxUtilsContractUpdatedEvent.InputTuple,
      VePmxUtilsContractUpdatedEvent.OutputTuple,
      VePmxUtilsContractUpdatedEvent.OutputObject
    >;
    VePmxUtilsContractUpdated: TypedContractEvent<
      VePmxUtilsContractUpdatedEvent.InputTuple,
      VePmxUtilsContractUpdatedEvent.OutputTuple,
      VePmxUtilsContractUpdatedEvent.OutputObject
    >;

    "Withdraw(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
