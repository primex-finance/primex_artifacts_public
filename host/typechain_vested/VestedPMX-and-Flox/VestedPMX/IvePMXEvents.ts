/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IvePMXEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ApplyOwnership"
      | "CommitOwnership"
      | "ContractPause"
      | "Deposit"
      | "EmergencyUnlockActivated"
      | "FloxContributorUpdate"
      | "Supply"
      | "VePmxUtilsContractUpdated"
      | "Withdraw"
  ): EventFragment;
}

export namespace ApplyOwnershipEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitOwnershipEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractPauseEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    staker: AddressLike,
    payor: AddressLike,
    endingTimestamp: BigNumberish,
    value: BigNumberish,
    depositType: BigNumberish,
    txTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    staker: string,
    payor: string,
    endingTimestamp: bigint,
    value: bigint,
    depositType: bigint,
    txTimestamp: bigint
  ];
  export interface OutputObject {
    staker: string;
    payor: string;
    endingTimestamp: bigint;
    value: bigint;
    depositType: bigint;
    txTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyUnlockActivatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FloxContributorUpdateEvent {
  export type InputTuple = [contributor: AddressLike, isContributor: boolean];
  export type OutputTuple = [contributor: string, isContributor: boolean];
  export interface OutputObject {
    contributor: string;
    isContributor: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [prevSupply: BigNumberish, supply: BigNumberish];
  export type OutputTuple = [prevSupply: bigint, supply: bigint];
  export interface OutputObject {
    prevSupply: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VePmxUtilsContractUpdatedEvent {
  export type InputTuple = [vePmxUtilsAddr: AddressLike];
  export type OutputTuple = [vePmxUtilsAddr: string];
  export interface OutputObject {
    vePmxUtilsAddr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    staker: AddressLike,
    recipient: AddressLike,
    value: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    staker: string,
    recipient: string,
    value: bigint,
    ts: bigint
  ];
  export interface OutputObject {
    staker: string;
    recipient: string;
    value: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IvePMXEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IvePMXEvents;
  waitForDeployment(): Promise<this>;

  interface: IvePMXEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ApplyOwnership"
  ): TypedContractEvent<
    ApplyOwnershipEvent.InputTuple,
    ApplyOwnershipEvent.OutputTuple,
    ApplyOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "CommitOwnership"
  ): TypedContractEvent<
    CommitOwnershipEvent.InputTuple,
    CommitOwnershipEvent.OutputTuple,
    CommitOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "ContractPause"
  ): TypedContractEvent<
    ContractPauseEvent.InputTuple,
    ContractPauseEvent.OutputTuple,
    ContractPauseEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyUnlockActivated"
  ): TypedContractEvent<
    EmergencyUnlockActivatedEvent.InputTuple,
    EmergencyUnlockActivatedEvent.OutputTuple,
    EmergencyUnlockActivatedEvent.OutputObject
  >;
  getEvent(
    key: "FloxContributorUpdate"
  ): TypedContractEvent<
    FloxContributorUpdateEvent.InputTuple,
    FloxContributorUpdateEvent.OutputTuple,
    FloxContributorUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;
  getEvent(
    key: "VePmxUtilsContractUpdated"
  ): TypedContractEvent<
    VePmxUtilsContractUpdatedEvent.InputTuple,
    VePmxUtilsContractUpdatedEvent.OutputTuple,
    VePmxUtilsContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ApplyOwnership(address)": TypedContractEvent<
      ApplyOwnershipEvent.InputTuple,
      ApplyOwnershipEvent.OutputTuple,
      ApplyOwnershipEvent.OutputObject
    >;
    ApplyOwnership: TypedContractEvent<
      ApplyOwnershipEvent.InputTuple,
      ApplyOwnershipEvent.OutputTuple,
      ApplyOwnershipEvent.OutputObject
    >;

    "CommitOwnership(address)": TypedContractEvent<
      CommitOwnershipEvent.InputTuple,
      CommitOwnershipEvent.OutputTuple,
      CommitOwnershipEvent.OutputObject
    >;
    CommitOwnership: TypedContractEvent<
      CommitOwnershipEvent.InputTuple,
      CommitOwnershipEvent.OutputTuple,
      CommitOwnershipEvent.OutputObject
    >;

    "ContractPause(bool)": TypedContractEvent<
      ContractPauseEvent.InputTuple,
      ContractPauseEvent.OutputTuple,
      ContractPauseEvent.OutputObject
    >;
    ContractPause: TypedContractEvent<
      ContractPauseEvent.InputTuple,
      ContractPauseEvent.OutputTuple,
      ContractPauseEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256,uint128,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EmergencyUnlockActivated()": TypedContractEvent<
      EmergencyUnlockActivatedEvent.InputTuple,
      EmergencyUnlockActivatedEvent.OutputTuple,
      EmergencyUnlockActivatedEvent.OutputObject
    >;
    EmergencyUnlockActivated: TypedContractEvent<
      EmergencyUnlockActivatedEvent.InputTuple,
      EmergencyUnlockActivatedEvent.OutputTuple,
      EmergencyUnlockActivatedEvent.OutputObject
    >;

    "FloxContributorUpdate(address,bool)": TypedContractEvent<
      FloxContributorUpdateEvent.InputTuple,
      FloxContributorUpdateEvent.OutputTuple,
      FloxContributorUpdateEvent.OutputObject
    >;
    FloxContributorUpdate: TypedContractEvent<
      FloxContributorUpdateEvent.InputTuple,
      FloxContributorUpdateEvent.OutputTuple,
      FloxContributorUpdateEvent.OutputObject
    >;

    "Supply(uint256,uint256)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;

    "VePmxUtilsContractUpdated(address)": TypedContractEvent<
      VePmxUtilsContractUpdatedEvent.InputTuple,
      VePmxUtilsContractUpdatedEvent.OutputTuple,
      VePmxUtilsContractUpdatedEvent.OutputObject
    >;
    VePmxUtilsContractUpdated: TypedContractEvent<
      VePmxUtilsContractUpdatedEvent.InputTuple,
      VePmxUtilsContractUpdatedEvent.OutputTuple,
      VePmxUtilsContractUpdatedEvent.OutputObject
    >;

    "Withdraw(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
