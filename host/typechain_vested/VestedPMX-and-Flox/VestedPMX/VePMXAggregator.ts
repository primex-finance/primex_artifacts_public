/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IvePMXStructs {
  export type LockedBalanceExtendedV2Struct = {
    id: BigNumberish;
    index: BigNumberish;
    amount: BigNumberish;
    end: BigNumberish;
    location: AddressLike;
    estimatedCurrLockVePMX: BigNumberish;
  };

  export type LockedBalanceExtendedV2StructOutput = [
    id: bigint,
    index: bigint,
    amount: bigint,
    end: bigint,
    location: string,
    estimatedCurrLockVePMX: bigint
  ] & {
    id: bigint;
    index: bigint;
    amount: bigint;
    end: bigint;
    location: string;
    estimatedCurrLockVePMX: bigint;
  };
}

export declare namespace VePMXAggregator {
  export type DetailedTotalSupplyInfoStruct = {
    vestedPMXTotal: BigNumberish;
    fpisLockerTotal: BigNumberish;
    l1vePMXTotal: BigNumberish;
    otherSourcesTotal: BigNumberish;
    grandTotal: BigNumberish;
  };

  export type DetailedTotalSupplyInfoStructOutput = [
    vestedPMXTotal: bigint,
    fpisLockerTotal: bigint,
    l1vePMXTotal: bigint,
    otherSourcesTotal: bigint,
    grandTotal: bigint
  ] & {
    vestedPMXTotal: bigint;
    fpisLockerTotal: bigint;
    l1vePMXTotal: bigint;
    otherSourcesTotal: bigint;
    grandTotal: bigint;
  };
}

export interface VePMXAggregatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addAddlVePMXContract"
      | "addlVeContracts"
      | "addlVeContractsArr"
      | "allAddlVeContractsAddresses"
      | "allAddlVeContractsLength"
      | "balanceOf"
      | "decimals"
      | "fpisLocker"
      | "getAllCurrActiveLocks"
      | "getAllExpiredLocks"
      | "initialize"
      | "l1VePMXTotalSupplyOracle"
      | "l1vePMX"
      | "lFpisUtils"
      | "name"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "owner"
      | "recoverERC20"
      | "removeAddlVePMXContract"
      | "setAddresses"
      | "setTimelock"
      | "symbol"
      | "timelockAddress"
      | "ttlCombinedVePMX"
      | "ttlCombinedVePMXTotalSupply"
      | "ttlCombinedVePMXTotalSupplyDetailed"
      | "vePMX"
      | "vePMXUtils"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddlVePMXContractAdded"
      | "AddlVePMXContractRemoved"
      | "DefaultInitialization"
      | "OwnerChanged"
      | "OwnerNominated"
      | "RecoveredERC20"
      | "RewardAdded"
      | "TimelockChanged"
      | "YieldCollected"
      | "YieldDurationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAddlVePMXContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addlVeContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addlVeContractsArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allAddlVeContractsAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allAddlVeContractsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fpisLocker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCurrActiveLocks",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllExpiredLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "l1VePMXTotalSupplyOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1vePMX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lFpisUtils",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddlVePMXContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelockAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ttlCombinedVePMX",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ttlCombinedVePMXTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ttlCombinedVePMXTotalSupplyDetailed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vePMX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vePMXUtils",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddlVePMXContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addlVeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addlVeContractsArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAddlVeContractsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAddlVeContractsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fpisLocker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllCurrActiveLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1VePMXTotalSupplyOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1vePMX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lFpisUtils", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddlVePMXContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttlCombinedVePMX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttlCombinedVePMXTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttlCombinedVePMXTotalSupplyDetailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vePMX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vePMXUtils", data: BytesLike): Result;
}

export namespace AddlVePMXContractAddedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddlVePMXContractRemovedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultInitializationEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerNominatedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredERC20Event {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [reward: BigNumberish, yieldRate: BigNumberish];
  export type OutputTuple = [reward: bigint, yieldRate: bigint];
  export interface OutputObject {
    reward: bigint;
    yieldRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockChangedEvent {
  export type InputTuple = [timelock_address: AddressLike];
  export type OutputTuple = [timelock_address: string];
  export interface OutputObject {
    timelock_address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldCollectedEvent {
  export type InputTuple = [
    user: AddressLike,
    yield_: BigNumberish,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    yield_: bigint,
    tokenAddress: string
  ];
  export interface OutputObject {
    user: string;
    yield: bigint;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldDurationUpdatedEvent {
  export type InputTuple = [newDuration: BigNumberish];
  export type OutputTuple = [newDuration: bigint];
  export interface OutputObject {
    newDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VePMXAggregator extends BaseContract {
  connect(runner?: ContractRunner | null): VePMXAggregator;
  waitForDeployment(): Promise<this>;

  interface: VePMXAggregatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addAddlVePMXContract: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  addlVeContracts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  addlVeContractsArr: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  allAddlVeContractsAddresses: TypedContractMethod<[], [string[]], "view">;

  allAddlVeContractsLength: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[_addr: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  fpisLocker: TypedContractMethod<[], [string], "view">;

  getAllCurrActiveLocks: TypedContractMethod<
    [_account: AddressLike, _estimateCrudeVePMX: boolean],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;

  getAllExpiredLocks: TypedContractMethod<
    [_account: AddressLike],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _timelockAddress: AddressLike,
      _veAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  l1VePMXTotalSupplyOracle: TypedContractMethod<[], [string], "view">;

  l1vePMX: TypedContractMethod<[], [string], "view">;

  lFpisUtils: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nominateNewOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedOwner: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recoverERC20: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAddlVePMXContract: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  setAddresses: TypedContractMethod<
    [_veAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setTimelock: TypedContractMethod<
    [_newTimelock: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  timelockAddress: TypedContractMethod<[], [string], "view">;

  ttlCombinedVePMX: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  ttlCombinedVePMXTotalSupply: TypedContractMethod<[], [bigint], "view">;

  ttlCombinedVePMXTotalSupplyDetailed: TypedContractMethod<
    [],
    [VePMXAggregator.DetailedTotalSupplyInfoStructOutput],
    "view"
  >;

  vePMX: TypedContractMethod<[], [string], "view">;

  vePMXUtils: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAddlVePMXContract"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addlVeContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "addlVeContractsArr"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allAddlVeContractsAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "allAddlVeContractsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fpisLocker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllCurrActiveLocks"
  ): TypedContractMethod<
    [_account: AddressLike, _estimateCrudeVePMX: boolean],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllExpiredLocks"
  ): TypedContractMethod<
    [_account: AddressLike],
    [IvePMXStructs.LockedBalanceExtendedV2StructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _timelockAddress: AddressLike,
      _veAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "l1VePMXTotalSupplyOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "l1vePMX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lFpisUtils"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nominateNewOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAddlVePMXContract"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<[_veAddresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimelock"
  ): TypedContractMethod<[_newTimelock: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timelockAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ttlCombinedVePMX"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ttlCombinedVePMXTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ttlCombinedVePMXTotalSupplyDetailed"
  ): TypedContractMethod<
    [],
    [VePMXAggregator.DetailedTotalSupplyInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "vePMX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vePMXUtils"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddlVePMXContractAdded"
  ): TypedContractEvent<
    AddlVePMXContractAddedEvent.InputTuple,
    AddlVePMXContractAddedEvent.OutputTuple,
    AddlVePMXContractAddedEvent.OutputObject
  >;
  getEvent(
    key: "AddlVePMXContractRemoved"
  ): TypedContractEvent<
    AddlVePMXContractRemovedEvent.InputTuple,
    AddlVePMXContractRemovedEvent.OutputTuple,
    AddlVePMXContractRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultInitialization"
  ): TypedContractEvent<
    DefaultInitializationEvent.InputTuple,
    DefaultInitializationEvent.OutputTuple,
    DefaultInitializationEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerNominated"
  ): TypedContractEvent<
    OwnerNominatedEvent.InputTuple,
    OwnerNominatedEvent.OutputTuple,
    OwnerNominatedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveredERC20"
  ): TypedContractEvent<
    RecoveredERC20Event.InputTuple,
    RecoveredERC20Event.OutputTuple,
    RecoveredERC20Event.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockChanged"
  ): TypedContractEvent<
    TimelockChangedEvent.InputTuple,
    TimelockChangedEvent.OutputTuple,
    TimelockChangedEvent.OutputObject
  >;
  getEvent(
    key: "YieldCollected"
  ): TypedContractEvent<
    YieldCollectedEvent.InputTuple,
    YieldCollectedEvent.OutputTuple,
    YieldCollectedEvent.OutputObject
  >;
  getEvent(
    key: "YieldDurationUpdated"
  ): TypedContractEvent<
    YieldDurationUpdatedEvent.InputTuple,
    YieldDurationUpdatedEvent.OutputTuple,
    YieldDurationUpdatedEvent.OutputObject
  >;

  filters: {
    "AddlVePMXContractAdded(address)": TypedContractEvent<
      AddlVePMXContractAddedEvent.InputTuple,
      AddlVePMXContractAddedEvent.OutputTuple,
      AddlVePMXContractAddedEvent.OutputObject
    >;
    AddlVePMXContractAdded: TypedContractEvent<
      AddlVePMXContractAddedEvent.InputTuple,
      AddlVePMXContractAddedEvent.OutputTuple,
      AddlVePMXContractAddedEvent.OutputObject
    >;

    "AddlVePMXContractRemoved(address)": TypedContractEvent<
      AddlVePMXContractRemovedEvent.InputTuple,
      AddlVePMXContractRemovedEvent.OutputTuple,
      AddlVePMXContractRemovedEvent.OutputObject
    >;
    AddlVePMXContractRemoved: TypedContractEvent<
      AddlVePMXContractRemovedEvent.InputTuple,
      AddlVePMXContractRemovedEvent.OutputTuple,
      AddlVePMXContractRemovedEvent.OutputObject
    >;

    "DefaultInitialization()": TypedContractEvent<
      DefaultInitializationEvent.InputTuple,
      DefaultInitializationEvent.OutputTuple,
      DefaultInitializationEvent.OutputObject
    >;
    DefaultInitialization: TypedContractEvent<
      DefaultInitializationEvent.InputTuple,
      DefaultInitializationEvent.OutputTuple,
      DefaultInitializationEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "OwnerNominated(address)": TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;
    OwnerNominated: TypedContractEvent<
      OwnerNominatedEvent.InputTuple,
      OwnerNominatedEvent.OutputTuple,
      OwnerNominatedEvent.OutputObject
    >;

    "RecoveredERC20(address,uint256)": TypedContractEvent<
      RecoveredERC20Event.InputTuple,
      RecoveredERC20Event.OutputTuple,
      RecoveredERC20Event.OutputObject
    >;
    RecoveredERC20: TypedContractEvent<
      RecoveredERC20Event.InputTuple,
      RecoveredERC20Event.OutputTuple,
      RecoveredERC20Event.OutputObject
    >;

    "RewardAdded(uint256,uint256)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "TimelockChanged(address)": TypedContractEvent<
      TimelockChangedEvent.InputTuple,
      TimelockChangedEvent.OutputTuple,
      TimelockChangedEvent.OutputObject
    >;
    TimelockChanged: TypedContractEvent<
      TimelockChangedEvent.InputTuple,
      TimelockChangedEvent.OutputTuple,
      TimelockChangedEvent.OutputObject
    >;

    "YieldCollected(address,uint256,address)": TypedContractEvent<
      YieldCollectedEvent.InputTuple,
      YieldCollectedEvent.OutputTuple,
      YieldCollectedEvent.OutputObject
    >;
    YieldCollected: TypedContractEvent<
      YieldCollectedEvent.InputTuple,
      YieldCollectedEvent.OutputTuple,
      YieldCollectedEvent.OutputObject
    >;

    "YieldDurationUpdated(uint256)": TypedContractEvent<
      YieldDurationUpdatedEvent.InputTuple,
      YieldDurationUpdatedEvent.OutputTuple,
      YieldDurationUpdatedEvent.OutputObject
    >;
    YieldDurationUpdated: TypedContractEvent<
      YieldDurationUpdatedEvent.InputTuple,
      YieldDurationUpdatedEvent.OutputTuple,
      YieldDurationUpdatedEvent.OutputObject
    >;
  };
}
