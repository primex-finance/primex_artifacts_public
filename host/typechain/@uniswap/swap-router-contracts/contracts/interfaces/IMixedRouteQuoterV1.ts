/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IMixedRouteQuoterV1 {
  export type QuoteExactInputSingleV2ParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
  };

  export type QuoteExactInputSingleV2ParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint
  ] & { tokenIn: string; tokenOut: string; amountIn: bigint };

  export type QuoteExactInputSingleV3ParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    fee: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type QuoteExactInputSingleV3ParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    fee: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    fee: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export interface IMixedRouteQuoterV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "quoteExactInput"
      | "quoteExactInputSingleV2"
      | "quoteExactInputSingleV3"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "quoteExactInput",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactInputSingleV2",
    values: [IMixedRouteQuoterV1.QuoteExactInputSingleV2ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactInputSingleV3",
    values: [IMixedRouteQuoterV1.QuoteExactInputSingleV3ParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "quoteExactInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactInputSingleV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactInputSingleV3",
    data: BytesLike
  ): Result;
}

export interface IMixedRouteQuoterV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IMixedRouteQuoterV1;
  waitForDeployment(): Promise<this>;

  interface: IMixedRouteQuoterV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  quoteExactInput: TypedContractMethod<
    [path: BytesLike, amountIn: BigNumberish],
    [
      [bigint, bigint[], bigint[], bigint] & {
        amountOut: bigint;
        v3SqrtPriceX96AfterList: bigint[];
        v3InitializedTicksCrossedList: bigint[];
        v3SwapGasEstimate: bigint;
      }
    ],
    "nonpayable"
  >;

  quoteExactInputSingleV2: TypedContractMethod<
    [params: IMixedRouteQuoterV1.QuoteExactInputSingleV2ParamsStruct],
    [bigint],
    "nonpayable"
  >;

  quoteExactInputSingleV3: TypedContractMethod<
    [params: IMixedRouteQuoterV1.QuoteExactInputSingleV3ParamsStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        amountOut: bigint;
        sqrtPriceX96After: bigint;
        initializedTicksCrossed: bigint;
        gasEstimate: bigint;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "quoteExactInput"
  ): TypedContractMethod<
    [path: BytesLike, amountIn: BigNumberish],
    [
      [bigint, bigint[], bigint[], bigint] & {
        amountOut: bigint;
        v3SqrtPriceX96AfterList: bigint[];
        v3InitializedTicksCrossedList: bigint[];
        v3SwapGasEstimate: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quoteExactInputSingleV2"
  ): TypedContractMethod<
    [params: IMixedRouteQuoterV1.QuoteExactInputSingleV2ParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quoteExactInputSingleV3"
  ): TypedContractMethod<
    [params: IMixedRouteQuoterV1.QuoteExactInputSingleV3ParamsStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        amountOut: bigint;
        sqrtPriceX96After: bigint;
        initializedTicksCrossed: bigint;
        gasEstimate: bigint;
      }
    ],
    "nonpayable"
  >;

  filters: {};
}
