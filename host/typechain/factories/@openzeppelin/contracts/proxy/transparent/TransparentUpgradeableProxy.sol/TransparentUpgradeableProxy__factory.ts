/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../../../../common";
import type {
  TransparentUpgradeableProxy,
  TransparentUpgradeableProxyInterface,
} from "../../../../../../@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol/TransparentUpgradeableProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052610c7580380380610014816102ce565b92833981016060828203126102c95761002c82610309565b61003860208401610309565b604084015190936001600160401b0382116102c957019082601f830112156102c95781519161006e6100698461031d565b6102ce565b928084526020840194602082840101116102c95784602061008f9301610338565b803b1561026e577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610266575b6101e0575b5050600080516020610c5583398151915254604080516001600160a01b03808416825290941660208501819052939192507f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a1811561018c576001600160a01b03191617600080516020610c5583398151915255604051610846908161040f8239f35b60405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080610255946101f160606102ce565b94602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020870152660819985a5b195960ca1b60408701525190845af43d1561025e573d916102456100698461031d565b9283523d6000602085013e61035b565b50388080610108565b60609161035b565b506000610103565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176102f357604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036102c957565b6001600160401b0381116102f357601f01601f191660200190565b60005b83811061034b5750506000910152565b818101518382015260200161033b565b919290156103bd575081511561036f575090565b3b156103785790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103d05750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526104008151809281602486015260208686019101610338565b601f01601f19168101030190fdfe60806040523661013f576000805160206107d183398151915254610033906001600160a01b03165b6001600160a01b031690565b330361013a576000356001600160e01b031916631b2ce7f360e11b8103610065575061005d61045b565b602081519101f35b63278f794360e11b8103610081575061007c6103ca565b61005d565b6308f2839760e41b8103610098575061007c6102e4565b6303e1469160e61b81036100af575061007c61023e565b635c60da1b60e01b036100c45761007c610203565b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a490fd5b61018b565b6000805160206107d183398151915254610161906001600160a01b0316610027565b330361018b576000356001600160e01b031916631b2ce7f360e11b8103610065575061005d61045b565b6000805160206107f18339815191525460009081906001600160a01b0316368280378136915af43d6000803e156101c1573d6000f35b3d6000fd5b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176101fe57604052565b6101c6565b61020b610581565b60018060a01b036000805160206107f183398151915254166040519060208201526020815261023b6040826101dc565b90565b610246610581565b60018060a01b036000805160206107d183398151915254166040519060208201526020815261023b6040826101dc565b600435906001600160a01b038216820361028c57565b600080fd5b602090600319011261028c576004356001600160a01b038116810361028c5790565b67ffffffffffffffff81116101fe57601f01601f191660200190565b604051906102de6020836101dc565b60008252565b6102ec610581565b3660041161028c576001600160a01b0361030536610291565b166000805160206107d1833981519152547f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6040805160018060a01b0384168152846020820152a18115610376576001600160a01b031916176000805160206107d18339815191525561023b6102cf565b60405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3660041161028c57604036600319011261028c576103e6610276565b6024359067ffffffffffffffff821161028c573660238301121561028c57816004013590610413826102b3565b9161042160405193846101dc565b808352366024828601011161028c576020816000926024610453970183870137840101526001600160a01b0316610588565b61023b6102cf565b610463610581565b3660041161028c576001600160a01b0361047c36610291565b166020906040519061048e83836101dc565b60008252803b15610526576000805160206107f183398151915280546001600160a01b03191682179055807fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061051e575b610504575b50506104fd60405191826101dc565b6000815290565b61051691610510610664565b916106af565b5038806104ee565b5060006104e9565b60405162461bcd60e51b815260048101849052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3461028c57565b803b15610609576000805160206107f183398151915280546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610601575b6105f2575050565b6105fe91610510610664565b50565b5060016105ea565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b604051906106736060836101dc565b60278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b60008061023b9493602081519101845af43d156106ee573d916106d1836102b3565b926106df60405194856101dc565b83523d6000602085013e610742565b606091610742565b156106fd57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156107625750815115610756575090565b61023b903b15156106f6565b8251909150156107755750805190602001fd5b6040519062461bcd60e51b8252602060048301528181519182602483015260005b8381106107b85750508160006044809484010152601f80199101168101030190fd5b6020828201810151604487840101528593500161079656feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212205a24e37b8404c988bf286ad5736caa678faca592c0f556e954fd90f779592ec164736f6c634300081a0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103";

type TransparentUpgradeableProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransparentUpgradeableProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransparentUpgradeableProxy__factory extends ContractFactory {
  constructor(...args: TransparentUpgradeableProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _logic: AddressLike,
    admin_: AddressLike,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_logic, admin_, _data, overrides || {});
  }
  override deploy(
    _logic: AddressLike,
    admin_: AddressLike,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_logic, admin_, _data, overrides || {}) as Promise<
      TransparentUpgradeableProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TransparentUpgradeableProxy__factory {
    return super.connect(runner) as TransparentUpgradeableProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransparentUpgradeableProxyInterface {
    return new Interface(_abi) as TransparentUpgradeableProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TransparentUpgradeableProxy {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TransparentUpgradeableProxy;
  }
}
