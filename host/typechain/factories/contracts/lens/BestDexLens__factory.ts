/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BestDexLens,
  BestDexLensInterface,
} from "../../../contracts/lens/BestDexLens";

const _abi = [
  {
    inputs: [],
    name: "DS_MATH_ADD_OVERFLOW",
    type: "error",
  },
  {
    inputs: [],
    name: "DS_MATH_MUL_OVERFLOW",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IPositionManagerV2",
            name: "positionManager",
            type: "address",
          },
          {
            internalType: "contract ILimitOrderManager",
            name: "limitOrderManager",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "orderId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "firstAssetShares",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositInThirdAssetShares",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositToBorrowedShares",
                type: "uint256",
              },
            ],
            internalType: "struct IBestDexLens.Shares",
            name: "shares",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "dex",
                type: "string",
              },
              {
                internalType: "bytes32",
                name: "ancillaryData",
                type: "bytes32",
              },
            ],
            internalType: "struct IBestDexLens.DexWithAncillaryData[]",
            name: "dexes",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "depositBorrowedAssetOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes[][]",
            name: "pullOracleData",
            type: "bytes[][]",
          },
          {
            internalType: "uint256[]",
            name: "pullOracleTypes",
            type: "uint256[]",
          },
        ],
        internalType: "struct IBestDexLens.BestDexByOrderParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "getBestDexByOrder",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "returnAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "estimateGasAmount",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "shares",
                    type: "uint256",
                  },
                  {
                    components: [
                      {
                        internalType: "address",
                        name: "to",
                        type: "address",
                      },
                      {
                        components: [
                          {
                            internalType: "string",
                            name: "dexName",
                            type: "string",
                          },
                          {
                            internalType: "uint256",
                            name: "shares",
                            type: "uint256",
                          },
                          {
                            internalType: "bytes",
                            name: "payload",
                            type: "bytes",
                          },
                        ],
                        internalType: "struct PrimexPricingLibrary.Path[]",
                        name: "paths",
                        type: "tuple[]",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Route[]",
                    name: "routes",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.MegaRoute[]",
                name: "megaRoutes",
                type: "tuple[]",
              },
            ],
            internalType:
              "struct IBestDexLens.GetBestMultipleDexesReturnParams",
            name: "firstAssetReturnParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "returnAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "estimateGasAmount",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "shares",
                    type: "uint256",
                  },
                  {
                    components: [
                      {
                        internalType: "address",
                        name: "to",
                        type: "address",
                      },
                      {
                        components: [
                          {
                            internalType: "string",
                            name: "dexName",
                            type: "string",
                          },
                          {
                            internalType: "uint256",
                            name: "shares",
                            type: "uint256",
                          },
                          {
                            internalType: "bytes",
                            name: "payload",
                            type: "bytes",
                          },
                        ],
                        internalType: "struct PrimexPricingLibrary.Path[]",
                        name: "paths",
                        type: "tuple[]",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Route[]",
                    name: "routes",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.MegaRoute[]",
                name: "megaRoutes",
                type: "tuple[]",
              },
            ],
            internalType:
              "struct IBestDexLens.GetBestMultipleDexesReturnParams",
            name: "depositInThirdAssetReturnParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "returnAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "estimateGasAmount",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "shares",
                    type: "uint256",
                  },
                  {
                    components: [
                      {
                        internalType: "address",
                        name: "to",
                        type: "address",
                      },
                      {
                        components: [
                          {
                            internalType: "string",
                            name: "dexName",
                            type: "string",
                          },
                          {
                            internalType: "uint256",
                            name: "shares",
                            type: "uint256",
                          },
                          {
                            internalType: "bytes",
                            name: "payload",
                            type: "bytes",
                          },
                        ],
                        internalType: "struct PrimexPricingLibrary.Path[]",
                        name: "paths",
                        type: "tuple[]",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Route[]",
                    name: "routes",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.MegaRoute[]",
                name: "megaRoutes",
                type: "tuple[]",
              },
            ],
            internalType:
              "struct IBestDexLens.GetBestMultipleDexesReturnParams",
            name: "depositToBorrowedReturnParams",
            type: "tuple",
          },
        ],
        internalType: "struct IBestDexLens.GetBestDexByOrderReturnParams",
        name: "_returnParams",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPositionManagerV2",
        name: "_positionManager",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_positionId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_shares",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "dex",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "ancillaryData",
            type: "bytes32",
          },
        ],
        internalType: "struct IBestDexLens.DexWithAncillaryData[]",
        name: "_dexesWithAncillaryData",
        type: "tuple[]",
      },
    ],
    name: "getBestDexByPosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "returnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "estimateGasAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "shares",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "string",
                        name: "dexName",
                        type: "string",
                      },
                      {
                        internalType: "uint256",
                        name: "shares",
                        type: "uint256",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Path[]",
                    name: "paths",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.Route[]",
                name: "routes",
                type: "tuple[]",
              },
            ],
            internalType: "struct PrimexPricingLibrary.MegaRoute[]",
            name: "megaRoutes",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBestDexLens.GetBestMultipleDexesReturnParams",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IPositionManagerV2",
            name: "positionManager",
            type: "address",
          },
          {
            internalType: "address",
            name: "borrowedAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "borrowedAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "depositAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "positionAsset",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "firstAssetShares",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositInThirdAssetShares",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositToBorrowedShares",
                type: "uint256",
              },
            ],
            internalType: "struct IBestDexLens.Shares",
            name: "shares",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "dex",
                type: "string",
              },
              {
                internalType: "bytes32",
                name: "ancillaryData",
                type: "bytes32",
              },
            ],
            internalType: "struct IBestDexLens.DexWithAncillaryData[]",
            name: "dexes",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBestDexLens.BestDexForOpenablePositionParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "getBestDexForOpenablePosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "returnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "estimateGasAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "shares",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "string",
                        name: "dexName",
                        type: "string",
                      },
                      {
                        internalType: "uint256",
                        name: "shares",
                        type: "uint256",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Path[]",
                    name: "paths",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.Route[]",
                name: "routes",
                type: "tuple[]",
              },
            ],
            internalType: "struct PrimexPricingLibrary.MegaRoute[]",
            name: "megaRoutes",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBestDexLens.GetBestMultipleDexesReturnParams",
        name: "_firstAssetReturnParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "returnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "estimateGasAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "shares",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "string",
                        name: "dexName",
                        type: "string",
                      },
                      {
                        internalType: "uint256",
                        name: "shares",
                        type: "uint256",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Path[]",
                    name: "paths",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.Route[]",
                name: "routes",
                type: "tuple[]",
              },
            ],
            internalType: "struct PrimexPricingLibrary.MegaRoute[]",
            name: "megaRoutes",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBestDexLens.GetBestMultipleDexesReturnParams",
        name: "_depositInThirdAssetReturnParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "returnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "estimateGasAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "shares",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "string",
                        name: "dexName",
                        type: "string",
                      },
                      {
                        internalType: "uint256",
                        name: "shares",
                        type: "uint256",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Path[]",
                    name: "paths",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.Route[]",
                name: "routes",
                type: "tuple[]",
              },
            ],
            internalType: "struct PrimexPricingLibrary.MegaRoute[]",
            name: "megaRoutes",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBestDexLens.GetBestMultipleDexesReturnParams",
        name: "_depositToBorrowedReturnParams",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IPositionManagerV2",
            name: "positionManager",
            type: "address",
          },
          {
            internalType: "address",
            name: "assetToBuy",
            type: "address",
          },
          {
            internalType: "address",
            name: "assetToSell",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isAmountToBuy",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "shares",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasPriceInCheckedAsset",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "string",
                name: "dex",
                type: "string",
              },
              {
                internalType: "bytes32",
                name: "ancillaryData",
                type: "bytes32",
              },
            ],
            internalType: "struct IBestDexLens.DexWithAncillaryData[]",
            name: "dexes",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBestDexLens.GetBestMultipleDexesParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "getBestMultipleDexes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "returnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "estimateGasAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "shares",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "string",
                        name: "dexName",
                        type: "string",
                      },
                      {
                        internalType: "uint256",
                        name: "shares",
                        type: "uint256",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct PrimexPricingLibrary.Path[]",
                    name: "paths",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.Route[]",
                name: "routes",
                type: "tuple[]",
              },
            ],
            internalType: "struct PrimexPricingLibrary.MegaRoute[]",
            name: "megaRoutes",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBestDexLens.GetBestMultipleDexesReturnParams",
        name: "_returnParams",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761321d908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146117005750806318cf81b4146112e5578063373c00a1146103dc57806343116daf1461014c5763d61a1b941461005857600080fd5b3461013d5760031960203682011261014057600435906001600160401b039081831161014857610100908336030112610144576040519261009884611755565b6100a4836004016117c8565b84526100b2602484016117c8565b60208501526100c3604484016117c8565b6040850152606483013560608501526084830135801515810361014057608085015260a483013560a085015260c483013560c085015260e483013591821161013d576101396101258561011b36868801600401611877565b60e0820152611d97565b604051918291602083526020830190611984565b0390f35b80fd5b5080fd5b8280fd5b8380fd5b503461013d57608036600319011261013d576001600160a01b03600435818116908190036103d7576001600160401b039260643584811161014057610195903690600401611877565b9061019e611af5565b506040516301ffc9a760e01b8152633d79d7fb60e11b6004820152602094908581602481885afa9081156103855783916103a2575b5015610390576040519563eb02c30160e01b875260243560048801528287602481885afa90811561038557839161026f575b5061025a95965060c0826060830151169260a083015116910151916040519561022d87611755565b8652878601526040850152606084015280608084015260443560a084015260c083015260e0820152611d97565b90610139604051928284938452830190611984565b90503d8084893e61028081896117a7565b87019686818903126101485780519082821161038157016101809182828a0312610381576040519283018381108282111761036b576040528151835287820151888401526102d060408301611b42565b60408401526102e160608301611b42565b6060840152608082015160808401526102fc60a08301611b42565b60a084015260c082015160c084015261031760e08301611b42565b60e08401526101008083015190840152610120808301519084015261014080830151908401526101609182810151918211610367579861035c9161025a999a01611b56565b908201528695610205565b8580fd5b634e487b7160e01b600052604160045260246000fd5b8480fd5b6040513d85823e3d90fd5b60405163044aa57560e41b8152600490fd5b90508581813d83116103d0575b6103b981836117a7565b81010312610144576103ca90611b16565b386101d3565b503d6103af565b600080fd5b50602036600319011261013d576001600160401b036004351161013d576101406004353603600319011261013d576040519061041782611755565b6104256004356004016117c8565b8252600435602401356001600160a01b038116810361014057602083015260446004350135604083015261045e366064600435016117dc565b606083015260c460043501356001600160401b03811161014057610489906004369181350101611877565b608083015260e460043501356001600160401b038111610140576104b4906004369181350101611ad7565b60a083015261010460043501356001600160401b038111610140573660238260043501011215610140576104ee600482813501013561180e565b906104fc60405192836117a7565b600480358201908101358084526020840192913660059290921b0160240111610148576024816004350101915b6004803583019081013560051b0160240183106112155750505060c083015261012460043501356001600160401b0381116101405736602382600435010112156101405761057d600482813501013561180e565b9061058b60405192836117a7565b6004803582019081013580845260208401913660059290921b0160240111610148576024826004350101905b6004803584019081013560051b0160240182106112055750505060e0830152604051906105e382611771565b6105eb611af5565b82526105f5611af5565b6020830152610602611af5565b604083810191909152835190516301ffc9a760e01b8152633d79d7fb60e11b600482015290602090829060249082906001600160a01b03165afa9081156110595782916111cb575b5080611148575b15610390578251604051632630c12f60e01b815290602090829060049082906001600160a01b03165afa908115611059578291611129575b5060c084015160e08501519091906001600160a01b0382163b156101485791839160405193849263f197ce3560e01b8452604484016040600486015281518091526064850190602060648260051b88010193019187905b8282106110ab575050505060031984820301602485015260208083519283815201920190855b81811061108f5750505082900390829034906001600160a01b03165af1801561105957611064575b5060018060a01b0360208401511681604085015160246040518094819363d09ef24160e01b835260048301525afa908115611059578291610f01575b50600491670de0b6b3a764000061012083015114600014610e775760408201516001600160a01b0316905b8551604051633f4a2d2760e01b81529460209186919082906001600160a01b03165afa938415610e6a578194610e49575b5060408301516001600160a01b0383811691169081141596908780610e31575b610dbf575b60018060a01b036040860151166060860151906040808a0151015197604051988960808101106001600160401b0360808c01111761036b5760049360209360808c016040528b5260018060a01b038916848c015260408b015260608a0152604051928380926391f03efd60e01b825260018060a01b03165afa908115610db4578491610d7a575b508251604051632630c12f60e01b815290602090829060049082906001600160a01b03165afa908115610d6f578591610d40575b50909660609760a085015192604051998a93630e6e928f60e41b855260a0600486015260018060a01b0381511660a486015260018060a01b0360208201511660c4860152604081015160e486015201519160806101048501528c61012485018451809152610144906020828801928260051b8901019601918b905b828210610c0f5750505050151560248501526001600160a01b03908116604485015216606483015281810360031901608483015260209282916109639161195f565b038173__$75df3f6366b0557754cd3ba14359105414$__5af4958615610385578396610bdb575b506101208501519586670de0b6b3a763ffff19810111610bc7578396670de0b6b3a763ffff19810115908115610b92575b5015610b80576706f05b59d3b2000087018711610b6a57866706f05b59d3b20000810110610b585761013998610a8197670de0b6b3a76400006706f05b59d3b2000090910104926001600160a01b03871603610ad25750610a1b91611ba5565b8151602090950151606083015151608090930151604051969095916001600160a01b039081169116610a4c88611755565b875260208701526001600160a01b0316604086015260608501526080840182905260a084015260c083015260e0820152611d97565b815260405191829160208352610aa38151606060208601526080850190611984565b6040610ac0602084015192601f1993848883030184890152611984565b92015190848303016060850152611984565b905015610a1b57610b4e60018060a01b0383511660018060a01b0360208801511660018060a01b0360408901511660608901516020606088015101519160808801519360405195610b2287611755565b865260208601526040850152606084015286608084015260a08301528560c083015260e0820152611d97565b6020880152610a1b565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b604051631550e8b760e01b8152600490fd5b97505080610bc0610bae670de0b6b3a763ffff198a0183611d35565b98670de0b6b3a763ffff190189611c7e565b14386109bb565b634e487b7160e01b84526011600452602484fd5b9095506020813d602011610c07575b81610bf7602093836117a7565b810103126103d75751943861098a565b3d9150610bea565b9298979093506101439691949596199082030182528a885160206040840191805185520151926040602082015283518092526060810190602060608460051b830101950193805b848210610c7e57505050505050602080600192990192019201928f92938e9798969594610921565b605f969192939495961984830301855286516020604084019160018060a01b0381511685520151926040602082015283518092526060810191602060608260051b840101950193915b818310610ceb5750505050506020806001929701940191018f949394929192610c56565b9091929394602080610d33600193605f198682030189528951906040610d1a835160608452606084019061195f565b928581015186840152015190604081840391015261195f565b9701950193019190610cc7565b610d62915060203d602011610d68575b610d5a81836117a7565b810190611b23565b386108a6565b503d610d50565b6040513d87823e3d90fd5b90506020813d602011610dac575b81610d95602093836117a7565b8101031261014857610da690611b42565b38610872565b3d9150610d88565b6040513d86823e3d90fd5b610e2760018060a01b03835116606087015160406060860151015160808601519160405193610ded85611755565b84526001600160a01b03891660208501526040840186905260608401526080830187905260a083015260c0820186905260e0820152611d97565b60408801526107eb565b60208601516001600160a01b031682141598506107e6565b610e6391945060203d602011610d6857610d5a81836117a7565b92386107c6565b50604051903d90823e3d90fd5b815160405163011ddaef60e71b81529360209185919082906001600160a01b03165afa8015610e6a578190610eba575b600493506001600160a01b031690610795565b5090916020813d602011610ef9575b81610ed6602093836117a7565b8101031261014057516001600160a01b0381168103610140579060049291610ea7565b3d9150610ec9565b3d91508183823e610f1282826117a7565b6020818381010312610144578051916001600160401b038311610148576101c083830182840103126101485760405192836101c08101106001600160401b036101c08601111761036b576101c08401604052610f6f818401611b42565b8452610f7f602082850101611b42565b6020850152610f92604082850101611b42565b6040850152606081840101516060850152610fb1608082850101611b42565b608085015260a0818401015160a0850152610fd060c082850101611b42565b60c085015282810160e08181015190860152610100808201519086015261012080820151908601526110059061014001611b16565b610140850152828101610160818101519086015261018080820151908601526101a00151916001600160401b03831161036757600495949361104c93918101920101611b56565b6101a0820152909161076a565b6040513d84823e3d90fd5b6001600160401b03811161107b576040523861072e565b634e487b7160e01b82526041600452602482fd5b8251845288965087955060209384019390920191600101610706565b929597509290939550606319888203018252845190815180825260208201906020808260051b8501019401928c5b8281106110fe57505050505060208060019296019201920192879593899795936106e0565b909192939460208061111c600193601f19878203018952895161195f565b97019501939291016110d9565b611142915060203d602011610d6857610d5a81836117a7565b38610689565b506020838101516040516301ffc9a760e01b815263fabd349d60e01b60048201529190829060249082906001600160a01b03165afa908115611059578291611191575b50610651565b90506020813d6020116111c3575b816111ac602093836117a7565b81010312610140576111bd90611b16565b3861118b565b3d915061119f565b90506020813d6020116111fd575b816111e6602093836117a7565b81010312610140576111f790611b16565b3861064a565b3d91506111d9565b81358152602091820191016105b7565b82356001600160401b03811161036757366043828560043501010112156103675760248184600435010101359061124b8261180e565b9161125960405193846117a7565b808352602083013660448360051b858960043501010101116112e15760448387600435010101905b60448360051b85896004350101010182106112a9575050509082525060209283019201610529565b6001600160401b038235116112dd57602080916112d23660448635898d60043501010101611ad7565b815201910190611281565b8980fd5b8880fd5b503461013d5760031960203682011261014057600435906001600160401b039081831161014857610140908336030112610144576040519161132683611755565b611332816004016117c8565b8352611340602482016117c8565b60208401526044810135604084015261135b606482016117c8565b60608401526084810135608084015261137660a482016117c8565b60a08401526113883660c483016117dc565b60c08401526101248101359182116101485760046113a99236920101611877565b60e08201526113b6611af5565b506113bf611af5565b6113c7611af5565b82516040516301ffc9a760e01b8152633d79d7fb60e11b600482015290602090829060249082906001600160a01b03165afa908115610d6f5785916116c6575b50806116b0575b8061169a575b80611684575b156103905760808301511561167257604083015115801590611654575b156116425760208301516060840151611513956001600160a01b0391821695929091169185831415808061162a575b6115c6575b611536575b805160a082015160208301516040840151979861013998611521976114fe976001600160a01b03968716979587169690959416926114b992910361152f57608084015190611ba5565b9060e060c08401515193015194604051966114d388611755565b875260208701526040860152606085015281608085015260a084015260c083015260e0820152611d97565b93604051958695606087526060870190611984565b908582036020870152611984565b908382036040850152611984565b8490611ba5565b946101399450611521926114fe926115ba60018060a01b0389511660018060a01b0360a08b0151168a60018060a01b0360608201511660808201519060e0602060c08501510151930151936040519561158e87611755565b865260208601526040850152606084015284608084015260a08301528360c083015260e0820152611d97565b96509250925094611470565b935061162460018060a01b038251166080830151604060c0850151015160e085015191604051936115f685611755565b84528760208501528a6040850152606084015285608084015260a08301528460c083015260e0820152611d97565b9361146b565b60a08301516001600160a01b03168814159150611466565b6040516396b154ab60e01b8152600490fd5b50602083015160608401516001600160a01b03908116911614611437565b60405163511ff7fb60e11b8152600490fd5b5060a08301516001600160a01b0316151561141a565b5060608301516001600160a01b03161515611414565b5060208301516001600160a01b0316151561140e565b90506020813d6020116116f8575b816116e1602093836117a7565b81010312610381576116f290611b16565b38611407565b3d91506116d4565b9050346101405760203660031901126101405760043563ffffffff60e01b81168091036101445760209250635d7c7b9760e11b8114908115611744575b5015158152f35b6301ffc9a760e01b1490503861173d565b61010081019081106001600160401b0382111761036b57604052565b606081019081106001600160401b0382111761036b57604052565b604081019081106001600160401b0382111761036b57604052565b90601f801991011681019081106001600160401b0382111761036b57604052565b35906001600160a01b03821682036103d757565b91908260609103126103d7576040516117f481611771565b604080829480358452602081013560208501520135910152565b6001600160401b03811161036b5760051b60200190565b6001600160401b03811161036b57601f01601f191660200190565b92919261184c82611825565b9161185a60405193846117a7565b8294818452818301116103d7578281602093846000960137010152565b81601f820112156103d757803561188d8161180e565b9260409161189d835195866117a7565b808552602093848087019260051b820101938385116103d757858201925b8584106118cc575050505050505090565b6001600160401b039084358281116103d75784019083601f1983890301126103d7578351926118fa8461178c565b898301359081116103d75782019287603f850112156103d757848a94936119298a868489809901359101611840565b83520135838201528152019301926118bb565b60005b83811061194f5750506000910152565b818101518382015260200161193f565b906020916119788151809281855285808601910161193c565b601f01601f1916010190565b906040606082019280518352602081015160208401520151916060604083015282518091526080820191602060808360051b8301019401926000915b8383106119cf57505050505090565b9091929394607f1982820301835285519060206040820192805183520151916040602083015282518091526060820190602060608260051b85010194019260005b828110611a31575050505050602080600192970193019301919392906119c0565b9091929394605f198382030185526020865160018060a01b03815116835201519060406020820152604081019082518092526060810190602060608460051b8301019401926000915b818310611a9b57505050505060208060019297019501910192919092611a10565b9091929394602080611aca600193605f198682030189528951906040610d1a835160608452606084019061195f565b9701950193019190611a7a565b9080601f830112156103d757816020611af293359101611840565b90565b60405190611b0282611771565b606060408360008152600060208201520152565b519081151582036103d757565b908160209103126103d757516001600160a01b03811681036103d75790565b51906001600160a01b03821682036103d757565b81601f820112156103d7578051611b6c81611825565b92611b7a60405194856117a7565b818452602082840101116103d757611af2916020808501910161193c565b91908203918211610b6a57565b91908201809211610b6a57565b90611bbc8261180e565b611bc960405191826117a7565b8281528092611bda601f199161180e565b0190602036910137565b60005b828110611bf357505050565b606082820152602001611be7565b90611c36611c0e8361180e565b611c1b60405191826117a7565b83815260208194611c2e601f199161180e565b019101611be4565b565b805115611c455760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611c455760209160051b010190565b6000198114610b6a5760010190565b8115611c88570490565b634e487b7160e01b600052601260045260246000fd5b906020828203126103d75781516001600160401b0381116103d757611af29201611b56565b9295939491909460a084019660a08552865180985260c0850160208098019860005b818110611d185750506001600160a01b039384169786019790975260408501521660608301521515608090910152909150565b8a516001600160a01b031683529989019991890191600101611ce5565b81810292918115918404141715610b6a57565b81810392916000138015828513169184121617610b6a57565b91909160008382019384129112908015821691151617610b6a57565b60405190611d8a8261178c565b6060602083600081520152565b90611da0611af5565b60208301516001600160a01b0316151580612ff6575b15612fe457602083015160408401516001600160a01b03908116911614612fd25760a083015115612fbd57606083015160a084015111612fab576040519060c082018281106001600160401b0382111761036b576040526000825260006020830152606060408301526000606083015260006080830152606060a083015260e08401515193611e448561180e565b94611e5260405196876117a7565b808652611e61601f199161180e565b0160005b818110612f8657505060a08101518352611e8360e082015151611bb2565b60a0840152611e9660e082015151611c01565b94604051611ea381611771565b60028152604036602083013760408581018290528301516001600160a01b031690611ecd90611c38565b5260018060a01b036020830151166040850151805160011015611c45576040015260405192611efb84611771565b60608452600060208501526000604085015260005b60e0840151518110156126ab578351604051633f4a2d2760e01b815290602090829060049082906001600160a01b03165afa90811561247757611f8c9160209160009161268e575b50611f678460e0890151611c5b565b515190604051808095819463657dcce560e01b8352866004840152602483019061195f565b03916001600160a01b03165afa60009181612652575b50611fb65750611fb190611c6f565b611f10565b8451604051633f4a2d2760e01b815292989394929190602090839060049082906001600160a01b03165afa91821561247757600492602091600091612635575b506040516391f03efd60e01b815293849182906001600160a01b03165afa918215612477576000926125f6575b506040516336dd6b3d60e01b81526001600160a01b038281166004830152909260209184916024918391165afa918215612477576000926125c2575b506120706060870151895190611c7e565b602088015260018060a01b03811660408801526004604089015191602061209b8c60e08b0151611c5b565b5101518851604051633f4a2d2760e01b81529194919360209185919082906001600160a01b03165afa928315612477576004936020916000916125a5575b506040516391f03efd60e01b815294859182906001600160a01b03165afa92831561247757600093612565575b50608089015160405163340f07ad60e11b8152946000948694859461213f941515936001600160a01b0390931692919060048701611cc3565b038173__$75df3f6366b0557754cd3ba14359105414$__5af490811561247757600091612542575b5086528451604051633f4a2d2760e01b815290602090829060049082906001600160a01b03165afa90811561247757600491602091600091612525575b506040516391f03efd60e01b815292839182906001600160a01b03165afa8015612477576000906124ea575b60808701516121ec92501515906001600160a01b0316886130fe565b908960001983146124db5761227961227f926122578b670de0b6b3a7640000946122368f61221e9060e08f0151611c5b565b5160608401519061222f828d611c5b565b528a611c5b565b5060606122438351611bb2565b920151916122518383611c5b565b52611c5b565b508061226d8c606060a082015191015190611c5b565b5260c089015190611d35565b0461300c565b6080880152608085015115156000146124bf5761229e6122a99161300c565b608088015190611d61565b6122c06122ba60608901518b611c5b565b51611c38565b5260015b86518110156124a057606085015190600181018111610b6a576122f86122f06004936001840190611d35565b895190611c7e565b6020888101919091528651604051633f4a2d2760e01b815293849182906001600160a01b03165afa91821561247757600492602091600091612483575b506040516391f03efd60e01b815293849182906001600160a01b03165afa80156124775760009061243c575b6080870180516123d494509091612384911515906001600160a01b03168a6130fe565b9051156123f55760001981036123d957507d90e40fbeea1d3a4abc8955e946fe31cdcf66f634e10000000000000000005b6123ce826123c88d60608d015190611c5b565b51611c5b565b52611c6f565b6122c4565b6123e56123f09161300c565b60808a015190611d61565b6123b5565b600019810361242557507fffff6f1bf04115e2c5b54376aa16b901ce32309909cb1f0000000000000000006123b5565b6124316123f09161300c565b60808a015190611d48565b506020823d60201161246f575b81612456602093836117a7565b810103126103d75761246a6123d492611b42565b612361565b3d9150612449565b6040513d6000823e3d90fd5b61249a9150823d8411610d6857610d5a81836117a7565b38612335565b50919095611fb1906124b56060880151611c6f565b6060880152611c6f565b6124cb6124d69161300c565b608088015190611d48565b6122a9565b505050919095611fb190611c6f565b506020813d60201161251d575b81612504602093836117a7565b810103126103d7576125186121ec91611b42565b6121d0565b3d91506124f7565b61253c9150823d8411610d6857610d5a81836117a7565b386121a4565b61255f91503d806000833e61255781836117a7565b810190611c9e565b38612167565b92506020833d60201161259d575b81612580602093836117a7565b810103126103d75761213f612596600094611b42565b9350612106565b3d9150612573565b6125bc9150823d8411610d6857610d5a81836117a7565b386120d9565b9091506020813d6020116125ee575b816125de602093836117a7565b810103126103d75751903861205f565b3d91506125d1565b91506020823d60201161262d575b81612611602093836117a7565b810103126103d7576020612626602493611b42565b9250612023565b3d9150612604565b61264c9150823d8411610d6857610d5a81836117a7565b38611ff6565b9091506020813d602011612686575b8161266e602093836117a7565b810103126103d75761267f90611b42565b9038611fa2565b3d9150612661565b6126a59150823d8411610d6857610d5a81836117a7565b38611f58565b509594919250606084015115612f74576126c86060850151611bb2565b946000966126d96060870151611c01565b946060870151986127136126ec8b61180e565b9a6126fa6040519c8d6117a7565b808c52612709601f199161180e565b0160208c01611be4565b60005b60608901518110156127715761276c906127308a51611bb2565b61273a828b611c5b565b52612745818a611c5b565b508b61275b826127558d51611bb2565b92611c5b565b52612766818d611c5b565b50611c6f565b612716565b5090919295969498939760005b86518110156127ab57806127986127a6926123c88b611c38565b516123ce826123c88d611c38565b61277e565b50989291939698979594976001965b60608a01518810156129655760005b8a5181101561294c5788600019810111610b6a576127ef816123c86000198c018f611c5b565b51600182018211610b6a578a828b612818826123c8838f60018401612251856123c8858c611c5b565b5160808c01511561294457848112801561293c575b61291f575b509150508d60005b84811061285a5750836123c86128559594936123ce93611c5b565b6127c9565b916000198101119050610b6a576128756000198c018f611c5b565b51906128818185611b98565b9081600019810111610b6a578f916128bd8f918f958f916123c8886128af6128b69489946000190190611c5b565b5194611c5b565b5190611d61565b60808d01511561291757858112801561290f575b6128e6575b50506128e190611c6f565b61283a565b94506128e19190612905876123c8876128ff8684611b98565b94611c5b565b5290508d386128d6565b5085156128d1565b8581136128d1565b935060009261293292916123c891611c5b565b528a828b38612832565b50841561282d565b84811361282d565b50919390929661295b90611c6f565b96929093916127ba565b949392919799509497955085519560005b606082015180821015612f63578815612a25578161299391611b98565b976000198981810111610b6a576129ac8a82018e611c5b565b518282810111610b6a578a6123c88f8480878f6129e96129df6129d86129f39a866129fc9e0190611c5b565b5184611b98565b9184890190611c5b565b5201930190611c5b565b51990188611c5b565b51612a10575b612a0b90611c6f565b612976565b97612a1d612a0b91611c6f565b989050612a02565b5050949550959096929197505b8015612f5957604051612a448161178c565b6001815260005b60208110612f4257506040870152604051612a658161178c565b6001815260005b60208110612f2b5750604051612aa391612a858261178c565b600182526020820152604088015190612a9d82611c38565b52611c38565b5060208801516001600160a01b031690612abc8161180e565b90612aca60405192836117a7565b808252612ad9601f199161180e565b0160005b818110612eff57505090612b1b9160405191612af88361178c565b825260208201526020612b0e6040890151611c38565b51015190612a9d82611c38565b5060005b6060840151811015612ef657612b358186611c5b565b5115612eed576004612b478287611c5b565b51612b528385611c5b565b5151906040870151602060018060a01b038d511660405195868092633f4a2d2760e01b82525afa93841561247757612bbf94602091600091612ed0575b50612b9a8789611c5b565b515190604051808098819463657dcce560e01b8352866004840152602483019061195f565b03916001600160a01b03165afa908115612477578c94600092612e90575b5090600491602080612bef898b611c5b565b5101519651604051633f4a2d2760e01b815294859182906001600160a01b03165afa92831561247757600493602091600091612e73575b506040516391f03efd60e01b815294859182906001600160a01b03165afa928315612477578e90600094612e2b575b506080015160405163340f07ad60e11b81529660009488948594612c8d941515936001600160a01b0390931692919060048701611cc3565b038173__$75df3f6366b0557754cd3ba14359105414$__5af490811561247757612d0193600092612e0e575b5060405192612cc784611771565b8352602083015260408201526020612cee81612ce660408c0151611c38565b510151611c38565b5101516020870151916122518383611c5b565b50612d0f6020850151611c6f565b60208501526020860151612d31612d2a8360a0880151611c5b565b5182611ba5565b908110610b58576020870152612d478184611c5b565b5190612d538187611c5b565b519182600019810111610b6a57612d75612d8d91612d94946000190190611c5b565b518a8951918015600014612d99575050600090611ba5565b8752611c6f565b612b1f565b608082015185908a9015612de057612279612dda9460c0612dca612dd49560a0670de0b6b3a7640000960151611c5b565b5191015190611d35565b90611d48565b90611ba5565b612279612e099460c0612dca612e039560a0670de0b6b3a7640000960151611c5b565b90611d61565b612dda565b612e249192503d806000833e61255781836117a7565b9038612cb9565b9350506020833d602011612e6b575b81612e47602093836117a7565b810103126103d757612c8d8e916080612e61600096611b42565b9550509190612c55565b3d9150612e3a565b612e8a9150823d8411610d6857610d5a81836117a7565b38612c26565b915093506020813d602011612ec8575b81612ead602093836117a7565b810103126103d7578b93612ec2600492611b42565b91612bdd565b3d9150612ea0565b612ee79150823d8411610d6857610d5a81836117a7565b38612b8f565b612d9490611c6f565b50505050509150565b602090604051612f0e81611771565b606081526000838201526060604082015282828601015201612add565b602090612f36611d7d565b82828501015201612a6c565b602090612f4d611d7d565b82828501015201612a4b565b5093955050505050565b505094955095909692919750612a32565b60405163af16b31b60e01b8152600490fd5b602090604051612f958161178c565b6060815260008382015282828a01015201611e65565b604051631edbd19360e11b8152600490fd5b6040516001622c3a8160e21b03198152600490fd5b604051635c6726db60e11b8152600490fd5b604051632638e39360e11b8152600490fd5b5060408301516001600160a01b03161515611db6565b6001600160ff1b03811161301d5790565b60405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608490fd5b906060828203126103d75780601f830112156103d7576040519161309683611771565b8290606081019283116103d757905b8282106130b25750505090565b81518152602091820191016130a5565b6020815260606130dd8351826020850152608084019061195f565b6020840151604084810191909152909301516001600160a01b031691015290565b606091600093613181576131289160405194858094819363eb5251a560e01b8352600483016130c2565b03926001600160a01b03165af160009181613151575b5061314a575060001990565b6020015190565b61317391925060603d811161317a575b61316b81836117a7565b810190613073565b903861313e565b503d613161565b6131a191604051948580948193630fafa65f60e11b8352600483016130c2565b03926001600160a01b03165af1600091816131c7575b506131c3575060001990565b5190565b6131e091925060603d811161317a5761316b81836117a7565b90386131b756fea2646970667358221220913215292f95f5f4aaad10fce9b7050999b4eb1c1f44715833c8b177c84206ab64736f6c63430008120033";

type BestDexLensConstructorParams =
  | [linkLibraryAddresses: BestDexLensLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BestDexLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class BestDexLens__factory extends ContractFactory {
  constructor(...args: BestDexLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        BestDexLens__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: BestDexLensLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$75df3f6366b0557754cd3ba14359105414\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/PrimexPricingLibrary.sol:PrimexPricingLibrary"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BestDexLens & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BestDexLens__factory {
    return super.connect(runner) as BestDexLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BestDexLensInterface {
    return new Interface(_abi) as BestDexLensInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BestDexLens {
    return new Contract(address, _abi, runner) as unknown as BestDexLens;
  }
}

export interface BestDexLensLibraryAddresses {
  ["contracts/libraries/PrimexPricingLibrary.sol:PrimexPricingLibrary"]: string;
}
