/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IActivityRewardDistributor,
  IActivityRewardDistributorInterface,
} from "../../../contracts/ActivityRewardDistributor/IActivityRewardDistributor";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        indexed: true,
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ClaimReward",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bucketAddress",
            type: "address",
          },
          {
            internalType: "enum IActivityRewardDistributor.Role",
            name: "role",
            type: "uint8",
          },
        ],
        internalType: "struct IActivityRewardDistributor.BucketWithRole[]",
        name: "bucketsArray",
        type: "tuple[]",
      },
    ],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "rewardPerDay",
        type: "uint256",
      },
    ],
    name: "decreaseRewardPerDay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dns",
    outputs: [
      {
        internalType: "contract IPrimexDNSV3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
    ],
    name: "getBucketAccumulatedReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bucketAddress",
            type: "address",
          },
          {
            internalType: "enum IActivityRewardDistributor.Role",
            name: "role",
            type: "uint8",
          },
        ],
        internalType: "struct IActivityRewardDistributor.BucketWithRole[]",
        name: "bucketsArray",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getClaimableReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserInfoFromBucket",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdatedRewardIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "oldBalance",
            type: "uint256",
          },
        ],
        internalType: "struct IActivityRewardDistributorStorage.UserInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_pmx",
        type: "address",
      },
      {
        internalType: "contract IPrimexDNSV3",
        name: "_dns",
        type: "address",
      },
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
      {
        internalType: "contract ITraderBalanceVault",
        name: "_traderBalanceVault",
        type: "address",
      },
      {
        internalType: "contract IWhiteBlackList",
        name: "_whiteBlackList",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pmx",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "increaseAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardPerDay",
        type: "uint256",
      },
    ],
    name: "setupBucket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "traderBalanceVault",
    outputs: [
      {
        internalType: "contract ITraderBalanceVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBucketV3",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newBalance",
        type: "uint256",
      },
      {
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
    ],
    name: "updateUserActivity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBucketV3",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "newBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
      {
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
    ],
    name: "updateUsersActivities",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "enum IActivityRewardDistributor.Role",
        name: "role",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawPmx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IActivityRewardDistributor__factory {
  static readonly abi = _abi;
  static createInterface(): IActivityRewardDistributorInterface {
    return new Interface(_abi) as IActivityRewardDistributorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IActivityRewardDistributor {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IActivityRewardDistributor;
  }
}
