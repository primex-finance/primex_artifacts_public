/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDebtTokensFactory,
  IDebtTokensFactoryInterface,
} from "../../../contracts/DebtToken/IDebtTokensFactory";

const _abi = [
  {
    inputs: [],
    name: "bucketsFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    name: "createDebtToken",
    outputs: [
      {
        internalType: "contract IDebtToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucketsFactory",
        type: "address",
      },
    ],
    name: "setBucketsFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDebtTokensFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IDebtTokensFactoryInterface {
    return new Interface(_abi) as IDebtTokensFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDebtTokensFactory {
    return new Contract(address, _abi, runner) as unknown as IDebtTokensFactory;
  }
}
