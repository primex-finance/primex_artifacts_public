/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SynchronizationBotLensUniV3TestService,
  SynchronizationBotLensUniV3TestServiceInterface,
} from "../../../contracts/TestnetServices/SynchronizationBotLensUniV3TestService";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IUniswapV3Pool[]",
        name: "pools",
        type: "address[]",
      },
    ],
    name: "getArraySqrtPriceX96",
    outputs: [
      {
        internalType: "uint160[]",
        name: "arraySqrtPriceX96",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
    ],
    name: "getUserBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "nativeBalance",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "assetsBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapRouter",
        name: "_swapRouterUniV3",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams[]",
        name: "params",
        type: "tuple[]",
      },
    ],
    name: "swapUniswapV3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346015576109a9908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806382f8850f146106de57806383dbfa461461056d5763f08642f81461003d57600080fd5b34610342576040366003190112610342576004356001600160a01b03811690819003610342576024359067ffffffffffffffff8211610342573660238301121561034257816004013561008f81610905565b9261009d60405194856108e3565b8184526024602085019260081b8201019036821161034257602401915b81831061049f57505050600073__$183737d697d7aa9b5df9988cbe11bc4947$__905b835181101561049d5760001960a06100f5838761095f565b51015114610416575b61015b60206001600160a01b03610115848861095f565b51511660a0610124858961095f565b51015160405163c37f7f7f60e01b81526001600160a01b039092166004830152336024830152604482015291829081906064820190565b0381865af48015610336576000906103e6575b506000905060206001600160a01b03610187848861095f565b515116604460a0610198868a61095f565b510151604051948593849263095ea7b360e01b84528a600485015260248401525af18015610336576000906103ae575b50506101d4818561095f565b516040805163414bf38960e01b815282516001600160a01b039081166004830152602080850151821660248401529284015162ffffff1660448301526060840151811660648301526080840151608483015260a084015160a483015260c084015160c483015260e09093015190921660e483015281610104816000885af180156103365760009061037d575b5060249190506001600160a01b03610278828761095f565b5151166001600160a01b03606061028f848961095f565b5101511660206001600160a01b036102a7858a61095f565b515116604051958680926370a0823160e01b82523060048301525afa93841561033657600094610347575b50843b1561034257604051636336129b60e11b81526001600160a01b039283166004820152911660248201526044810192909252600082606481865af491821561033657600192610325575b50016100dd565b6000610330916108e3565b3861031e565b6040513d6000823e3d90fd5b600080fd5b90936020823d8211610375575b81610361602093836108e3565b8101031261037257505192386102d2565b80fd5b3d9150610354565b6020823d82116103a6575b81610395602093836108e3565b810103126103725750518190610260565b3d9150610388565b6020823d82116103de575b816103c6602093836108e3565b8101031261037257506103d890610952565b386101c8565b3d91506103b9565b6020823d821161040e575b816103fe602093836108e3565b810103126103725750513861016e565b3d91506103f1565b602460206001600160a01b0361042c848861095f565b515116604051928380926370a0823160e01b82523360048301525afa9081156103365760009161046c575b5060a0610464838761095f565b5101526100fe565b906020823d8211610495575b81610485602093836108e3565b8101031261037257505138610457565b3d9150610478565b005b610100833603126103425760405190610100820182811067ffffffffffffffff821117610557576040526104d2846108cf565b82526104e0602085016108cf565b6020830152604084013562ffffff81168103610342576040830152610507606085016108cf565b60608301526080848101359083015260a0808501359083015260c0808501359083015260e0840135906001600160a01b0382168203610342578260209260e06101009501528152019201916100ba565b634e487b7160e01b600052604160045260246000fd5b34610342576040366003190112610342576004356001600160a01b0381168082036103425760243567ffffffffffffffff8111610342576105b38391369060040161089e565b909131926105c082610905565b926105ce60405194856108e3565b8284526105da83610905565b602085019390601f190136853760005b818110610643575050505060405192839260608401918452606060208501525180915260808301919060005b81811061062a575050504360408301520390f35b8251845285945060209384019390920191600101610616565b6106528183859997989961091d565b356001600160a01b03811690819003610342576020602491604051928380926370a0823160e01b82528960048301525afa908115610336576000916106ac575b50906001916106a1828a61095f565b5201959493956105ea565b906020823d82116106d6575b816106c5602093836108e3565b810103126103725750516001610692565b3d91506106b8565b346103425760203660031901126103425760043567ffffffffffffffff81116103425761070f90369060040161089e565b9061071982610905565b9061072760405192836108e3565b82825261073383610905565b602083019390601f190136853760005b818110610799575050506040519182916020830190602084525180915260408301919060005b818110610777575050500390f35b82516001600160a01b0316845285945060209384019390920191600101610769565b6107a781838596979561091d565b356001600160a01b038116908190036103425760e060049160405192838092633850c7bd851b82525afa90811561033657600091610803575b50906001916107ef828861095f565b90838060a01b031690520193929193610743565b60e0813d8211610896575b8161081b60e093836108e3565b81010312610892578051916001600160a01b03831683036103725760208201518060020b036103725761085060408301610943565b5061085d60608301610943565b5061086a60808301610943565b5060a082015160ff81160361037257509061088a60c06001949301610952565b5090916107e0565b5080fd5b3d915061080e565b9181601f840112156103425782359167ffffffffffffffff8311610342576020808501948460051b01011161034257565b35906001600160a01b038216820361034257565b90601f8019910116810190811067ffffffffffffffff82111761055757604052565b67ffffffffffffffff81116105575760051b60200190565b919081101561092d5760051b0190565b634e487b7160e01b600052603260045260246000fd5b519061ffff8216820361034257565b5190811515820361034257565b805182101561092d5760209160051b01019056fea26469706673582212204ee0e8aec82e18dce1fb210978b26c3f5c72f3d0f0680b3a670a2db80bb44efe64736f6c634300081a0033";

type SynchronizationBotLensUniV3TestServiceConstructorParams =
  | [
      linkLibraryAddresses: SynchronizationBotLensUniV3TestServiceLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SynchronizationBotLensUniV3TestServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class SynchronizationBotLensUniV3TestService__factory extends ContractFactory {
  constructor(
    ...args: SynchronizationBotLensUniV3TestServiceConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        SynchronizationBotLensUniV3TestService__factory.linkBytecode(
          linkLibraryAddresses
        ),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: SynchronizationBotLensUniV3TestServiceLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$183737d697d7aa9b5df9988cbe11bc4947\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SynchronizationBotLensUniV3TestService & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SynchronizationBotLensUniV3TestService__factory {
    return super.connect(
      runner
    ) as SynchronizationBotLensUniV3TestService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SynchronizationBotLensUniV3TestServiceInterface {
    return new Interface(
      _abi
    ) as SynchronizationBotLensUniV3TestServiceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SynchronizationBotLensUniV3TestService {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SynchronizationBotLensUniV3TestService;
  }
}

export interface SynchronizationBotLensUniV3TestServiceLibraryAddresses {
  ["contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"]: string;
}
