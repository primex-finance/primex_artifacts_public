/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BalancerBotLens,
  BalancerBotLensInterface,
} from "../../../contracts/TestnetServices/BalancerBotLens";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IBalancer",
        name: "_vault",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
        ],
        internalType: "struct IBalancerBotLens.PoolUpdateData[]",
        name: "_pools",
        type: "tuple[]",
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokensToReturn",
        type: "address[]",
      },
    ],
    name: "removeAndSetLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610d85908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c63dad110131461002757600080fd5b34610865576060366003190112610865576004356001600160a01b03811681036108655760243567ffffffffffffffff81116108655761006b903690600401610a74565b909160443567ffffffffffffffff8111610865578261008f85923690600401610a74565b9390916000905b8082106101dd57858460005b8281106100ab57005b60249060206001600160a01b036100cb6100c6848888610bf7565b610d3b565b16604051938480926370a0823160e01b82523060048301525afa91821561019b576000926101a7575b5081610105575b60019150016100a2565b600091602090610154906001600160a01b036101256100c6868a8a610bf7565b60405163a9059cbb60e01b81523360048201526024810193909352919586939190921691839182906044820190565b03925af191821561019b5760019261016d575b506100fb565b61018d9060203d8111610194575b6101858183610add565b810190610b15565b5084610167565b503d61017b565b6040513d6000823e3d90fd5b90916020823d82116101d5575b816101c160209383610add565b810103126101d257505190846100f4565b80fd5b3d91506101b4565b6101e8828287610aa5565b6040805163f6c0092760e01b815291356004830152909590866024816001600160a01b0388165afa95861561019b57600096610a1e575b506040516370a0823160e01b81523360048201526020816024816001600160a01b038b165afa90811561019b576000916109ec575b506040516323b872dd60e01b8152336004820152306024820152604481019190915260208160648160006001600160a01b038c165af1801561019b576109d0575b5060405163095ea7b360e01b81526001600160a01b0385811660048301526000196024830152602090829060449082906000908c165af1801561019b576109b4575b506102e3838383610aa5565b604051631f29a8cd60e31b815290356004820152936000856024816001600160a01b0385165afa94851561019b57600090819661088d575b50855161033661032c878787610aa5565b6020810190610b45565b9190500361087b57610346610b7b565b98818a526103548751610bb1565b60208b0152610361610b7b565b91825261036e8751610bb1565b976020830198895260005b8b518051821015610604576001600160a01b0390610398908390610be3565b5116906040516370a0823160e01b8152336004820152602081602481865afa90811561019b576000916105d3575b5080610579575b604051636eb1769f60e11b81523060048201526001600160a01b0388166024820152602081604481875afa90811561019b57600091610548575b50106104e1575b600191508c818b8b8b8b6104308561042a61032c868686610aa5565b90610bf7565b3561043b8686610be3565b51101561049757926104728561046b8161042a610462602098610479986104819c9b610aa5565b88810190610b45565b3592610be3565b5190610c07565b930151610be3565b52600061048f828d51610be3565b525b01610379565b939161032c9061042a926104c2856104c99760006104bc8360206104d09e0151610be3565b52610be3565b5196610aa5565b3590610c07565b6104db828d51610be3565b52610491565b60405163095ea7b360e01b81526001600160a01b0387166004820152600019602482015291602090839060449082906000905af191821561019b5760019261052a575b5061040e565b6105419060203d8111610194576101858183610add565b508d610524565b906020823d8211610571575b8161056160209383610add565b810103126101d25750518f610407565b3d9150610554565b6040516323b872dd60e01b8152336004820152306024820152604481018290526020816064816000885af1801561019b576105b5575b506103cd565b6105cc9060203d8111610194576101858183610add565b508e6105af565b906020823d82116105fc575b816105ec60209383610add565b810103126101d25750518e6103c6565b3d91506105df565b5050989396509890919694939461063a61064f602084015160405192839160016020840152606060408401526080830190610c2a565b6000606083015203601f198101835282610add565b604083015261065f858789610aa5565b356001600160a01b0389163b15610865576106ab92600091604051948592839263172b958560e31b84526004840152306024840152306044840152608060648401526084830190610c5e565b0381836001600160a01b038d165af190811561019b576106ee926107049261086a575b505160405192839160026020840152606060408401526080830190610c2a565b600019606083015203601f198101835282610add565b6040820152610714838587610aa5565b356001600160a01b0387163b1561086557610760916000916040519384928392638bdb391360e01b84526004840152306024840152306044840152608060648401526084830190610c5e565b0381836001600160a01b038b165af1801561019b57610854575b506040516370a0823160e01b81523060048201526020816024816001600160a01b0386165afa90811561019b57600091610821575b5060405163a9059cbb60e01b815233600482015260248101919091529190602090839081600081604481015b03926001600160a01b03165af191821561019b57600192610803575b50019093929193610096565b61081a9060203d8111610194576101858183610add565b50876107f7565b906020823d821161084c575b8161083a60209383610add565b810103126101d25750516107db6107af565b3d915061082d565b600061085f91610add565b8761077a565b600080fd5b600061087591610add565b8b6106ce565b604051633063a1eb60e11b8152600490fd5b9095503d8087833e61089f8183610add565b81016060828203126109b057815167ffffffffffffffff81116109805782019181601f840112156109805782516108d581610b2d565b936108e36040519586610add565b81855260208086019260051b820101908482116109ac57602001915b8183106109885750505060208101519067ffffffffffffffff8211610984570181601f820112156109805780519061093682610b2d565b986109446040519a8b610add565b828a526020808b019360051b8301019384116101d25750602001905b828210610970575050508961031b565b8151815260209182019101610960565b8780fd5b8880fd5b82516001600160a01b03811681036109a8578152602092830192016108ff565b8b80fd5b8a80fd5b8680fd5b6109cb9060203d8111610194576101858183610add565b6102d7565b6109e79060203d8111610194576101858183610add565b610295565b906020823d8211610a16575b81610a0560209383610add565b810103126101d25750516020610254565b3d91506109f8565b90956040823d8211610a6c575b81610a3860409383610add565b810103126101d2578151916001600160a01b0383168303610a68576020600391015110156101d25750948761021f565b5080fd5b3d9150610a2b565b9181601f840112156108655782359167ffffffffffffffff8311610865576020808501948460051b01011161086557565b9190811015610ac75760051b81013590603e1981360301821215610865570190565b634e487b7160e01b600052603260045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610aff57604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610865575180151581036108655790565b67ffffffffffffffff8111610aff5760051b60200190565b903590601e1981360301821215610865570180359067ffffffffffffffff821161086557602001918160051b3603831361086557565b604051906080820182811067ffffffffffffffff821117610aff5760405260006060838181528160208201528160408201520152565b90610bbb82610b2d565b610bc86040519182610add565b8281528092610bd9601f1991610b2d565b0190602036910137565b8051821015610ac75760209160051b010190565b9190811015610ac75760051b0190565b91908203918211610c1457565b634e487b7160e01b600052601160045260246000fd5b906020808351928381520192019060005b818110610c485750505090565b8251845260209384019390920191600101610c3b565b91906080810190835191608082528251809152602060a0830193019060005b818110610d1c5750505060208401519181810360208301526020808451928381520193019060005b818110610d0657505050604084015190808303604082015281519182845260005b838110610cf157505060608060209596600087868801015201511515910152601f8019910116010190565b80602080928401015182828801015201610cc6565b8251855260209485019490920191600101610ca5565b82516001600160a01b0316855260209485019490920191600101610c7d565b356001600160a01b0381168103610865579056fea26469706673582212202811002e00d05c4195515dd011d0e60f3b47d27e1d09402f6432a44625ecaafa64736f6c634300081a0033";

type BalancerBotLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancerBotLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancerBotLens__factory extends ContractFactory {
  constructor(...args: BalancerBotLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BalancerBotLens & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BalancerBotLens__factory {
    return super.connect(runner) as BalancerBotLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerBotLensInterface {
    return new Interface(_abi) as BalancerBotLensInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BalancerBotLens {
    return new Contract(address, _abi, runner) as unknown as BalancerBotLens;
  }
}
