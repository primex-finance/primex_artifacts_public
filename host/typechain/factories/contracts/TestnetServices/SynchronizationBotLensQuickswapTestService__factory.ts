/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SynchronizationBotLensQuickswapTestService,
  SynchronizationBotLensQuickswapTestServiceInterface,
} from "../../../contracts/TestnetServices/SynchronizationBotLensQuickswapTestService";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAlgebraPool[]",
        name: "pools",
        type: "address[]",
      },
    ],
    name: "getArraySqrtPriceX96",
    outputs: [
      {
        internalType: "uint160[]",
        name: "arraySqrtPriceX96",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
    ],
    name: "getUserBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "nativeBalance",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "assetsBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapRouter",
        name: "_swapRouterQuickswap",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "limitSqrtPrice",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams[]",
        name: "params",
        type: "tuple[]",
      },
    ],
    name: "swapWithQuickswap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576109f1908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b60009060e08235811c90816344f8630e1461038a57816382f8850f146101c757506383dbfa461461004457600080fd5b346101c357826003193601126101c3578035916001600160a01b03808416918285036101c057602494853567ffffffffffffffff81116101bc5761008f909493929436908701610901565b929091319361009d846108d0565b976100aa8a51998a610898565b8489526100b6856108d0565b97602095868b0199601f1901368b37885b818110610116575050505050505085519460608601928652606082870152518092526080850193925b82811061010257438787015285850386f35b8351855293810193928101926001016100f0565b6101258183899c9a9b9c61098e565b358681168091036101a7578985918f51928380926370a0823160e01b82528a898301525afa9081156101b257908d92918a91610179575b5061016a8261017094610957565b52610932565b989796986100c7565b809293508b8092503d83116101ab575b6101938183610898565b810103126101a757518c919061016a61015c565b8880fd5b503d610189565b8e513d8b823e3d90fd5b8280fd5b80fd5b5080fd5b929050346101c057602090816003193601126101c057823567ffffffffffffffff81116101c3578591846101ff879336908301610901565b93610209856108d0565b9261021687519485610898565b858452610222866108d0565b8489019690601f1901368837855b81811061028057505050505083519485948186019282875251809352850193925b82811061026057505050500390f35b83516001600160a01b031685528695509381019392810192600101610251565b6102918183879c99989a9b9c61098e565b6001600160a01b039035818116908190036103755790858593928d51948580926339db007960e21b82525afa9081156103805788916102ee575b6102e393506102da838c610957565b91169052610932565b989796949598610230565b919290508581813d8311610379575b6103078183610898565b810103126103755780519082821682036101a757898101518060020b036101a7579061036e60c0838f610340906102e39897960161099e565b5061034d6060820161099e565b5061035a608082016109ad565b5061036760a082016109ad565b5001610981565b50906102cb565b8780fd5b503d6102fd565b8c513d8a823e3d90fd5b939050346101bc57806003193601126101bc576001600160a01b038235818116949193908590036101c35760249467ffffffffffffffff90863582811161089457366023820112156108945780840135986103e48a6108d0565b916103f188519384610898565b8a835260209a8a838d86019202830101913683116101a7579499948b01905b8282106107f55750505050849173__$183737d697d7aa9b5df9988cbe11bc4947$__925b82518110156107f15760806000198161044d8487610957565b5101511461077b575b826104618386610957565b5151168c88836104718689610957565b5101518c5163c37f7f7f60e01b81526001600160a01b039094169184019182523360208301526040820152829081906060010381895af48015610771578d898e8c948f9461073e575b508d886104c7898c610957565b51511691876104d68a8d610957565b510151915195869463095ea7b360e01b86528501528301528160449586925af1801561069f578c8f938f909588968f8f958f978d908c926106d6575b50938a938460c09461052b60e49b99958e9d9b99610957565b519481519e8f9d8e809d63178ca23160e31b8252838a511691015287015116908b0152840151169088015260608201516064880152810151608487015260a081015160a487015201511660c48401525af1801561066257908c916106a9575b505089826105988386610957565b515116838a6105a78588610957565b51015116908d856105b88689610957565b5151168c51948580926370a0823160e01b82528d30908301525afa92831561069f578a93610670575b50863b1561066c578a51636336129b60e11b81526001600160a01b039182168a820190815292909116602083015260408201929092528890829081906060010381885af480156106625761063f575b5061063a90610932565b610434565b85811161065057885261063a610630565b634e487b7160e01b8852604187528a88fd5b89513d8a823e3d90fd5b8980fd5b9092508d81813d8311610698575b6106888183610898565b8101031261066c575191386105e1565b503d61067e565b8b513d8c823e3d90fd5b813d83116106cf575b6106bc8183610898565b810103126106cb578a3861058a565b8680fd5b503d6106b2565b98505050509593509550505081813d8311610737575b6106f68183610898565b8101031261066c5760e4898f938f8f908f8f93918b998a93848f9461052b8f60c0978f9e61072390610981565b5095999b9d5095999b505094505093610512565b503d6106ec565b935050508092503d831161076a575b6107578183610898565b8101031261037557878a8d898e386104ba565b503d61074d565b8a513d8b823e3d90fd5b8a8c846107888588610957565b5151168b51928380926370a0823160e01b8252338d8301525afa9081156107715789916107c4575b50816107bc8487610957565b510152610456565b90508c81813d83116107ea575b6107db8183610898565b810103126101a75751386107b0565b503d6107d1565b8680f35b83829b969b3603126101a757895184810181811089821117610882578b5261081c836108e8565b81528d61082a8185016108e8565b908201526108398b84016108e8565b8b820152606080840135908201526080808401359082015260a0808401359082015260c080840135908d8216820361087e578201528152949994908301908c01610410565b8b80fd5b634e487b7160e01b8b5260418a528d8bfd5b8480fd5b90601f8019910116810190811067ffffffffffffffff8211176108ba57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108ba5760051b60200190565b35906001600160a01b03821682036108fc57565b600080fd5b9181601f840112156108fc5782359167ffffffffffffffff83116108fc576020808501948460051b0101116108fc57565b60001981146109415760010190565b634e487b7160e01b600052601160045260246000fd5b805182101561096b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b519081151582036108fc57565b919081101561096b5760051b0190565b519061ffff821682036108fc57565b519060ff821682036108fc5756fea2646970667358221220136bee7adec39e938dcfb87e527c8c8a636e9f948bed3a5c5f1566a1eb4d01d564736f6c63430008120033";

type SynchronizationBotLensQuickswapTestServiceConstructorParams =
  | [
      linkLibraryAddresses: SynchronizationBotLensQuickswapTestServiceLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SynchronizationBotLensQuickswapTestServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class SynchronizationBotLensQuickswapTestService__factory extends ContractFactory {
  constructor(
    ...args: SynchronizationBotLensQuickswapTestServiceConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        SynchronizationBotLensQuickswapTestService__factory.linkBytecode(
          linkLibraryAddresses
        ),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: SynchronizationBotLensQuickswapTestServiceLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$183737d697d7aa9b5df9988cbe11bc4947\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SynchronizationBotLensQuickswapTestService & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SynchronizationBotLensQuickswapTestService__factory {
    return super.connect(
      runner
    ) as SynchronizationBotLensQuickswapTestService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SynchronizationBotLensQuickswapTestServiceInterface {
    return new Interface(
      _abi
    ) as SynchronizationBotLensQuickswapTestServiceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SynchronizationBotLensQuickswapTestService {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SynchronizationBotLensQuickswapTestService;
  }
}

export interface SynchronizationBotLensQuickswapTestServiceLibraryAddresses {
  ["contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"]: string;
}
