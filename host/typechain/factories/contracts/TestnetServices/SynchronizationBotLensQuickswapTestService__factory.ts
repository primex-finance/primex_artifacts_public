/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SynchronizationBotLensQuickswapTestService,
  SynchronizationBotLensQuickswapTestServiceInterface,
} from "../../../contracts/TestnetServices/SynchronizationBotLensQuickswapTestService";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAlgebraPool[]",
        name: "pools",
        type: "address[]",
      },
    ],
    name: "getArraySqrtPriceX96",
    outputs: [
      {
        internalType: "uint160[]",
        name: "arraySqrtPriceX96",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
    ],
    name: "getUserBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "nativeBalance",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "assetsBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapRouter",
        name: "_swapRouterQuickswap",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "limitSqrtPrice",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams[]",
        name: "params",
        type: "tuple[]",
      },
    ],
    name: "swapWithQuickswap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460155761098e908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806344f8630e1461038257806382f8850f146101c2576383dbfa461461003d57600080fd5b346101bd5760403660031901126101bd576004356001600160a01b0381168082036101bd5760243567ffffffffffffffff81116101bd57610083839136906004016108c3565b9091319261009082610897565b9261009e6040519485610875565b8284526100aa83610897565b602085019390601f190136853760005b818110610113575050505060405192839260608401918452606060208501525180915260808301919060005b8181106100fa575050504360408301520390f35b82518452859450602093840193909201916001016100e6565b6101228183859997989961092b565b356001600160a01b038116908190036101bd576020602491604051928380926370a0823160e01b82528960048301525afa9081156101b15760009161017c575b5090600191610171828a6108f4565b5201959493956100ba565b906020823d82116101a9575b8161019560209383610875565b810103126101a65750516001610162565b80fd5b3d9150610188565b6040513d6000823e3d90fd5b600080fd5b346101bd5760203660031901126101bd5760043567ffffffffffffffff81116101bd576101f39036906004016108c3565b906101fd82610897565b9061020b6040519283610875565b82825261021783610897565b602083019390601f190136853760005b81811061027d575050506040519182916020830190602084525180915260408301919060005b81811061025b575050500390f35b82516001600160a01b031684528594506020938401939092019160010161024d565b61028b81838596979561092b565b356001600160a01b038116908190036101bd5760e0600491604051928380926339db007960e21b82525afa9081156101b1576000916102e8575b50906001916102d482886108f4565b90838060a01b031690520193929193610227565b60e0813d821161037a575b8161030060e09383610875565b81010312610376578051916001600160a01b03831683036101a65760208201518060020b036101a657509061036e60c0836103406040600197960161093b565b5061034d6060820161093b565b5061035a6080820161094a565b5061036760a0820161094a565b500161091e565b5090916102c5565b5080fd5b3d91506102f3565b346101bd5760403660031901126101bd576004356001600160a01b038116908190036101bd576024359067ffffffffffffffff82116101bd57366023830112156101bd5781600401356103d481610897565b926103e26040519485610875565b818452602460e0602086019302820101903682116101bd57602401915b8183106107c057505050600073__$183737d697d7aa9b5df9988cbe11bc4947$__905b83518110156107be57600019608061043a83876108f4565b51015114610737575b6104a060206001600160a01b0361045a84886108f4565b515116608061046985896108f4565b51015160405163c37f7f7f60e01b81526001600160a01b039092166004830152336024830152604482015291829081906064820190565b0381865af480156101b157600090610707575b506000905060206001600160a01b036104cc84886108f4565b515116604460806104dd868a6108f4565b510151604051948593849263095ea7b360e01b84528a600485015260248401525af180156101b1576000906106cf575b505061051981856108f4565b516040805163178ca23160e31b815282516001600160a01b039081166004830152602080850151821660248401529284015181166044830152606084015160648301526080840151608483015260a084015160a483015260c09093015190921660c48301528160e4816000885af180156101b15760009061069e575b5060249190506001600160a01b036105ad82876108f4565b5151166001600160a01b0360406105c484896108f4565b5101511660206001600160a01b036105dc858a6108f4565b515116604051958680926370a0823160e01b82523060048301525afa9384156101b15760009461066b575b50843b156101bd57604051636336129b60e11b81526001600160a01b039283166004820152911660248201526044810192909252600082606481865af49182156101b15760019261065a575b5001610422565b600061066591610875565b85610653565b90936020823d8211610696575b8161068560209383610875565b810103126101a65750519287610607565b3d9150610678565b6020823d82116106c7575b816106b660209383610875565b810103126101a65750518190610595565b3d91506106a9565b6020823d82116106ff575b816106e760209383610875565b810103126101a657506106f99061091e565b8561050d565b3d91506106da565b6020823d821161072f575b8161071f60209383610875565b810103126101a6575051856104b3565b3d9150610712565b602460206001600160a01b0361074d84886108f4565b515116604051928380926370a0823160e01b82523360048301525afa9081156101b15760009161078d575b50608061078583876108f4565b510152610443565b906020823d82116107b6575b816107a660209383610875565b810103126101a657505185610778565b3d9150610799565b005b60e0833603126101bd576040519060e0820182811067ffffffffffffffff82111761085f576040526107f1846108af565b82526107ff602085016108af565b6020830152610810604085016108af565b6040830152606084810135908301526080808501359083015260a0808501359083015260c0840135906001600160a01b03821682036101bd578260209260c060e09501528152019201916103ff565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761085f57604052565b67ffffffffffffffff811161085f5760051b60200190565b35906001600160a01b03821682036101bd57565b9181601f840112156101bd5782359167ffffffffffffffff83116101bd576020808501948460051b0101116101bd57565b80518210156109085760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b519081151582036101bd57565b91908110156109085760051b0190565b519061ffff821682036101bd57565b519060ff821682036101bd5756fea26469706673582212205021fc3652a0eccdfc4f83c72e371f315d6cbf8139924160d940d1a41b90c2d064736f6c634300081a0033";

type SynchronizationBotLensQuickswapTestServiceConstructorParams =
  | [
      linkLibraryAddresses: SynchronizationBotLensQuickswapTestServiceLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SynchronizationBotLensQuickswapTestServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class SynchronizationBotLensQuickswapTestService__factory extends ContractFactory {
  constructor(
    ...args: SynchronizationBotLensQuickswapTestServiceConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        SynchronizationBotLensQuickswapTestService__factory.linkBytecode(
          linkLibraryAddresses
        ),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: SynchronizationBotLensQuickswapTestServiceLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$183737d697d7aa9b5df9988cbe11bc4947\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SynchronizationBotLensQuickswapTestService & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SynchronizationBotLensQuickswapTestService__factory {
    return super.connect(
      runner
    ) as SynchronizationBotLensQuickswapTestService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SynchronizationBotLensQuickswapTestServiceInterface {
    return new Interface(
      _abi
    ) as SynchronizationBotLensQuickswapTestServiceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SynchronizationBotLensQuickswapTestService {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SynchronizationBotLensQuickswapTestService;
  }
}

export interface SynchronizationBotLensQuickswapTestServiceLibraryAddresses {
  ["contracts/libraries/TokenTransfersLibrary.sol:TokenTransfersLibrary"]: string;
}
