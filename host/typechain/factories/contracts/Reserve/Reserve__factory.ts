/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Reserve,
  ReserveInterface,
} from "../../../contracts/Reserve/Reserve";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DS_MATH_ADD_OVERFLOW",
    type: "error",
  },
  {
    inputs: [],
    name: "DS_MATH_MUL_OVERFLOW",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "burnAmount",
        type: "uint256",
      },
    ],
    name: "BurnAmountCalculated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferFromReserve",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minAmountToBeLeft",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minPercentOfTotalSupplyToBeLeft",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct IReserveStorage.TransferRestrictions",
        name: "newTransferRestrictions",
        type: "tuple",
      },
    ],
    name: "TransferRestrictionsChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IPrimexDNSV3",
        name: "_dns",
        type: "address",
      },
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_bucketName",
        type: "string",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "payBonus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBucketV3",
        name: "_bucket",
        type: "address",
      },
    ],
    name: "paybackPermanentLoss",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minAmountToBeLeft",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minPercentOfTotalSupplyToBeLeft",
            type: "uint256",
          },
        ],
        internalType: "struct IReserveStorage.TransferRestrictions",
        name: "newTransferRestrictions",
        type: "tuple",
      },
    ],
    name: "setTransferRestrictions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "transferRestrictions",
    outputs: [
      {
        internalType: "uint256",
        name: "minAmountToBeLeft",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minPercentOfTotalSupplyToBeLeft",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferToTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161158a90816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816301ffc9a7146112e4575080633f4ba83a146111a7578063485cc95514610f0e5780635c975abb14610eeb578063600a330d14610da75780638456cb5914610c975780639607853c146109e55780639dd267e61461046a578063acc468b2146104295763f74803491461009357600080fd5b3461042557602090816003193601126104215783356001600160a01b038181169391849003610239576100c46114ed565b6002606554146103de5760026065558060c9541683516306fdde0360e01b815286818981895afa9081156102de578791610356575b5060809061011a928651808095819463481d98fb60e11b83528d83016114a2565b03915afa9081156102a757859183918891610325575b501603610315578251634872d32760e01b815282818881885afa9081156102a75786916102e8575b5083516358a06f0760e01b815283818981895afa9081156102de5790849188916102b1575b5060248651809581936370a0823160e01b8352308d840152165afa80156102a7578690610255575b7f5110ca98aa61b28a2d94d7c3b7c2ed00a1db4336fecf3857e3766d3ee9727894925080821161024d5750915b8351838152a1801561023d57938394833b1561023957602485928385519687948593634f43f23960e01b85528401525af19081156102305750610219575b50600160655580f35b61022290611364565b61022d578038610210565b80fd5b513d84823e3d90fd5b8480fd5b8151633ce1751760e21b81528590fd5b9050916101d2565b508282813d83116102a0575b61026b818361138e565b8101031261029b577f5110ca98aa61b28a2d94d7c3b7c2ed00a1db4336fecf3857e3766d3ee972789491516101a5565b600080fd5b503d610261565b84513d88823e3d90fd5b6102d19150823d84116102d7575b6102c9818361138e565b8101906114ce565b3861017d565b503d6102bf565b85513d89823e3d90fd5b90508281813d831161030e575b6102ff818361138e565b8101031261029b575138610158565b503d6102f5565b8251631b7091f560e01b81528690fd5b610346915060803d811161034f575b61033e818361138e565b81019061144d565b50505038610130565b503d610334565b90503d8088833e610367818361138e565b81019084818303126103da5780519067ffffffffffffffff82116103d6570181601f820112156103da5780519061039d826113b0565b926103aa8851948561138e565b8284528683830101116103d657916103ce61011a949260809488808501910161147f565b9150916100f9565b8880fd5b8780fd5b825162461bcd60e51b8152808701839052601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b5080fd5b5034610425576020366003190112610425579081906001600160a01b0361044e61134e565b16815260cb602052206001815491015482519182526020820152f35b5082903461042157806003193601126104215761048561134e565b6024918235916104936114ed565b60018060a01b03948560ca54169183518093632474521560e21b82527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b6384830152338883015281604460209687935afa9081156106f25789916109b0575b50156109a15786168351634c66358f60e11b81526101209081818581865afa9182156108a857908592918b926108de575b50500151156108cf5783516358a06f0760e01b815283818481855afa9081156106f2579088918a916108b2575b50169584516370a0823160e01b81523084820152848183818b5afa9081156108a8578a91610877575b50878a5260cb8552858a209161058f888454611531565b821015928361074a575b5050501561073b578660c9541690888551858186816361d027b360e01b978882525afa9081156107315782916106fc575b50823b1561042557865163f3fef3a360e01b81526001600160a01b03909116858201908152602081018990529092839182908490829060400103925af180156106f2576106df575b5082908760c954169285518094819382525afa9081156106d557879161066e575b50907f478dbd1afe37404eb4ec0d3c4e3e89bfea0891deacfaf6c6b9686831ab253bec9583926060969594519586521690840152820152a180f35b9493929180915085813d83116106ce575b610689818361138e565b810103126106ca577f478dbd1afe37404eb4ec0d3c4e3e89bfea0891deacfaf6c6b9686831ab253bec956106be606096611439565b91929394955095610633565b8680fd5b503d61067f565b83513d89823e3d90fd5b976106eb849299611364565b9790610612565b85513d8b823e3d90fd5b90508581813d831161072a575b610713818361138e565b810103126104255761072490611439565b8b6105ca565b503d610709565b87513d84823e3d90fd5b50825163d56f855960e01b8152fd5b87516318160ddd60e01b8152929350909190868287818d5afa91821561086d578c92610839575b50600101548b9181159182156107f2575b5050156107e2576706f05b59d3b200008101918282116107d1575081106107c15786670de0b6b3a76400006107b79204611531565b1115898080610599565b8551630a77254f60e01b81528490fd5b634e487b7160e01b8c52601186528bfd5b8651631550e8b760e01b81528590fd5b818192939450028281048214831517156108275780936108155704148c80610782565b634e487b7160e01b8e5260128852848efd5b634e487b7160e01b8e5260118852848efd5b9091508681813d8311610866575b610851818361138e565b810103126108625751906001610771565b8b80fd5b503d610847565b88513d8e823e3d90fd5b90508481813d83116108a1575b61088e818361138e565b8101031261089d57518a610578565b8980fd5b503d610884565b86513d8c823e3d90fd5b6108c99150853d87116102d7576102c9818361138e565b8a61054f565b5082516379bb149f60e11b8152fd5b915091508082813d831161099a575b6108f7818361138e565b8101031261089d57855190810181811067ffffffffffffffff821117610988578652815191898316830361098457859282526109348382016113cc565b838301528681015187830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201528a80610522565b8a80fd5b634e487b7160e01b8b5260418552888bfd5b503d6108ed565b50825163036be76f60e61b8152fd5b90508381813d83116109de575b6109c7818361138e565b810103126103d6576109d8906113cc565b896104f1565b503d6109bd565b503461042557606036600319011261042557823567ffffffffffffffff81116104215736602382011215610421578084013590610a21826113b0565b91610a2e8451938461138e565b80835236602482840101116102395760249392918186926020968793018386013783010152610a5b611338565b610a86608060018060a01b03938460c954168651808095819463481d98fb60e11b83528d83016114a2565b03915afa9081156102a7579083918791610c76575b5084516358a06f0760e01b815293911685848981845afa9384156102de57889187918996610c57575b508651631f1b131360e31b815292839182905afa9081156102de57829187918991610c1e575b5089875180948193637988abe160e11b8352165afa9081156102de578791610c01575b50811633148015610bb6575b15610ba657835163a9059cbb60e01b81526001600160a01b0392909216968201968752604435602088015294959094849286928390036040019183918991165af1908115610b9d5750610b6a578280f35b81813d8311610b96575b610b7e818361138e565b8101031261042557610b8f906113cc565b5038808280f35b503d610b74565b513d85823e3d90fd5b835163f6bcc85960e01b81528790fd5b508351631c585d4d60e21b8152858189818786165afa9081156102de578791610be4575b5081163314610b19565b610bfb9150863d88116102d7576102c9818361138e565b38610bda565b610c189150863d88116102d7576102c9818361138e565b38610b0d565b92505081813d8311610c50575b610c35818361138e565b810103126106ca575181811681036106ca5785829138610aea565b503d610c2b565b610c6f919650823d84116102d7576102c9818361138e565b9438610ac4565b610c8e915060803d811161034f5761033e818361138e565b50505038610a9b565b50823461042157826003193601126104215760ca548251632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb8382015233602482015290602090829060449082906001600160a01b03165afa908115610d9a578491610d5d575b5015610d4f575060207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891610d3a6114ed565b600160ff19603354161760335551338152a180f35b905163036be76f60e61b8152fd5b90506020813d8211610d92575b81610d776020938361138e565b81010312610d8e57610d88906113cc565b84610d07565b8380fd5b3d9150610d6a565b50505051903d90823e3d90fd5b503461042557606036600319011261042557610dc161134e565b90806023193601126104215760ca548151632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63868201523360248201526020916001600160a01b03919083908290604490829086165afa9081156102a7578691610eb2575b5015610ea25760443593670de0b6b3a76400008511610e92577fdcb30d139e0205cf87041969dcdac479c90699e67d7c0e969c66348b792dbe5194959650169384865260cb8252828620918160016024359485815501558351928352820152a280f35b83516380febb2d60e01b81528790fd5b825163036be76f60e61b81528690fd5b90508281813d8311610ee4575b610ec9818361138e565b81010312610ee057610eda906113cc565b38610e2f565b8580fd5b503d610ebf565b503461042557816003193601126104255760209060ff6033541690519015158152f35b50823461042157816003193601126104215780356001600160a01b03818116939184900361023957610f3e611338565b9385549460ff8660081c16159283809461119a575b8015611183575b156111295760ff1987811660011789559684611118575b5084516301ffc9a760e01b80825263081e57a760e31b8883015260209791908882602481895afa91821561110e578b926110d7575b5081611066575b501561105857506bffffffffffffffffffffffff60a01b91168160ca54161760ca5560c954161760c95561101585549460ff8660081c1690610fee826113d9565b610ff7826113d9565b60335416603355611007816113d9565b611010816113d9565b6113d9565b6001606555611022578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989261ff00191684555160018152a18180808380f35b855163044aa57560e41b8152fd5b8751908152637965db0b60e01b83820152905087816024818787165afa9081156110cd578a91611098575b508a610fad565b90508781813d83116110c6575b6110af818361138e565b8101031261089d576110c0906113cc565b8a611091565b503d6110a5565b87513d8c823e3d90fd5b9091508881813d8311611107575b6110ef818361138e565b8101031261098457611100906113cc565b908b610fa6565b503d6110e5565b88513d8d823e3d90fd5b61ffff191661010117885588610f71565b845162461bcd60e51b8152602081880152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610f5a5750600160ff881614610f5a565b50600160ff881610610f53565b503461042557816003193601126104255760ca548151632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d885820152336024820152602092918390829060449082906001600160a01b03165afa9081156112da5784916112a5575b5015611296576033549360ff85161561125e57507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa929360ff191660335551338152a180f35b82606492519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b5163036be76f60e61b81528390fd5b90508281813d83116112d3575b6112bc818361138e565b81010312610d8e576112cd906113cc565b38611218565b503d6112b2565b82513d86823e3d90fd5b83908534610421576020366003190112610421573563ffffffff60e01b8116809103610421576020925063d4cb1bcb60e01b8114908115611327575b5015158152f35b6301ffc9a760e01b14905083611320565b602435906001600160a01b038216820361029b57565b600435906001600160a01b038216820361029b57565b67ffffffffffffffff811161137857604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761137857604052565b67ffffffffffffffff811161137857601f01601f191660200190565b5190811515820361029b57565b156113e057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b51906001600160a01b038216820361029b57565b919082608091031261029b5761146282611439565b916020810151600381101561029b57916060604083015192015190565b60005b8381106114925750506000910152565b8181015183820152602001611482565b604091602082526114c2815180928160208601526020868601910161147f565b601f01601f1916010190565b9081602091031261029b57516001600160a01b038116810361029b5790565b60ff603354166114f957565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b9190820180921161153e57565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b9ffdb7afe2d6b6c3436d82c996f0a6bafd68499e4f60231d8b3a6312aa54d0564736f6c63430008120033";

type ReserveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReserveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reserve__factory extends ContractFactory {
  constructor(...args: ReserveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Reserve & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Reserve__factory {
    return super.connect(runner) as Reserve__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReserveInterface {
    return new Interface(_abi) as ReserveInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Reserve {
    return new Contract(address, _abi, runner) as unknown as Reserve;
  }
}
