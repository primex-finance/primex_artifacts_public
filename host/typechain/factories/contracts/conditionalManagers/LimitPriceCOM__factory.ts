/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LimitPriceCOM,
  LimitPriceCOMInterface,
} from "../../../contracts/conditionalManagers/LimitPriceCOM";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IBucketV3",
            name: "bucket",
            type: "address",
          },
          {
            internalType: "address",
            name: "positionAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "depositAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "protocolFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "leverage",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "shouldOpenPosition",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedConditionsAt",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "extraParams",
            type: "bytes",
          },
        ],
        internalType: "struct LimitOrderLibrary.LimitOrder",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_exchangeRate",
        type: "uint256",
      },
    ],
    name: "canBeFilledAfterSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
    ],
    name: "getLimitPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_primexDNS",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceOracle",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_keeperRewardDistributor",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "keeperRewardDistributor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pm",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "primexDNS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a080604052346100f9576020816109ed803803809161001f82856100fe565b8339810103126100f957516001600160a01b0381168082036100f9576040516301ffc9a760e01b8152637965db0b60e01b600482015290602090829060249082905afa9081156100ed576000916100ab575b5015610099576080526040516108b59081610138823960805181818161013e015261055d0152f35b60405163044aa57560e41b8152600490fd5b6020813d6020116100e5575b816100c4602093836100fe565b810103126100e157519081151582036100de575038610071565b80fd5b5080fd5b3d91506100b7565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761012157604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146106725750806303e49e4a146105e25780632630c12f146105b95780633f4a2d271461058c5780637b103999146105475780637e0d87fc146104dd5780638970cdff146104b4578063e92d529a1461048b5763f8c8765e1461008257600080fd5b34610486576080366003190112610486576004356001600160a01b03811690818103610486576024356001600160a01b0381169290839003610486576044356001600160a01b03811690819003610486576064356001600160a01b0381169190829003610486576000549260ff8460081c161593848095610479575b8015610462575b156104065760ff198116600117600055846103f4575b50604051632474521560e21b8152600060048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156102e8576000916103d5575b50156103c3576040516301ffc9a760e01b8152633f9940a760e11b600482015290602090829060249082905afa9081156102e8576000916103a4575b508061034c575b806102f4575b80610280575b1561026e576000549362010000600160b01b039060101b16948562010000600160b01b03198616176000556001600160601b0360a01b60015416176001556001600160601b0360a01b60025416176002556001600160601b0360a01b600354161760035561023057005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b60405163044aa57560e41b8152600490fd5b506040516301ffc9a760e01b8152631e42d3e560e01b6004820152602081602481865afa9081156102e8576000916102b9575b506101c6565b6102db915060203d6020116102e1575b6102d3818361073d565b810190610867565b386102b3565b503d6102c9565b6040513d6000823e3d90fd5b506040516301ffc9a760e01b8152633d79d7fb60e11b6004820152602081602481855afa9081156102e85760009161032d575b506101c0565b610346915060203d6020116102e1576102d3818361073d565b38610327565b506040516301ffc9a760e01b8152639bded6bb60e01b6004820152602081602481895afa9081156102e857600091610385575b506101ba565b61039e915060203d6020116102e1576102d3818361073d565b3861037f565b6103bd915060203d6020116102e1576102d3818361073d565b386101b3565b60405163036be76f60e61b8152600490fd5b6103ee915060203d6020116102e1576102d3818361073d565b38610177565b61ffff1916610101176000553861011b565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156101055750600160ff821614610105565b50600160ff8216106100fe565b600080fd5b34610486576000366003190112610486576003546040516001600160a01b039091168152602090f35b34610486576000366003190112610486576002546040516001600160a01b039091168152602090f35b346104865760203660031901126104865760043567ffffffffffffffff81116104865761051060209136906004016106dd565b9060405161051d8161070b565b600081529180610533575b505051604051908152f35b610540925081019061075f565b8280610528565b34610486576000366003190112610486576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346104865760003660031901126104865760005460405160109190911c6001600160a01b03168152602090f35b34610486576000366003190112610486576001546040516001600160a01b039091168152602090f35b346104865760803660031901126104865760043567ffffffffffffffff8111610486576101c09060031990360301126104865760243567ffffffffffffffff8111610486576106359036906004016106dd565b906044359067ffffffffffffffff82116104865760209261065d6106689336906004016106dd565b50506064359161077d565b6040519015158152f35b34610486576020366003190112610486576004359063ffffffff60e01b8216809203610486576020916301f24f2560e11b81149081156106cc575b81156106bb575b5015158152f35b6301ffc9a760e01b149050836106b4565b634362f8d160e11b811491506106ad565b9181601f840112156104865782359167ffffffffffffffff8311610486576020838186019501011161048657565b6020810190811067ffffffffffffffff82111761072757604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761072757604052565b9081602091031261048657604051906107778261070b565b35815290565b90801561085f57604051916101a0830183811067ffffffffffffffff821117610727576040526040516107af8161070b565b6000815283526040519160a083019280841067ffffffffffffffff8511176107275761085693604052606081526060602082015260606040820152606080820152606060808201526020850152600060408501526000606085015260006080850152600060a0850152600060c0850152600060e08501526000610100850152600061012085015260006101408501526000610160850152600061018085015281019061075f565b80915251101590565b505050600090565b9081602091031261048657518015158103610486579056fea26469706673582212207cc449aa049c69397f39f1657ea3e8683c3831548bcc6e73780e39baddddc92664736f6c634300081a0033";

type LimitPriceCOMConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LimitPriceCOMConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LimitPriceCOM__factory extends ContractFactory {
  constructor(...args: LimitPriceCOMConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  override deploy(
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_registry, overrides || {}) as Promise<
      LimitPriceCOM & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LimitPriceCOM__factory {
    return super.connect(runner) as LimitPriceCOM__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LimitPriceCOMInterface {
    return new Interface(_abi) as LimitPriceCOMInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LimitPriceCOM {
    return new Contract(address, _abi, runner) as unknown as LimitPriceCOM;
  }
}
