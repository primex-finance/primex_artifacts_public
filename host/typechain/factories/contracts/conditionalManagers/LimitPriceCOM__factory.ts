/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LimitPriceCOM,
  LimitPriceCOMInterface,
} from "../../../contracts/conditionalManagers/LimitPriceCOM";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IBucketV3",
            name: "bucket",
            type: "address",
          },
          {
            internalType: "address",
            name: "positionAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "depositAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "protocolFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "leverage",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "shouldOpenPosition",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedConditionsAt",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "extraParams",
            type: "bytes",
          },
        ],
        internalType: "struct LimitOrderLibrary.LimitOrder",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_exchangeRate",
        type: "uint256",
      },
    ],
    name: "canBeFilledAfterSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
    ],
    name: "getLimitPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_primexDNS",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceOracle",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_keeperRewardDistributor",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "keeperRewardDistributor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pm",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "primexDNS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a080604052346100f8576020816109b3803803809161001f82856100fd565b8339810103126100f857516001600160a01b0381168082036100f8576040516301ffc9a760e01b8152637965db0b60e01b600482015290602090829060249082905afa9081156100ec576000916100ab575b50156100995760805260405161087c9081610137823960805181818161012b01526105280152f35b60405163044aa57560e41b8152600490fd5b6020813d82116100e4575b816100c3602093836100fd565b810103126100e057519081151582036100dd575038610071565b80fd5b5080fd5b3d91506100b6565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761012057604052565b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a7146106335750806303e49e4a146105ac5780632630c12f146105835780633f4a2d27146105575780637b103999146105135780637e0d87fc146104a85780638970cdff1461047f578063e92d529a146104525763f8c8765e1461008657600080fd5b3461044e57608036600319011261044e578035916001600160a01b039182841680850361044a5760249081358581168091036104465760443593868516809503610442576064359287841680940361043e5789549460ff8660081c161595868097610431575b801561041a575b156103c15760ff1981166001178c55866103b0575b5087518099632474521560e21b82528c85830152338383015281604460209c8d937f0000000000000000000000000000000000000000000000000000000000000000165afa90811561030a578c91610393575b501561038357875191898383816301ffc9a760e01b9485825263081e57a760e31b898301525afa92831561030a57908a918d94610364575b5083610314575b836102ba575b83610252575b50505015610244575087549662010000600160b01b039060101b16938462010000600160b01b031989161789556bffffffffffffffffffffffff60a01b918260015416176001558160025416176002556003541617600355610206578480f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249893610100600160b01b0319161784555160018152a1388080808480f35b855163044aa57560e41b8152fd5b8951908152631e42d3e560e01b85820152925090829081875afa9081156102b0578a91610283575b503888816101a6565b6102a39150883d8a116102a9575b61029b8183610704565b810190610726565b3861027a565b503d610291565b87513d8c823e3d90fd5b9250508751828152633d79d7fb60e11b84820152898183818b5afa90811561030a57908a918d916102ed575b50926101a0565b6103049150823d84116102a95761029b8183610704565b386102e6565b89513d8e823e3d90fd5b92505087518281526333ca6d2360e21b8482015289818381885afa90811561030a57908a918d91610347575b509261019a565b61035e9150823d84116102a95761029b8183610704565b38610340565b61037c919450823d84116102a95761029b8183610704565b9238610193565b875163036be76f60e61b81528390fd5b6103aa91508a3d8c116102a95761029b8183610704565b3861015b565b61ffff1916610101178b5538610108565b885162461bcd60e51b8152602081860152602e818401527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156100f35750600160ff8216146100f3565b50600160ff8216106100ec565b8980fd5b8880fd5b8780fd5b8580fd5b8280fd5b50503461047b578160031936011261047b5760035490516001600160a01b039091168152602090f35b5080fd5b50503461047b578160031936011261047b5760025490516001600160a01b039091168152602090f35b503461044e57602036600319011261044e57803567ffffffffffffffff811161050f57602093916104db9136910161069f565b918351906104e8826106d2565b815291806104fb575b5050519051908152f35b610508925081019061073e565b38806104f1565b8380fd5b50503461047b578160031936011261047b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461047b578160031936011261047b579054905160109190911c6001600160a01b03168152602090f35b50503461047b578160031936011261047b5760015490516001600160a01b039091168152602090f35b503461044e576003199060803683011261050f57803567ffffffffffffffff9283821161044a576101c0913603011261050f5760243582811161062f576105f6903690830161069f565b92909460443591821161062c575091610618602095926106239436910161069f565b50506064359161075c565b90519015158152f35b80fd5b8480fd5b9250503461044e57602036600319011261044e573563ffffffff60e01b811680910361044e57602092506301f24f2560e11b811490811561068e575b811561067d575b5015158152f35b6301ffc9a760e01b14905038610676565b634362f8d160e11b8114915061066f565b9181601f840112156106cd5782359167ffffffffffffffff83116106cd57602083818601950101116106cd57565b600080fd5b6020810190811067ffffffffffffffff8211176106ee57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106ee57604052565b908160209103126106cd575180151581036106cd5790565b908160209103126106cd5760405190610756826106d2565b35815290565b929190801561083e576040938451916101a0830167ffffffffffffffff96848210888311176106ee57818152610791826106d2565b600080835291855280519760a089019081118982101761082a579782826108219798999a8294526060928381528360208201528382820152838082015283608082015260208a01528801528601528060808601528060a08601528060c08601528060e08601528061010086015280610120860152806101408601528061016086015261018085015281019061073e565b80915251101590565b634e487b7160e01b83526041600452602483fd5b50600092505056fea26469706673582212200a27cc261fd54ca04308e553326243c596400cf2469ba429bf9bfb2f23811ea664736f6c63430008120033";

type LimitPriceCOMConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LimitPriceCOMConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LimitPriceCOM__factory extends ContractFactory {
  constructor(...args: LimitPriceCOMConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  override deploy(
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_registry, overrides || {}) as Promise<
      LimitPriceCOM & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LimitPriceCOM__factory {
    return super.connect(runner) as LimitPriceCOM__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LimitPriceCOMInterface {
    return new Interface(_abi) as LimitPriceCOMInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LimitPriceCOM {
    return new Contract(address, _abi, runner) as unknown as LimitPriceCOM;
  }
}
