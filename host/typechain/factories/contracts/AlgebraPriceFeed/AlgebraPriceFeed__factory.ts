/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AlgebraPriceFeed,
  AlgebraPriceFeedInterface,
} from "../../../contracts/AlgebraPriceFeed/AlgebraPriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAlgebraFactory",
        name: "algebraV3Factory_",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "twapInterval_",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "registry_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DS_MATH_ADD_OVERFLOW",
    type: "error",
  },
  {
    inputs: [],
    name: "DS_MATH_MUL_OVERFLOW",
    type: "error",
  },
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [],
    name: "algebraV3Factory",
    outputs: [
      {
        internalType: "contract IAlgebraFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
    ],
    name: "getExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "secondsTwapInterval",
        type: "uint32",
      },
    ],
    name: "getQuote",
    outputs: [
      {
        internalType: "uint256",
        name: "quoteAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pools",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IAccessControl",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "setPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_twapInterval",
        type: "uint32",
      },
    ],
    name: "setTwapInterval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "twapInterval",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a080604052346101405760608161159c803803809161001f8285610145565b833981010312610140578051906001600160a01b03821682036101405760208101519063ffffffff8216820361014057604001516001600160a01b0381169290839003610140576040516301ffc9a760e01b8152637965db0b60e01b6004820152602081602481875afa908115610134576000916100f2575b50156100e0576080526001549063ffffffff60a01b9060a01b169060018060c01b031916171760015560405161141d908161017f823960805181818161033d01526106e30152f35b60405163044aa57560e41b8152600490fd5b6020813d60201161012c575b8161010b60209383610145565b810103126101285751908115158203610125575038610098565b80fd5b5080fd5b3d91506100fe565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761016857604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146105d1575080631d27050f146104dd5780633c1d5df0146104b65780634e847fc71461048a578063531aa03e1461044c57806363711362146103e75780637b103999146103be578063901754d71461036c5780639cd1bccd146103275763baaa61be1461008d57600080fd5b34610281576040366003190112610281576100a6610624565b6100ae61063a565b60405163313ce56760e01b81526001600160a01b0383169290602081600481875afa90811561028e576000916102db575b5060206001600160801b036100f5600493611167565b16946040519283809263313ce56760e01b82525afa90811561028e5760009161029a575b5061012661012b91611178565b611167565b60405163313ce56760e01b81529091906020816004816001600160a01b0388165afa90811561028e57600091610238575b509261018861018d9261017461012661019397611178565b9263ffffffff60015460a01c16918861082e565b611189565b92611189565b670de0b6b3a7640000820291808304670de0b6b3a7640000148115171561021157670de0b6b3a7640000830403610227578060011c8201918281116102115782106102005780156101ea5760209104604051908152f35b634e487b7160e01b600052601260045260246000fd5b630a77254f60e01b60005260046000fd5b634e487b7160e01b600052601160045260246000fd5b631550e8b760e01b60005260046000fd5b9390506020843d602011610286575b8161025460209383610650565b810103126102815761018861018d9261017461012661027561019398610820565b9497505050925061015c565b600080fd5b3d9150610247565b6040513d6000823e3d90fd5b90506020813d6020116102d3575b816102b560209383610650565b81010312610281576101266102cc61012b92610820565b9150610119565b3d91506102a8565b90506020813d60201161031f575b816102f660209383610650565b810103126102815760206001600160801b036100f5610316600494610820565b935050506100df565b3d91506102e9565b34610281576000366003190112610281576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461028157604036600319011261028157610385610624565b61038d61063a565b6001600160a01b03918216600090815260208181526040808320938516835292815290829020549151919092168152f35b34610281576000366003190112610281576001546040516001600160a01b039091168152602090f35b34610281576080366003190112610281576004356001600160801b03811681036102815761041361063a565b906044356001600160a01b0381168103610281576064359063ffffffff82168203610281576020936104449361082e565b604051908152f35b3461028157604036600319011261028157602061047861046a610624565b61047261063a565b906107b7565b6040516001600160a01b039091168152f35b346102815760403660031901126102815760206104786104a8610624565b6104b061063a565b90610695565b3461028157600036600319011261028157602063ffffffff60015460a01c16604051908152f35b346102815760203660031901126102815760043563ffffffff8116810361028157600154604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b6360048201523360248201529091906020816044816001600160a01b0387165afa90811561028e57600091610597575b50156105855763ffffffff60a01b1990911660a09190911b63ffffffff60a01b1617600155005b60405163036be76f60e61b8152600490fd5b90506020813d6020116105c9575b816105b260209383610650565b81010312610281576105c390610688565b8361055e565b3d91506105a5565b34610281576020366003190112610281576004359063ffffffff60e01b821680920361028157602091637ba03f2f60e01b8114908115610613575b5015158152f35b6301ffc9a760e01b1490508361060c565b600435906001600160a01b038216820361028157565b602435906001600160a01b038216820361028157565b90601f8019910116810190811067ffffffffffffffff82111761067257604052565b634e487b7160e01b600052604160045260246000fd5b5190811515820361028157565b6001600160a01b0382811690821610156107b257905b60405163d9a641e160e01b81526001600160a01b039283166004820181905282841660248301529092909190602090849060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa92831561028e57600093610765575b506001600160a01b038316918261072c575b50505090565b6000908152602081815260408083206001600160a01b0390941683529290522080546001600160a01b0319169091179055388080610726565b6020939193813d6020116107aa575b8161078160209383610650565b810103126107a65751906001600160a01b03821682036107a357509138610714565b80fd5b5080fd5b3d9150610774565b6106ab565b6001600160a01b0382811690821610156107f7575b6001600160a01b03908116600090815260208181526040808320948416835293905291909120541690565b906107cc565b51906001600160a01b038216820361028157565b519061ffff8216820361028157565b519060ff8216820361028157565b919093929360009461084083836107b7565b6001600160a01b03811615611157575b6001600160a01b03169081610867575b5050505050565b63ffffffff919293949596501680156000146109dd575060e0600491604051928380926339db007960e21b82525afa90811561028e57600091610954575b506001600160a01b03166001600160801b03811161091157806108c791611189565b916001600160a01b03908116911610156108fa576001600160801b036108ee921690611398565b905b3880808080610860565b6001600160801b0361090c9216611315565b6108ee565b8061091b916111e7565b916001600160a01b0390811691161015610942576001600160801b0361090c9216906112c6565b6001600160801b0361090c9216611236565b60e0813d60e0116109d5575b8161096d60e09383610650565b810103126107a65761097e816107fd565b9160208201518060020b036107a3575060c0816109a060406109ce9401610811565b506109ad60608201610811565b506109ba60808201610820565b506109c760a08201610820565b5001610688565b50386108a5565b3d9150610960565b90606090604051906109ef8383610650565b600282526020820191601f19840136843784610a0a826111b4565b526000610a16826111d7565b52604051639d3a524160e01b8152602060048201529051602482018190529092839160448301919060005b8181106111385750505091818060009403915afa918291600093610f20575b5050610a78576040516303875aeb60e51b8152600490fd5b610a8e610a84826111d7565b5160060b916111b4565b5160060b900390667fffffffffffff198212667fffffffffffff8313176102115760060b9060060b81156101ea57667fffffffffffff1981146000198314166102115781810560020b91600082129182610f11575b5050610efd575b60020b6000811215610ef75780600003905b620d89e88211610ee6576001821615610ed4576001600160881b036ffffcb933bd6fad37aa2d162d1a5940015b169160028116610eb8575b60048116610e9c575b60088116610e80575b60108116610e64575b60208116610e48575b60408116610e2c575b60808116610e10575b6101008116610df4575b6102008116610dd8575b6104008116610dbc575b6108008116610da0575b6110008116610d84575b6120008116610d68575b6140008116610d4c575b6180008116610d30575b620100008116610d14575b620200008116610cf9575b620400008116610cde575b6208000016610cc5575b600012610cb6575b63ffffffff8116610cae576000905b60201c60ff91909116016001600160a01b03166001600160801b038111610c6b5780610c2791611189565b916001600160a01b0390811691161015610c54576001600160801b03610c4e921690611398565b906108f0565b6001600160801b03610c669216611315565b610c4e565b80610c75916111e7565b916001600160a01b0390811691161015610c9c576001600160801b03610c669216906112c6565b6001600160801b03610c669216611236565b600190610bfc565b80156101ea5760001904610bed565b6b048a170391f7dc42444e8fa290910260801c90610be5565b6d2216e584f5fa1ea926041bedfe9890920260801c91610bdb565b916e5d6af8dedb81196699c329225ee6040260801c91610bd0565b916f09aa508b5b7a84e1c677de54f3e99bc90260801c91610bc5565b916f31be135f97d08fd981231505542fcfa60260801c91610bba565b916f70d869a156d2a1b890bb3df62baf32f70260801c91610bb0565b916fa9f746462d870fdf8a65dc1f90e061e50260801c91610ba6565b916fd097f3bdfd2022b8845ad8f792aa58250260801c91610b9c565b916fe7159475a2c29b7443b29c7fa6e889d90260801c91610b92565b916ff3392b0822b70005940c7a398e4b70f30260801c91610b88565b916ff987a7253ac413176f2b074cf7815e540260801c91610b7e565b916ffcbe86c7900a88aedcffc83b479aa3a40260801c91610b74565b916ffe5dee046a99a2a811c461f1969c30530260801c91610b6a565b916fff2ea16466c96a3843ec78b326b528610260801c91610b61565b916fff973b41fa98c081472e6896dfb254c00260801c91610b58565b916fffcb9843d60f6159c9db58835c9266440260801c91610b4f565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c91610b46565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91610b3d565b916ffff97272373d413259a46990580e213a0260801c91610b34565b6001600160881b03600160801b610b29565b6315e4079d60e11b60005260046000fd5b80610afc565b627fffff1981146102115760001901610aea565b0760060b151590503880610ae3565b9091923d8082843e610f328184610650565b8201916080818403126107a657805167ffffffffffffffff81116110cf5781019383601f860112156110cf578451610f698161119c565b95610f776040519788610650565b81875260208088019260051b820101908682116110fe57602001915b81831061111e57505050602082015167ffffffffffffffff811161110257820184601f82011215611102578051602080610fcc8361119c565b610fd96040519182610650565b838152019160051b830101918683116110fe57602001905b82821061110657505050604082015167ffffffffffffffff811161110257820184601f820112156111025780519060208061102b8461119c565b6110386040519182610650565b848152019260051b820101908682116110fe57602001915b8183106110d3575050508101519067ffffffffffffffff82116110cf570182601f820112156107a6578051916020806110888561119c565b6110956040519182610650565b858152019360051b8301019384116107a35750602001905b8282106110bf57505050903880610a60565b81518152602091820191016110ad565b8280fd5b82516dffffffffffffffffffffffffffff811681036110fa57815260209283019201611050565b8680fd5b8580fd5b8380fd5b60208091611113846107fd565b815201910190610ff1565b82518060060b81036110fa57815260209283019201610f93565b825163ffffffff16845286945060209384019390920191600101610a41565b506111628383610695565b610850565b60ff16604d811161021157600a0a90565b60ff166012039060ff821161021157565b8181029291811591840414171561021157565b67ffffffffffffffff81116106725760051b60200190565b8051156111c15760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156111c15760400190565b600091600019818309918181029384808510940393808503941461122c5783600160401b11156107a3575090600160401b910990828211900360c01b910360401c1790565b5050505060401c90565b60001981600160801b09918160801b918280851094039380850394146112b95783821115610281578190600160801b09818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b5080925015610281570490565b60009190600019828209918082029384808510940393808503941461130b57600160801b8410156107a35750600160801b910990828211900360801b910360801c1790565b5050505060801c90565b60001981600160c01b09918160c01b918280851094039380850394146112b95783821115610281578190600160c01b09818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b6000919060001982820991808202938480851094039380850394146113dd57600160c01b8410156107a35750600160c01b910990828211900360401b910360c01c1790565b5050505060c01c9056fea2646970667358221220cf10dc5d1eb565a593010cbd82e39a43d6f62e297dc2dfa95119098f853846b964736f6c634300081a0033";

type AlgebraPriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AlgebraPriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AlgebraPriceFeed__factory extends ContractFactory {
  constructor(...args: AlgebraPriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    algebraV3Factory_: AddressLike,
    twapInterval_: BigNumberish,
    registry_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      algebraV3Factory_,
      twapInterval_,
      registry_,
      overrides || {}
    );
  }
  override deploy(
    algebraV3Factory_: AddressLike,
    twapInterval_: BigNumberish,
    registry_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      algebraV3Factory_,
      twapInterval_,
      registry_,
      overrides || {}
    ) as Promise<
      AlgebraPriceFeed & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AlgebraPriceFeed__factory {
    return super.connect(runner) as AlgebraPriceFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlgebraPriceFeedInterface {
    return new Interface(_abi) as AlgebraPriceFeedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AlgebraPriceFeed {
    return new Contract(address, _abi, runner) as unknown as AlgebraPriceFeed;
  }
}
