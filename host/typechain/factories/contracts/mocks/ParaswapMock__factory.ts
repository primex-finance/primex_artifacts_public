/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ParaswapMock,
  ParaswapMockInterface,
} from "../../../contracts/mocks/ParaswapMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "adapter",
            type: "address",
          },
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "toToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expectedAmount",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "index",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "targetExchange",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "percent",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "payload",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "networkFee",
                type: "uint256",
              },
            ],
            internalType: "struct ParaswapMock.Route[]",
            name: "route",
            type: "tuple[]",
          },
          {
            internalType: "address payable",
            name: "partner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feePercent",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes16",
            name: "uuid",
            type: "bytes16",
          },
        ],
        internalType: "struct ParaswapMock.BuyData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "buy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenTransferProxy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expectedAmount",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "fromAmountPercent",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "totalNetworkFee",
                    type: "uint256",
                  },
                  {
                    components: [
                      {
                        internalType: "address payable",
                        name: "adapter",
                        type: "address",
                      },
                      {
                        internalType: "uint256",
                        name: "percent",
                        type: "uint256",
                      },
                      {
                        internalType: "uint256",
                        name: "networkFee",
                        type: "uint256",
                      },
                      {
                        components: [
                          {
                            internalType: "uint256",
                            name: "index",
                            type: "uint256",
                          },
                          {
                            internalType: "address",
                            name: "targetExchange",
                            type: "address",
                          },
                          {
                            internalType: "uint256",
                            name: "percent",
                            type: "uint256",
                          },
                          {
                            internalType: "bytes",
                            name: "payload",
                            type: "bytes",
                          },
                          {
                            internalType: "uint256",
                            name: "networkFee",
                            type: "uint256",
                          },
                        ],
                        internalType: "struct ParaswapMock.Route[]",
                        name: "route",
                        type: "tuple[]",
                      },
                    ],
                    internalType: "struct ParaswapMock.Adapter[]",
                    name: "adapters",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ParaswapMock.Path[]",
                name: "path",
                type: "tuple[]",
              },
            ],
            internalType: "struct ParaswapMock.MegaSwapPath[]",
            name: "path",
            type: "tuple[]",
          },
          {
            internalType: "address payable",
            name: "partner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feePercent",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes16",
            name: "uuid",
            type: "bytes16",
          },
        ],
        internalType: "struct ParaswapMock.MegaSwapSellData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "megaSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expectedAmount",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "totalNetworkFee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address payable",
                    name: "adapter",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "percent",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "networkFee",
                    type: "uint256",
                  },
                  {
                    components: [
                      {
                        internalType: "uint256",
                        name: "index",
                        type: "uint256",
                      },
                      {
                        internalType: "address",
                        name: "targetExchange",
                        type: "address",
                      },
                      {
                        internalType: "uint256",
                        name: "percent",
                        type: "uint256",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                      {
                        internalType: "uint256",
                        name: "networkFee",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct ParaswapMock.Route[]",
                    name: "route",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ParaswapMock.Adapter[]",
                name: "adapters",
                type: "tuple[]",
              },
            ],
            internalType: "struct ParaswapMock.Path[]",
            name: "path",
            type: "tuple[]",
          },
          {
            internalType: "address payable",
            name: "partner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feePercent",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes16",
            name: "uuid",
            type: "bytes16",
          },
        ],
        internalType: "struct ParaswapMock.SellData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "multiSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610ca0908161001c8239f35b600080fdfe60a080604052600436101561001357600080fd5b60003560e01c90816335326910146105305750806346c67b6d14610264578063a94e78ef1461006b5763d2c4b5981461004b57600080fd5b34610066576000366003190112610066576020604051308152f35b600080fd5b60031960203682011261006657600435906001600160401b03908183116100665761016090833603011261006657604051916100a68361069c565b6100b2816004016106d9565b83526020830192602482013584526040810193604483013585526060820191606484013583526100e4608485016106d9565b946080820195865260a485013581811161006657610108906004369188010161087a565b9460a0830195865261011c60c482016106d9565b60c084015260e481013560e08401526101048101359182116100665761014b610179926004369184010161071f565b61010084015261016b61014461012483013592836101208701520161085c565b610140840152421115610a13565b519051946001600160a01b039182169190819073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee840361025a576101b3885b3414610a53565b51935195511680610254575033935b518051600019810190811161023e576101da91610ab8565b5151169115610200576101f5946101f091610c06565b610ae4565b602060405160008152f35b60405162461bcd60e51b81526020600482015260166024820152750546f20616d6f756e742063616e206e6f7420626520360541b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b936101c2565b6101b360006101ac565b600319602036820112610066576001600160401b03600435116100665761016090600435360301126100665760405161029c8161069c565b6102aa6004356004016106d9565b815260246004350135602082015260446004350135604082015260608101906064600435013582526102e06084600435016106d9565b608082015260a460043501356001600160401b0381116100665736602382600435010112156100665760048181350101359061031b826106ed565b9161032960405193846106b8565b808352602083013660248360051b8560043501010111610066576024836004350101905b60248360051b856004350101018210610486575050505060a0820190815261037960c4600435016106d9565b60c083015260043560e481013560e084015261010401356001600160401b038111610066576103af90600436918135010161071f565b6101008301526103e46101246004350135806101208501526103d66101446004350161085c565b610140850152421115610a13565b81516020830151936001600160a01b039182169190819060809073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee850361047c57610424883414610a53565b519501511680610476575033925b5194602061044c8161044389610a95565b51015197610a95565b5101515160001981019290831161023e5761046d6101f0936101f598610ab8565b51511692610c06565b92610432565b61042460006101ac565b81356001600160401b03811161006657604060043586018201360360231901126100665760405190604082018281106001600160401b0382111761051a5760405260043586018101602481013583526001600160401b03604490910135116100665760249260209283926105099036906004358b0101604481013501870161087a565b83820152815201920191905061034d565b634e487b7160e01b600052604160045260246000fd5b60031960203682011261006657600435906001600160401b0390818311610066576101a0809184360301126100665783018381108282111761051a5760405261057b826004016106d9565b8352610589602483016106d9565b916020840192835261059d604482016106d9565b60408501908152606085016064830135815260808601926084810135845260a481013560a08801526105d160c482016106d9565b9360c0880194855260e4820135868111610066576105f59060043691850101610766565b60e089015261060761010483016106d9565b610100890152610124820135610120890152610144820135958611610066576020976101806106616101846101f09561064961068e9b6004369184010161071f565b6101408601526101648101356101608601520161085c565b91015260018060a01b0380809851169351915197889651168015600014610696575033945b511692610c06565b604051908152f35b94610686565b61016081019081106001600160401b0382111761051a57604052565b90601f801991011681019081106001600160401b0382111761051a57604052565b35906001600160a01b038216820361006657565b6001600160401b03811161051a5760051b60200190565b6001600160401b03811161051a57601f01601f191660200190565b81601f820112156100665780359061073682610704565b9261074460405194856106b8565b8284526020838301011161006657816000926020809301838601378301015290565b81601f820112156100665780359061077d826106ed565b9260409261078d845195866106b8565b808552602093848087019260051b8501019383851161006657858101925b8584106107bc575050505050505090565b6001600160401b0384358181116100665783019160a09283601f19828a03011261006657855190848201828110858211176108475787528a81013582526108048782016106d9565b8b830152606094858201358884015260809182810135958611610066578c966108328c89809985010161071f565b908501520135908201528152019301926107ab565b60246000634e487b7160e01b81526041600452fd5b35906fffffffffffffffffffffffffffffffff198216820361006657565b9080601f830112156100665781359160809060208252610899846106ed565b936040936108a9855196876106b8565b8186528351948587019386600594851b82010196838811610066578101945b8786106108da57505050505050505090565b6001600160401b0386358181116100665783019060609081601f198489030112610066578551928284018481108382111761084757875261091d8b5182016106d9565b8452868101358b51850152828101359082821161006657019087603f83011215610066578a5182013590610950826106ed565b9361095d895195866106b8565b828552888d518601938c1b850101938a8511610066578981015b8581106109975750505050505084820152815286510194865101946108c8565b803594848611610066578f958301958d87603f1991030112610066578f958c519087820182811088821117610847578e526109d3818f016106d9565b82528581013588518301528d888201359083015260a0810135878111610066578f908f90610a02930101610766565b858201528152855101945101610977565b15610a1a57565b60405162461bcd60e51b8152602060048201526011602482015270111958591b1a5b9948189c995858da1959607a1b6044820152606490fd5b15610a5a57565b60405162461bcd60e51b8152602060048201526013602482015272496e636f7272656374206d73672e76616c756560681b6044820152606490fd5b805115610aa25760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015610aa25760209160051b010190565b90816020910312610066575180151581036100665790565b9082610aef57505050565b6001600160a01b0391821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103610b9d5750600080938193829316612710f13d15610b98573d610b3381610704565b90610b4160405192836106b8565b8152600060203d92013e5b15610b5357565b60405162461bcd60e51b815260206004820152601860248201527f4661696c656420746f207472616e7366657220457468657200000000000000006044820152606490fd5b610b4c565b602092916000604492604051968795869463a9059cbb60e01b865216600485015260248401525af18015610bfa57610bd3575b50565b610bd09060203d8111610bf3575b610beb81836106b8565b810190610acc565b503d610be1565b6040513d6000823e3d90fd5b6001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed198201610c30575050565b600091606460209260405194859384926323b872dd60e01b845233600485015230602485015260448401525af18015610bfa57610bd3575056fea2646970667358221220f3ad3d31f9ff2ea716adaf00f2da33a0137ab84fcf80a62dd19f7fbb1591db4564736f6c63430008120033";

type ParaswapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ParaswapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ParaswapMock__factory extends ContractFactory {
  constructor(...args: ParaswapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ParaswapMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ParaswapMock__factory {
    return super.connect(runner) as ParaswapMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ParaswapMockInterface {
    return new Interface(_abi) as ParaswapMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ParaswapMock {
    return new Contract(address, _abi, runner) as unknown as ParaswapMock;
  }
}
