/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ParaswapMock,
  ParaswapMockInterface,
} from "../../../contracts/mocks/ParaswapMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "adapter",
            type: "address",
          },
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "toToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expectedAmount",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "index",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "targetExchange",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "percent",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "payload",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "networkFee",
                type: "uint256",
              },
            ],
            internalType: "struct ParaswapMock.Route[]",
            name: "route",
            type: "tuple[]",
          },
          {
            internalType: "address payable",
            name: "partner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feePercent",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes16",
            name: "uuid",
            type: "bytes16",
          },
        ],
        internalType: "struct ParaswapMock.BuyData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "buy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenTransferProxy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expectedAmount",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "fromAmountPercent",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "totalNetworkFee",
                    type: "uint256",
                  },
                  {
                    components: [
                      {
                        internalType: "address payable",
                        name: "adapter",
                        type: "address",
                      },
                      {
                        internalType: "uint256",
                        name: "percent",
                        type: "uint256",
                      },
                      {
                        internalType: "uint256",
                        name: "networkFee",
                        type: "uint256",
                      },
                      {
                        components: [
                          {
                            internalType: "uint256",
                            name: "index",
                            type: "uint256",
                          },
                          {
                            internalType: "address",
                            name: "targetExchange",
                            type: "address",
                          },
                          {
                            internalType: "uint256",
                            name: "percent",
                            type: "uint256",
                          },
                          {
                            internalType: "bytes",
                            name: "payload",
                            type: "bytes",
                          },
                          {
                            internalType: "uint256",
                            name: "networkFee",
                            type: "uint256",
                          },
                        ],
                        internalType: "struct ParaswapMock.Route[]",
                        name: "route",
                        type: "tuple[]",
                      },
                    ],
                    internalType: "struct ParaswapMock.Adapter[]",
                    name: "adapters",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ParaswapMock.Path[]",
                name: "path",
                type: "tuple[]",
              },
            ],
            internalType: "struct ParaswapMock.MegaSwapPath[]",
            name: "path",
            type: "tuple[]",
          },
          {
            internalType: "address payable",
            name: "partner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feePercent",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes16",
            name: "uuid",
            type: "bytes16",
          },
        ],
        internalType: "struct ParaswapMock.MegaSwapSellData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "megaSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expectedAmount",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "totalNetworkFee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address payable",
                    name: "adapter",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "percent",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "networkFee",
                    type: "uint256",
                  },
                  {
                    components: [
                      {
                        internalType: "uint256",
                        name: "index",
                        type: "uint256",
                      },
                      {
                        internalType: "address",
                        name: "targetExchange",
                        type: "address",
                      },
                      {
                        internalType: "uint256",
                        name: "percent",
                        type: "uint256",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                      {
                        internalType: "uint256",
                        name: "networkFee",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct ParaswapMock.Route[]",
                    name: "route",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ParaswapMock.Adapter[]",
                name: "adapters",
                type: "tuple[]",
              },
            ],
            internalType: "struct ParaswapMock.Path[]",
            name: "path",
            type: "tuple[]",
          },
          {
            internalType: "address payable",
            name: "partner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feePercent",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes16",
            name: "uuid",
            type: "bytes16",
          },
        ],
        internalType: "struct ParaswapMock.SellData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "multiSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610c9f908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816335326910146104ed5750806346c67b6d14610280578063a94e78ef1461006b5763d2c4b5981461004b57600080fd5b34610066576000366003190112610066576020604051308152f35b600080fd5b6020366003190112610066576004356001600160401b038111610066576101606003198236030112610066576040516100a381610677565b6100af826004016106b4565b81526020810191602481013583526040820192604482013584526060830190606483013582526100e1608484016106b4565b936080810194855260a48401356001600160401b0381116100665761010c906004369187010161084e565b9360a0820194855261012060c482016106b4565b60c083015260e481013560e0830152610104810135906001600160401b0382116100665761015761018592600436918401016106fa565b610100840152610177610144610124830135928361012087015201610830565b610140840152421115610a03565b519051946001600160a01b039091169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed198201610276576101bd865b3414610a43565b51915193516001600160a01b031680610270575033925b518051600019810190811161025a576001600160a01b03916101f69190610aa8565b515116911561021c576102119461020c91610ad4565b610b6f565b602060405160008152f35b60405162461bcd60e51b81526020600482015260166024820152750546f20616d6f756e742063616e206e6f7420626520360541b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b926101d4565b6101bd60006101b6565b6020366003190112610066576004356001600160401b038111610066576101606003198236030112610066576040516102b881610677565b6102c4826004016106b4565b8152602081019160248101358352604481013560408301526060820192606482013584526102f4608483016106b4565b926080810193845260a48301356001600160401b038111610066578301923660238501121561006657600484013561032b816106c8565b946103396040519687610693565b818652602060048188019360051b83010101903682116100665760248101925b828410610459575050505060a0820193845261037760c482016106b4565b60c083015260e481013560e0830152610104810135906001600160401b038211610066576101576103ae92600436918401016106fa565b519051936001600160a01b039091169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed19820161044f576103e5853414610a43565b5192516001600160a01b031680610449575033915b519360206104148161040b88610a85565b51015196610a85565b5101515160001981019190821161025a576102119561020c926001600160a01b03916104409190610aa8565b51511692610ad4565b916103fa565b6103e560006101b6565b83356001600160401b038111610066576004908301016040601f1982360301126100665760405191604083018381106001600160401b038211176104d757604052602082013583526040820135926001600160401b038411610066576104c8602094938580953692010161084e565b83820152815201930192610359565b634e487b7160e01b600052604160045260246000fd5b6020366003190112610066576004356001600160401b038111610066576101a06003198236030112610066576101a082018281106001600160401b038211176104d75760405261053f816004016106b4565b825261054d602482016106b4565b60208301908152610560604483016106b4565b916040840192835260608401926064820135845260808501936084830135855260a483013560a087015261059660c484016106b4565b9260c0870193845260e48101356001600160401b038111610066576105c19060043691840101610741565b60e08801526105d361010482016106b4565b610100880152610124810135610120880152610144810135946001600160401b0386116100665760209761018061063561018461020c9561061d6106699b600436918401016106fa565b61014086015261016481013561016086015201610830565b91015251915195519351939586946001600160a01b03938416931680610671575033935b516001600160a01b031692610ad4565b604051908152f35b93610659565b61016081019081106001600160401b038211176104d757604052565b90601f801991011681019081106001600160401b038211176104d757604052565b35906001600160a01b038216820361006657565b6001600160401b0381116104d75760051b60200190565b6001600160401b0381116104d757601f01601f191660200190565b81601f8201121561006657803590610711826106df565b9261071f6040519485610693565b8284526020838301011161006657816000926020809301838601378301015290565b81601f8201121561006657803590610758826106c8565b926107666040519485610693565b82845260208085019360051b830101918183116100665760208101935b83851061079257505050505090565b84356001600160401b03811161006657820160a0818503601f190112610066576040519160a083018381106001600160401b038211176104d757604052602082013583526107e2604083016106b4565b6020840152606082013560408401526080820135926001600160401b0384116100665760a0836108198860208098819801016106fa565b606084015201356080820152815201940193610783565b35906fffffffffffffffffffffffffffffffff198216820361006657565b9080601f8301121561006657813591610866836106c8565b926108746040519485610693565b80845260208085019160051b830101918383116100665760208101915b8383106108a057505050505090565b82356001600160401b0381116100665782016060818703601f1901126100665760405190606082018281106001600160401b038211176104d7576040526108e9602082016106b4565b82526040810135602083015260608101356001600160401b03811161006657602091010186601f8201121561006657803590610924826106c8565b916109326040519384610693565b80835260208084019160051b830101918983116100665760208101915b83831061096d57505050506040820152815260209283019201610891565b82356001600160401b038111610066578201906080828d03601f1901126100665760405190608082018281106001600160401b038211176104d7576040526109b7602084016106b4565b825260408301356020830152606083013560408301526080830135916001600160401b038311610066576109f38e602080969581960101610741565b606082015281520192019161094f565b15610a0a57565b60405162461bcd60e51b8152602060048201526011602482015270111958591b1a5b9948189c995858da1959607a1b6044820152606490fd5b15610a4a57565b60405162461bcd60e51b8152602060048201526013602482015272496e636f7272656374206d73672e76616c756560681b6044820152606490fd5b805115610a925760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015610a925760209160051b010190565b90816020910312610066575180151581036100665790565b6001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed198201610afe575050565b600091606460209260405194859384926323b872dd60e01b845233600485015230602485015260448401525af18015610b6357610b385750565b610b599060203d602011610b5c575b610b518183610693565b810190610abc565b50565b503d610b47565b6040513d6000823e3d90fd5b82610b7957505050565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103610c2e57506000918291829182916001600160a01b0316612710f13d15610c29573d610bc4816106df565b90610bd26040519283610693565b8152600060203d92013e5b15610be457565b60405162461bcd60e51b815260206004820152601860248201527f4661696c656420746f207472616e7366657220457468657200000000000000006044820152606490fd5b610bdd565b9160446020926000604051958694859363a9059cbb60e01b855260018060a01b0316600485015260248401525af18015610b6357610b38575056fea26469706673582212204fe2e18df706a482548556a06da84714c7e080b5e77ef993c710c271015cb08f64736f6c634300081a0033";

type ParaswapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ParaswapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ParaswapMock__factory extends ContractFactory {
  constructor(...args: ParaswapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ParaswapMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ParaswapMock__factory {
    return super.connect(runner) as ParaswapMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ParaswapMockInterface {
    return new Interface(_abi) as ParaswapMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ParaswapMock {
    return new Contract(address, _abi, runner) as unknown as ParaswapMock;
  }
}
