/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  OrallyVerifierOracle,
  OrallyVerifierOracleInterface,
} from "../../../../contracts/mocks/OrallyMock.sol/OrallyVerifierOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "customNumbers",
    outputs: [
      {
        internalType: "string",
        name: "feedId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "customStrings",
    outputs: [
      {
        internalType: "string",
        name: "feedId",
        type: "string",
      },
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_pairId",
        type: "string",
      },
    ],
    name: "getPriceFeed",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "pairId",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "decimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct OrallyStructs.PriceFeed",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "priceFeeds",
    outputs: [
      {
        internalType: "string",
        name: "pairId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "reporters",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "updatePriceFeed",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "pairId",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "decimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct OrallyStructs.PriceFeed",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610766908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081632cc1cd9e1461049c5750806340bd1a9f1461020e578063b50584b314610191578063cb8ae86c1461012e578063d361fce9146100d75763db5c35f81461006157600080fd5b346100d2576100c061008a6020610077366105ee565b816040519382858094519384920161056d565b810160038152030190206100ce6100ac60016100a584610667565b9301610667565b604051938493604085526040850190610590565b908382036020850152610590565b0390f35b600080fd5b346100d25761011f6100ed6020610077366105ee565b8101600281520301902061010081610667565b9060026001820154910154604051938493606085526060850190610590565b91602084015260408301520390f35b346100d25761017d6101446020610077366105ee565b8101600181520301902061015781610667565b906001810154906003600282015491015490604051948594608086526080860190610590565b926020850152604084015260608301520390f35b346100d2576100ce6101c360206101a7366105ee565b6101af61070b565b50816040519382858094519384920161056d565b810160018152030190206003604051916101dc836104dc565b6101e581610667565b8352600181015460208401526002810154604084015201546060820152604051918291826105b5565b346100d25760203660031901126100d25760043567ffffffffffffffff81116100d257366023820112156100d257610250903690602481600401359101610536565b61025861070b565b50805181019060208201906020818403126100d25760208101519067ffffffffffffffff82116100d2570191608090839003126100d2576040519061029c826104dc565b602083015167ffffffffffffffff81116100d25760209084010181601f820112156100d25780516102cc8161051a565b926102da60405194856104f8565b818452602082840101116100d2576102f8916020808501910161056d565b81526040820151916020820192835260806060820151916040840192835201516060830190815261032761070b565b5061034260208451816040519382858094519384920161056d565b8101600181520301902091835194855167ffffffffffffffff81116104865761036b855461062d565b601f811161043e575b506020601f82116001146103d15790806003959493926100ce996000926103c6575b50508160011b9160001990871b1c19161785555b51600185015551600284015551910155604051918291826105b5565b015190508980610396565b601f1982169786600052816000209860005b81811061042657509860019284926003989796956100ce9c1061040e575b505050811b0185556103aa565b015160001983891b60f8161c19169055898080610401565b838301518b556001909a0199602093840193016103e3565b856000526020600020601f830160051c8101916020841061047c575b601f0160051c01905b8181106104705750610374565b60008155600101610463565b909150819061045a565b634e487b7160e01b600052604160045260246000fd5b346100d25760203660031901126100d2576004356001600160a01b03811691908290036100d2576020916000526000825260ff6040600020541615158152f35b6080810190811067ffffffffffffffff82111761048657604052565b90601f8019910116810190811067ffffffffffffffff82111761048657604052565b67ffffffffffffffff811161048657601f01601f191660200190565b9291926105428261051a565b9161055060405193846104f8565b8294818452818301116100d2578281602093846000960137010152565b60005b8381106105805750506000910152565b8181015183820152602001610570565b906020916105a98151809281855285808601910161056d565b601f01601f1916010190565b60208152608060606105d2845183602086015260a0850190610590565b9360208101516040850152604081015182850152015191015290565b60206003198201126100d2576004359067ffffffffffffffff82116100d257806023830112156100d25781602461062a93600401359101610536565b90565b90600182811c9216801561065d575b602083101461064757565b634e487b7160e01b600052602260045260246000fd5b91607f169161063c565b906040519182600082549261067b8461062d565b80845293600181169081156106e957506001146106a2575b506106a0925003836104f8565b565b90506000929192526020600020906000915b8183106106cd5750509060206106a09282010138610693565b60209193508060019154838589010152019101909184926106b4565b9050602092506106a094915060ff191682840152151560051b82010138610693565b60405190610718826104dc565b6000606083818152826020820152826040820152015256fea264697066735822122087dd51d7bf508c0c5e4f2bf7289e490c8a4104db5dd109d3b4093ad27be1492964736f6c634300081a0033";

type OrallyVerifierOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OrallyVerifierOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OrallyVerifierOracle__factory extends ContractFactory {
  constructor(...args: OrallyVerifierOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OrallyVerifierOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): OrallyVerifierOracle__factory {
    return super.connect(runner) as OrallyVerifierOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OrallyVerifierOracleInterface {
    return new Interface(_abi) as OrallyVerifierOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OrallyVerifierOracle {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as OrallyVerifierOracle;
  }
}
