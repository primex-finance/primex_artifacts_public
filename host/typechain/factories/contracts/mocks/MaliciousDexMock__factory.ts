/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MaliciousDexMock,
  MaliciousDexMockInterface,
} from "../../../contracts/mocks/MaliciousDexMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610186908161001c8239f35b600080fdfe60806004908136101561001157600080fd5b600090813560e01c6338ed17391461002857600080fd5b3461014c5760a036600319011261014c5767ffffffffffffffff604435818111610148573660238201121561014857808501359082821161014457602490369260051b010111610140576064356001600160a01b0381160361014057606082019081118282101761012d576040526002815260209081810191604036843781511561011a57843583528151946001958610156101075750919281670de0b6b3a76400006040879401526040519380850191818652518092526040850195925b8281106100f45785870386f35b83518752958101959281019284016100e7565b634e487b7160e01b855260329052602484fd5b634e487b7160e01b845260328552602484fd5b634e487b7160e01b835260418452602483fd5b8280fd5b8480fd5b8380fd5b5080fdfea2646970667358221220ff7e1e82fb220fcc58804a2db7c4a1e1dd5f5543671e9ed211ec6d5ba2d20c2a64736f6c63430008120033";

type MaliciousDexMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousDexMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousDexMock__factory extends ContractFactory {
  constructor(...args: MaliciousDexMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MaliciousDexMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MaliciousDexMock__factory {
    return super.connect(runner) as MaliciousDexMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousDexMockInterface {
    return new Interface(_abi) as MaliciousDexMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MaliciousDexMock {
    return new Contract(address, _abi, runner) as unknown as MaliciousDexMock;
  }
}
