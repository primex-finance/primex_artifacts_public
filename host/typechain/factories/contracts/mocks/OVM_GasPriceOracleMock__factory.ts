/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  OVM_GasPriceOracleMock,
  OVM_GasPriceOracleMockInterface,
} from "../../../contracts/mocks/OVM_GasPriceOracleMock";

const _abi = [
  {
    inputs: [],
    name: "l1BaseFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "overhead",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "scalar",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760cc908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c9081630c18c16214607957508063519b4bd314605c5763f45e65d814603e57600080fd5b34605957806003193601126059576020604051620a6fe08152f35b80fd5b503460595780600319360112605957602060405163b2d05e008152f35b905034609257816003193601126092578060bc60209252f35b5080fdfea2646970667358221220a57f230a86fd16c744400f725cfeceb0fed4c25584d019a290801fa9bc2bb15e64736f6c63430008120033";

type OVM_GasPriceOracleMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OVM_GasPriceOracleMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OVM_GasPriceOracleMock__factory extends ContractFactory {
  constructor(...args: OVM_GasPriceOracleMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OVM_GasPriceOracleMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): OVM_GasPriceOracleMock__factory {
    return super.connect(runner) as OVM_GasPriceOracleMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OVM_GasPriceOracleMockInterface {
    return new Interface(_abi) as OVM_GasPriceOracleMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OVM_GasPriceOracleMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as OVM_GasPriceOracleMock;
  }
}
