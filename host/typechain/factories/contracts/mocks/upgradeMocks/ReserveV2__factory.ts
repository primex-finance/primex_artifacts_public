/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ReserveV2,
  ReserveV2Interface,
} from "../../../../contracts/mocks/upgradeMocks/ReserveV2";

const _abi = [
  {
    inputs: [],
    name: "DS_MATH_ADD_OVERFLOW",
    type: "error",
  },
  {
    inputs: [],
    name: "DS_MATH_MUL_OVERFLOW",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "burnAmount",
        type: "uint256",
      },
    ],
    name: "BurnAmountCalculated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferFromReserve",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minAmountToBeLeft",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minPercentOfTotalSupplyToBeLeft",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct IReserveStorage.TransferRestrictions",
        name: "newTransferRestrictions",
        type: "tuple",
      },
    ],
    name: "TransferRestrictionsChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IPrimexDNSV3",
        name: "_dns",
        type: "address",
      },
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_bucketName",
        type: "string",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "payBonus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBucketV3",
        name: "_bucket",
        type: "address",
      },
    ],
    name: "paybackPermanentLoss",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minAmountToBeLeft",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minPercentOfTotalSupplyToBeLeft",
            type: "uint256",
          },
        ],
        internalType: "struct IReserveStorage.TransferRestrictions",
        name: "newTransferRestrictions",
        type: "tuple",
      },
    ],
    name: "setTransferRestrictions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testUpgrade",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "transferRestrictions",
    outputs: [
      {
        internalType: "uint256",
        name: "minAmountToBeLeft",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minPercentOfTotalSupplyToBeLeft",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bucket",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferToTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161164d90816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816301ffc9a7146113a7575080633f4ba83a1461126a5780633fa4f2451461124c578063485cc95514610fb35780635524107714610f995780635c975abb14610f76578063600a330d14610e325780638456cb5914610d225780639607853c14610a705780639d6aed0b14610a065780639dd267e61461048b578063acc468b21461044a5763f7480349146100b457600080fd5b3461044657602090816003193601126104425783356001600160a01b03818116939184900361025a576100e56115b0565b6002606554146103ff5760026065558060c9541683516306fdde0360e01b815286818981895afa9081156102ff578791610377575b5060809061013b928651808095819463481d98fb60e11b83528d83016114b2565b03915afa9081156102c857859183918891610346575b501603610336578251634872d32760e01b815282818881885afa9081156102c8578691610309575b5083516358a06f0760e01b815283818981895afa9081156102ff5790849188916102d2575b5060248651809581936370a0823160e01b8352308d840152165afa80156102c8578690610276575b7f5110ca98aa61b28a2d94d7c3b7c2ed00a1db4336fecf3857e3766d3ee9727894925080821161026e5750915b8351838152a1801561025e57938394833b1561025a57602485928385519687948593634f43f23960e01b85528401525af1908115610251575061023a575b50600160655580f35b61024390611427565b61024e578038610231565b80fd5b513d84823e3d90fd5b8480fd5b8151633ce1751760e21b81528590fd5b9050916101f3565b508282813d83116102c1575b61028c8183611451565b810103126102bc577f5110ca98aa61b28a2d94d7c3b7c2ed00a1db4336fecf3857e3766d3ee972789491516101c6565b600080fd5b503d610282565b84513d88823e3d90fd5b6102f29150823d84116102f8575b6102ea8183611451565b810190611591565b3861019e565b503d6102e0565b85513d89823e3d90fd5b90508281813d831161032f575b6103208183611451565b810103126102bc575138610179565b503d610316565b8251631b7091f560e01b81528690fd5b610367915060803d8111610370575b61035f8183611451565b81019061155f565b50505038610151565b503d610355565b90503d8088833e6103888183611451565b81019084818303126103fb5780519067ffffffffffffffff82116103f7570181601f820112156103fb578051906103be82611473565b926103cb88519485611451565b8284528683830101116103f757916103ef61013b949260809488808501910161148f565b91509161011a565b8880fd5b8780fd5b825162461bcd60e51b8152808701839052601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b5080fd5b5034610446576020366003190112610446579081906001600160a01b0361046f611411565b16815260cb602052206001815491015482519182526020820152f35b508290346104425780600319360112610442576104a6611411565b6024918235916104b46115b0565b60018060a01b03948560ca54169183518093632474521560e21b82527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b6384830152338883015281604460209687935afa9081156107135789916109d1575b50156109c25786168351634c66358f60e11b81526101209081818581865afa9182156108c957908592918b926108ff575b50500151156108f05783516358a06f0760e01b815283818481855afa908115610713579088918a916108d3575b50169584516370a0823160e01b81523084820152848183818b5afa9081156108c9578a91610898575b50878a5260cb8552858a20916105b08884546115f4565b821015928361076b575b5050501561075c578660c9541690888551858186816361d027b360e01b978882525afa90811561075257829161071d575b50823b1561044657865163f3fef3a360e01b81526001600160a01b03909116858201908152602081018990529092839182908490829060400103925af1801561071357610700575b5082908760c954169285518094819382525afa9081156106f657879161068f575b50907f478dbd1afe37404eb4ec0d3c4e3e89bfea0891deacfaf6c6b9686831ab253bec9583926060969594519586521690840152820152a180f35b9493929180915085813d83116106ef575b6106aa8183611451565b810103126106eb577f478dbd1afe37404eb4ec0d3c4e3e89bfea0891deacfaf6c6b9686831ab253bec956106df60609661154b565b91929394955095610654565b8680fd5b503d6106a0565b83513d89823e3d90fd5b9761070c849299611427565b9790610633565b85513d8b823e3d90fd5b90508581813d831161074b575b6107348183611451565b81010312610446576107459061154b565b8b6105eb565b503d61072a565b87513d84823e3d90fd5b50825163d56f855960e01b8152fd5b87516318160ddd60e01b8152929350909190868287818d5afa91821561088e578c9261085a575b50600101548b918115918215610813575b505015610803576706f05b59d3b200008101918282116107f2575081106107e25786670de0b6b3a76400006107d892046115f4565b11158980806105ba565b8551630a77254f60e01b81528490fd5b634e487b7160e01b8c52601186528bfd5b8651631550e8b760e01b81528590fd5b818192939450028281048214831517156108485780936108365704148c806107a3565b634e487b7160e01b8e5260128852848efd5b634e487b7160e01b8e5260118852848efd5b9091508681813d8311610887575b6108728183611451565b810103126108835751906001610792565b8b80fd5b503d610868565b88513d8e823e3d90fd5b90508481813d83116108c2575b6108af8183611451565b810103126108be57518a610599565b8980fd5b503d6108a5565b86513d8c823e3d90fd5b6108ea9150853d87116102f8576102ea8183611451565b8a610570565b5082516379bb149f60e11b8152fd5b915091508082813d83116109bb575b6109188183611451565b810103126108be57855190810181811067ffffffffffffffff8211176109a957865281519189831683036109a557859282526109558382016114de565b838301528681015187830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201528a80610543565b8a80fd5b634e487b7160e01b8b5260418552888bfd5b503d61090e565b50825163036be76f60e61b8152fd5b90508381813d83116109ff575b6109e88183611451565b810103126103f7576109f9906114de565b89610512565b503d6109de565b50346104465781600319360112610446578051918183019083821067ffffffffffffffff831117610a5d5750610a599350815260098252682932b9b2b93b32ab1960b91b602083015251918291826114b2565b0390f35b634e487b7160e01b815260418552602490fd5b503461044657606036600319011261044657823567ffffffffffffffff81116104425736602382011215610442578084013590610aac82611473565b91610ab984519384611451565b808352366024828401011161025a5760249392918186926020968793018386013783010152610ae66113fb565b610b11608060018060a01b03938460c954168651808095819463481d98fb60e11b83528d83016114b2565b03915afa9081156102c8579083918791610d01575b5084516358a06f0760e01b815293911685848981845afa9384156102ff57889187918996610ce2575b508651631f1b131360e31b815292839182905afa9081156102ff57829187918991610ca9575b5089875180948193637988abe160e11b8352165afa9081156102ff578791610c8c575b50811633148015610c41575b15610c3157835163a9059cbb60e01b81526001600160a01b0392909216968201968752604435602088015294959094849286928390036040019183918991165af1908115610c285750610bf5578280f35b81813d8311610c21575b610c098183611451565b8101031261044657610c1a906114de565b5038808280f35b503d610bff565b513d85823e3d90fd5b835163f6bcc85960e01b81528790fd5b508351631c585d4d60e21b8152858189818786165afa9081156102ff578791610c6f575b5081163314610ba4565b610c869150863d88116102f8576102ea8183611451565b38610c65565b610ca39150863d88116102f8576102ea8183611451565b38610b98565b92505081813d8311610cdb575b610cc08183611451565b810103126106eb575181811681036106eb5785829138610b75565b503d610cb6565b610cfa919650823d84116102f8576102ea8183611451565b9438610b4f565b610d19915060803d81116103705761035f8183611451565b50505038610b26565b50823461044257826003193601126104425760ca548251632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb8382015233602482015290602090829060449082906001600160a01b03165afa908115610e25578491610de8575b5015610dda575060207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891610dc56115b0565b600160ff19603354161760335551338152a180f35b905163036be76f60e61b8152fd5b90506020813d8211610e1d575b81610e0260209383611451565b81010312610e1957610e13906114de565b84610d92565b8380fd5b3d9150610df5565b50505051903d90823e3d90fd5b503461044657606036600319011261044657610e4c611411565b90806023193601126104425760ca548151632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63868201523360248201526020916001600160a01b03919083908290604490829086165afa9081156102c8578691610f3d575b5015610f2d5760443593670de0b6b3a76400008511610f1d577fdcb30d139e0205cf87041969dcdac479c90699e67d7c0e969c66348b792dbe5194959650169384865260cb8252828620918160016024359485815501558351928352820152a280f35b83516380febb2d60e01b81528790fd5b825163036be76f60e61b81528690fd5b90508281813d8311610f6f575b610f548183611451565b81010312610f6b57610f65906114de565b38610eba565b8580fd5b503d610f4a565b503461044657816003193601126104465760209060ff6033541690519015158152f35b828434610446576020366003190112610446573560cc5580f35b50823461044257816003193601126104425780356001600160a01b03818116939184900361025a57610fe36113fb565b9385549460ff8660081c16159283809461123f575b8015611228575b156111ce5760ff19878116600117895596846111bd575b5084516301ffc9a760e01b80825263081e57a760e31b8883015260209791908882602481895afa9182156111b3578b9261117c575b508161110b575b50156110fd57506bffffffffffffffffffffffff60a01b91168160ca54161760ca5560c954161760c9556110ba85549460ff8660081c1690611093826114eb565b61109c826114eb565b603354166033556110ac816114eb565b6110b5816114eb565b6114eb565b60016065556110c7578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989261ff00191684555160018152a18180808380f35b855163044aa57560e41b8152fd5b8751908152637965db0b60e01b83820152905087816024818787165afa908115611172578a9161113d575b508a611052565b90508781813d831161116b575b6111548183611451565b810103126108be57611165906114de565b8a611136565b503d61114a565b87513d8c823e3d90fd5b9091508881813d83116111ac575b6111948183611451565b810103126109a5576111a5906114de565b908b61104b565b503d61118a565b88513d8d823e3d90fd5b61ffff191661010117885588611016565b845162461bcd60e51b8152602081880152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610fff5750600160ff881614610fff565b50600160ff881610610ff8565b503461044657816003193601126104465760209060cc549051908152f35b503461044657816003193601126104465760ca548151632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d885820152336024820152602092918390829060449082906001600160a01b03165afa90811561139d578491611368575b5015611359576033549360ff85161561132157507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa929360ff191660335551338152a180f35b82606492519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b5163036be76f60e61b81528390fd5b90508281813d8311611396575b61137f8183611451565b81010312610e1957611390906114de565b386112db565b503d611375565b82513d86823e3d90fd5b83908534610442576020366003190112610442573563ffffffff60e01b8116809103610442576020925063d4cb1bcb60e01b81149081156113ea575b5015158152f35b6301ffc9a760e01b149050836113e3565b602435906001600160a01b03821682036102bc57565b600435906001600160a01b03821682036102bc57565b67ffffffffffffffff811161143b57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761143b57604052565b67ffffffffffffffff811161143b57601f01601f191660200190565b60005b8381106114a25750506000910152565b8181015183820152602001611492565b604091602082526114d2815180928160208601526020868601910161148f565b601f01601f1916010190565b519081151582036102bc57565b156114f257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b51906001600160a01b03821682036102bc57565b91908260809103126102bc576115748261154b565b91602081015160038110156102bc57916060604083015192015190565b908160209103126102bc57516001600160a01b03811681036102bc5790565b60ff603354166115bc57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b9190820180921161160157565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f9c2a8c0ad4f33e649ac0fdb72e4729f604fceddefcb35aeff7f1080999b351564736f6c63430008120033";

type ReserveV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReserveV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReserveV2__factory extends ContractFactory {
  constructor(...args: ReserveV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ReserveV2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ReserveV2__factory {
    return super.connect(runner) as ReserveV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReserveV2Interface {
    return new Interface(_abi) as ReserveV2Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ReserveV2 {
    return new Contract(address, _abi, runner) as unknown as ReserveV2;
  }
}
