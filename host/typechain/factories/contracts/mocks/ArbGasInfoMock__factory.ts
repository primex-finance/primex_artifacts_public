/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArbGasInfoMock,
  ArbGasInfoMockInterface,
} from "../../../contracts/mocks/ArbGasInfoMock";

const _abi = [
  {
    inputs: [],
    name: "getL1BaseFeeEstimate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPricesInWei",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "l1GasPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newL1GasPrice",
        type: "uint256",
      },
    ],
    name: "setL1BaseFeeEstimate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761010a908161001c8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c908163212209b91460bc57816341b247a8146080575080638282e8171460655763f5d6ded714604857600080fd5b346062578060031936011260625760209054604051908152f35b80fd5b50346062578060031936011260625760209054604051908152f35b90503460b8578160031936011260b8578160c092825280602083015280604083015280606083015260808201526298968060a0820152f35b5080fd5b82346062576020366003190112606257600435815580f3fea26469706673582212202fd99d73f1bbe5186e7605fb013b9483ef7bd043338b1024d4c9dd3d8ece9d3f64736f6c63430008120033";

type ArbGasInfoMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbGasInfoMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbGasInfoMock__factory extends ContractFactory {
  constructor(...args: ArbGasInfoMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArbGasInfoMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ArbGasInfoMock__factory {
    return super.connect(runner) as ArbGasInfoMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbGasInfoMockInterface {
    return new Interface(_abi) as ArbGasInfoMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ArbGasInfoMock {
    return new Contract(address, _abi, runner) as unknown as ArbGasInfoMock;
  }
}
