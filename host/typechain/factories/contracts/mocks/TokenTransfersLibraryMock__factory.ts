/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TokenTransfersLibraryMock,
  TokenTransfersLibraryMockInterface,
} from "../../../contracts/mocks/TokenTransfersLibraryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "doTransferFromTo",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "doTransferIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "doTransferOut",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601957610134908161001f823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c9081636d69093e14605a57508063c37f7f7f1460455763c66c253614603c57600080fd5b60433660c7565b005b604c3660c7565b505050602060405160008152f35b6080366003190112608357602090606e6088565b506075609d565b50607c60b2565b5060008152f35b600080fd5b600435906001600160a01b0382168203608357565b602435906001600160a01b0382168203608357565b604435906001600160a01b0382168203608357565b60609060031901126083576004356001600160a01b0381168103608357906024356001600160a01b0381168103608357906044359056fea264697066735822122045515d2516573fe1967fb91b5facf75dee84c1ad3b56af89a4a998acec16434164736f6c634300081a0033";

type TokenTransfersLibraryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTransfersLibraryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTransfersLibraryMock__factory extends ContractFactory {
  constructor(...args: TokenTransfersLibraryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TokenTransfersLibraryMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TokenTransfersLibraryMock__factory {
    return super.connect(runner) as TokenTransfersLibraryMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransfersLibraryMockInterface {
    return new Interface(_abi) as TokenTransfersLibraryMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TokenTransfersLibraryMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TokenTransfersLibraryMock;
  }
}
