/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  WhiteBlackList,
  WhiteBlackListInterface,
} from "../../../../contracts/WhiteBlackList/WhiteBlackList/WhiteBlackList";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "BlacklistedAddressAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "BlacklistedAddressRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "WhitelistedAddressAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "WhitelistedAddressRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "addAddressToBlacklist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "addAddressToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    name: "addAddressesToBlacklist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    name: "addAddressesToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getAccessType",
    outputs: [
      {
        internalType: "enum IWhiteBlackList.AccessType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isBlackListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "removeAddressFromBlacklist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "removeAddressFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    name: "removeAddressesFromBlacklist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    name: "removeAddressesFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460bd576000549060ff8260081c16606b575060ff808216036031575b604051610ee090816100c38239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386022565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714610cf957508063086dfcc414610caf57806324953eaa14610bae578063286dd3f514610ab0578063322587941461091a57806335e82f3a1461080f5780637b103999146107e65780637b9417c8146106ea578063c4d66de814610527578063ca73419e146103d8578063e2ec6ec3146102b1578063e47d6060146102635763f2c816ae146100ae57600080fd5b3461025e57602036600319011261025e576004356001600160a01b0381169081810361025e57603454604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015290602090829060449082906001600160a01b03165afa90811561025257600091610223575b50156102115781600052603360205260ff6040600020541660038110156101d7576001146101ff573b156101ed5780600052603360205260ff6040600020541660038110156101d7576002146101c5578060005260336020526040600020600260ff198254161790557fee71faa2d1e96ac74ee4023d6ffa8abfa43b7648f51e3dbd8ec561823e9df132600080a2005b604051630c71548760e41b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b6040516339cd1d6f60e11b8152600490fd5b60405163b5ddcc3760e01b8152600490fd5b60405163036be76f60e61b8152600490fd5b610245915060203d60201161024b575b61023d8183610dda565b810190610e12565b38610135565b503d610233565b6040513d6000823e3d90fd5b600080fd5b3461025e57602036600319011261025e576004356001600160a01b0381169081900361025e57600052603360205260ff6040600020541660038110156101d757602090600260405191148152f35b3461025e576102bf36610d4c565b9060005b8281106102cc57005b6102df6102da828585610da0565b610dc6565b603454604051632474521560e21b8152600080516020610e8b833981519152600482015233602482015290602090829060449082906001600160a01b03165afa908115610252576000916103ba575b5015610211576001600160a01b031660008181526033602052604090205490919060ff1660038110156101d7576001146103a85781600192600052603360205260406000208360ff198254161790557fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f600080a2016102c3565b60405163503d101f60e11b8152600490fd5b6103d2915060203d811161024b5761023d8183610dda565b8561032e565b3461025e576103e636610d4c565b9060005b8281106103f357005b6104016102da828585610da0565b603454604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015291929190602090829060449082906001600160a01b03165afa90811561025257600091610509575b5015610211576001600160a01b03821660008181526033602052604090205490929060ff1660038110156101d7576001146101ff573b156101ed5781600052603360205260ff6040600020541660038110156101d7576002146101c5578160019260005260336020526040600020600260ff198254161790557fee71faa2d1e96ac74ee4023d6ffa8abfa43b7648f51e3dbd8ec561823e9df132600080a2016103ea565b610521915060203d811161024b5761023d8183610dda565b85610465565b3461025e57602036600319011261025e576004356001600160a01b0381169081900361025e5760005460ff8160081c1615908180926106dd575b80156106c6575b1561066a5760ff19811660011760005581610658575b506000549160ff8360081c1661059381610e2a565b6040516301ffc9a760e01b8152637965db0b60e01b6004820152602081602481865afa90811561025257600091610639575b5015610627576105ec916bffffffffffffffffffffffff60a01b6034541617603455610e2a565b6105f257005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405163044aa57560e41b8152600490fd5b610652915060203d60201161024b5761023d8183610dda565b856105c5565b61ffff1916610101176000558261057e565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156105685750600160ff821614610568565b50600160ff821610610561565b3461025e57602036600319011261025e576004356001600160a01b0381169081900361025e57603454604051632474521560e21b8152600080516020610e8b833981519152600482015233602482015290602090829060449082906001600160a01b03165afa908115610252576000916107c7575b50156102115780600052603360205260ff6040600020541660038110156101d7576001146103a8578060005260336020526040600020600160ff198254161790557fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f600080a2005b6107e0915060203d60201161024b5761023d8183610dda565b8261075f565b3461025e57600036600319011261025e576034546040516001600160a01b039091168152602090f35b3461025e57602036600319011261025e576004356001600160a01b0381169081900361025e57603454604051632474521560e21b8152600080516020610e8b833981519152600482015233602482015290602090829060449082906001600160a01b03165afa908115610252576000916108fb575b50156102115780600052603360205260ff6040600020541660038110156101d7576002036108e957806000526033602052604060002060ff1981541690557fb9b02d6ef3069c468ac99865bad0d84ec0cf34671cb26053e5e47d415ae17564600080a2005b60405163a8e583af60e01b8152600490fd5b610914915060203d60201161024b5761023d8183610dda565b82610884565b3461025e5761092836610d4c565b603454604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63600482015233602482015291929190602090829060449082906001600160a01b03165afa90811561025257600091610a91575b50156102115760005b82811061099e57005b6109ac6102da828585610da0565b603454604051632474521560e21b8152600080516020610e8b833981519152600482015233602482015290602090829060449082906001600160a01b03165afa90811561025257600091610a73575b5015610211576001600160a01b031660008181526033602052604090205490919060ff1660038110156101d7576002036108e957816001926000526033602052604060002060ff1981541690557fb9b02d6ef3069c468ac99865bad0d84ec0cf34671cb26053e5e47d415ae17564600080a201610995565b610a8b915060203d811161024b5761023d8183610dda565b856109fb565b610aaa915060203d60201161024b5761023d8183610dda565b8361098c565b3461025e57602036600319011261025e576004356001600160a01b0381169081900361025e57603454604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa90811561025257600091610b8f575b50156102115780600052603360205260ff6040600020541660038110156101d757600103610b7d57806000526033602052604060002060ff1981541690557ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a600080a2005b6040516335876baf60e01b8152600490fd5b610ba8915060203d60201161024b5761023d8183610dda565b82610b18565b3461025e57610bbc36610d4c565b9060005b828110610bc957005b610bd76102da828585610da0565b603454604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa90811561025257600091610c91575b5015610211576001600160a01b031660008181526033602052604090205490919060ff1660038110156101d757600103610b7d57816001926000526033602052604060002060ff1981541690557ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a600080a201610bc0565b610ca9915060203d811161024b5761023d8183610dda565b85610c19565b3461025e57602036600319011261025e576004356001600160a01b0381169081900361025e57600052603360205260ff6040600020541660405160038210156101d7576020918152f35b3461025e57602036600319011261025e576004359063ffffffff60e01b821680920361025e57602091633df6cef760e01b8114908115610d3b575b5015158152f35b6301ffc9a760e01b14905083610d34565b90602060031983011261025e5760043567ffffffffffffffff811161025e578260238201121561025e5780600401359267ffffffffffffffff841161025e5760248460051b8301011161025e576024019190565b9190811015610db05760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b038116810361025e5790565b90601f8019910116810190811067ffffffffffffffff821117610dfc57604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261025e5751801515810361025e5790565b15610e3157565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fdfe5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8a26469706673582212203bf389579a7ad8e2f674ae2eeeb72f2db04958e7ae74547acb91298e6d65bcae64736f6c634300081a0033";

type WhiteBlackListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhiteBlackListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WhiteBlackList__factory extends ContractFactory {
  constructor(...args: WhiteBlackListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      WhiteBlackList & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): WhiteBlackList__factory {
    return super.connect(runner) as WhiteBlackList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhiteBlackListInterface {
    return new Interface(_abi) as WhiteBlackListInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WhiteBlackList {
    return new Contract(address, _abi, runner) as unknown as WhiteBlackList;
  }
}
