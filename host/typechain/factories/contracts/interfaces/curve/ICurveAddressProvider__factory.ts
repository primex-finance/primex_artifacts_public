/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICurveAddressProvider,
  ICurveAddressProviderInterface,
} from "../../../../contracts/interfaces/curve/ICurveAddressProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "get_address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "get_id_info",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "is_active",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "last_modified",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ICurveAddressProvider__factory {
  static readonly abi = _abi;
  static createInterface(): ICurveAddressProviderInterface {
    return new Interface(_abi) as ICurveAddressProviderInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICurveAddressProvider {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ICurveAddressProvider;
  }
}
