/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPrimexProxyAdmin,
  IPrimexProxyAdminInterface,
} from "../../../contracts/interfaces/IPrimexProxyAdmin";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract UpgradeableBeacon",
        name: "beacon",
        type: "address",
      },
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeBeaconProxyAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract UpgradeableBeacon",
        name: "beacon",
        type: "address",
      },
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "upgradeBeacon",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPrimexProxyAdmin__factory {
  static readonly abi = _abi;
  static createInterface(): IPrimexProxyAdminInterface {
    return new Interface(_abi) as IPrimexProxyAdminInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPrimexProxyAdmin {
    return new Contract(address, _abi, runner) as unknown as IPrimexProxyAdmin;
  }
}
