/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  GasPriceOracleOptimism,
  GasPriceOracleOptimismInterface,
} from "../../contracts/GasPriceOracleOptimism";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346015576102b0908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908163313ce567146102605750806354fd4d50146102445780637284e416146101875780639a6fc8f51461012a5763feaf968c1461005657600080fd5b346101255760003660031901126101255760405163fe173b9760e01b8152602081600481600f602160991b015afa908115610119576000916100b8575b60a0826040519060008252602082015242604082015242606082015260006080820152f35b60203d602011610112575b601f8101601f1916820167ffffffffffffffff8111838210176100fe576020918391604052810103126100fa5751905060a0610093565b5080fd5b634e487b7160e01b84526041600452602484fd5b503d6100c3565b6040513d6000823e3d90fd5b600080fd5b346101255760203660031901126101255760043569ffffffffffffffffffff8116036101255760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b6044820152606490fd5b34610125576000366003190112610125576040516040810181811067ffffffffffffffff82111761022e57604052601981527f4f502d537461636b20476173205072696365204f7261636c6500000000000000602082015260405190602082528181519182602083015260005b8381106102165750508160006040809484010152601f80199101168101030190f35b602082820181015160408784010152859350016101f4565b634e487b7160e01b600052604160045260246000fd5b3461012557600036600319011261012557602060405160018152f35b346101255760003660031901126101255780601260209252f3fea2646970667358221220554e0ea285e65419c375f4e9f67ec4ed299f8aa58ce994f75f6f3344141d397164736f6c634300081a0033";

type GasPriceOracleOptimismConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasPriceOracleOptimismConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasPriceOracleOptimism__factory extends ContractFactory {
  constructor(...args: GasPriceOracleOptimismConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GasPriceOracleOptimism & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): GasPriceOracleOptimism__factory {
    return super.connect(runner) as GasPriceOracleOptimism__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasPriceOracleOptimismInterface {
    return new Interface(_abi) as GasPriceOracleOptimismInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): GasPriceOracleOptimism {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as GasPriceOracleOptimism;
  }
}
