/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CurveTricryptoOracle,
  CurveTricryptoOracleInterface,
} from "../../../contracts/CurvePriceFeeds/CurveTricryptoOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "RegisterLpToken",
    type: "event",
  },
  {
    inputs: [],
    name: "getAddressProvider",
    outputs: [
      {
        internalType: "contract ICurveAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "crvLp",
        type: "address",
      },
    ],
    name: "getPoolInfo",
    outputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "coins",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "virtualPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "crvLp",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "tokensUsdOracleData",
        type: "bytes[]",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "crvLp",
        type: "address",
      },
    ],
    name: "getTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "registryIndex",
            type: "uint256",
          },
        ],
        internalType: "struct CurveBaseOracle.TokenInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICurveAddressProvider",
        name: "_addressProvider",
        type: "address",
      },
      {
        internalType: "contract IPriceOracleV2",
        name: "_primexPriceOracle",
        type: "address",
      },
      {
        internalType: "contract IAccessControl",
        name: "_primexRegistry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "primexPriceOracle",
    outputs: [
      {
        internalType: "contract IPriceOracleV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "primexRegistry",
    outputs: [
      {
        internalType: "contract IAccessControl",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "crvLp",
        type: "address",
      },
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "registryIndex",
        type: "uint256",
      },
    ],
    name: "registerCurveLp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234602357600e6028565b60146028565b60405161160c90816100ce8239f35b600080fd5b60005460ff8160081c1660785760ff8082160360415750565b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1565b60405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461068d5750806306bfa9381461060857806313f839b9146105975780631f69565f146105065780632ac5869b146104dd578063c0c53b8b146102e7578063d7984f3a146102be578063e93bb752146100b05763f8c689341461008257600080fd5b346100ab5760003660031901126100ab576035546040516001600160a01b039091168152602090f35b600080fd5b346100ab5760603660031901126100ab576100c96106c3565b6024356001600160a01b03811681036100ab57603354604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8600482015233602482015290602090829060449082906001600160a01b03165afa9081156102b257600091610283575b5015610271576001600160a01b03821691821561025f576101619160443591610fe5565b90926040519261017084610703565b6001600160a01b0390811684526020808501958652604080860194855260009384526036909152909120925183546001600160a01b03191691161782559151805160018301939167ffffffffffffffff821161024957680100000000000000008211610249578454828655808310610220575b5060200193600052602060002060005b8281106102035783516002860155005b85516001600160a01b0316818301556020909501946001016101f3565b8560005282602060002091820191015b81811061023d57506101e3565b60008155600101610230565b634e487b7160e01b600052604160045260246000fd5b60405163538ba4f960e01b8152600490fd5b60405163036be76f60e61b8152600490fd5b6102a5915060203d6020116102ab575b61029d818361071f565b810190610c87565b8361013d565b503d610293565b6040513d6000823e3d90fd5b346100ab5760003660031901126100ab576034546040516001600160a01b039091168152602090f35b346100ab5760603660031901126100ab576004356001600160a01b038116908190036100ab576024356001600160a01b038116908190036100ab576044356001600160a01b03811691908290036100ab576000549260ff8460081c1615938480956104d0575b80156104b9575b1561045d5760ff1981166001176000558461044b575b506040516301ffc9a760e01b8152637965db0b60e01b6004820152602081602481875afa9081156102b25760009161042c575b501561041a576001600160601b0360a01b60355416176035556001600160601b0360a01b60345416176034556001600160601b0360a01b60335416176033556103e257005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405163044aa57560e41b8152600490fd5b610445915060203d6020116102ab5761029d818361071f565b8561039d565b61ffff1916610101176000558461036a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103545750600160ff821614610354565b50600160ff82161061034d565b346100ab5760003660031901126100ab576033546040516001600160a01b039091168152602090f35b346100ab5760203660031901126100ab576105276105226106c3565b610bd7565b604051602081526080810160018060a01b038351166020830152602083015190606060408401528151809152602060a0840192019060005b8181106105785750505060408293015160608301520390f35b82516001600160a01b031684526020938401939092019160010161055f565b346100ab5760403660031901126100ab576105b06106c3565b60243567ffffffffffffffff81116100ab57366023820112156100ab57806004013567ffffffffffffffff81116100ab573660248260051b840101116100ab57602092602461060093019061077f565b604051908152f35b346100ab5760203660031901126100ab576106296106246106c3565b610cdc565b9060405191606083019360018060a01b0316835260606020840152815180945260206080840192016000945b80861061066a57505082935060408301520390f35b81516001600160a01b031684526001959095019460209384019390910190610655565b346100ab5760203660031901126100ab576004359063ffffffff60e01b82168092036100ab576020916301ffc9a760e01b148152f35b600435906001600160a01b03821682036100ab57565b80518210156106ed5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6060810190811067ffffffffffffffff82111761024957604052565b90601f8019910116810190811067ffffffffffffffff82111761024957604052565b9192608093819260018060a01b03168452610348602085015260606040850152816060850152848401376000828201840152601f01601f1916010190565b9192909260009260038203610bc55761079790610cdc565b92916001600160a01b03165a90803b15610bc1578660049160405192838092631927e93d60e31b8252612710fa9081610bad575b50610ba4573d15610ba4573d67ffffffffffffffff8111610b90576040516127109291610802601f8201601f19166020018361071f565b81528760203d92013e5b5a90031115610b7e57600381511461083057604051630cc3378f60e31b8152600490fd5b60018060a01b0360345416815115610b6a5760208201516001600160a01b03168315610b565736889003601e190191883583811215610a945789019182359267ffffffffffffffff8411610aff57602001908336038213610aff5760405163416be2f360e01b8152969594936020938893909284928d9284926108b892919060048501610741565b03925af1938415610b4b578794610b17575b5060018060a01b036034541697825160011015610b035760408301516001600160a01b03166001851115610a985788996020839a98999a013584811215610a945783019081359167ffffffffffffffff8311610aff576020018236038113610aff57610950996020946040519b8c958694859363416be2f360e01b855260048501610741565b03925af1958615610af4578996610ac0575b5060018060a01b036034541692805160021015610aac57606001516001600160a01b03169360021015610a9857604081013591821215610a9457019182359267ffffffffffffffff8411610a9457602001908336038213610a94579181896020946109e9999a9b969450604051998a958694859363416be2f360e01b855260048501610741565b03925af1938415610a87578194610a53575b5084600302946003860403610a3f5750610a30610a3b93670de0b6b3a7640000610a2a819795610a3595610c9f565b04610c9f565b611496565b90610c9f565b0490565b634e487b7160e01b81526011600452602490fd5b9093506020813d602011610a7f575b81610a6f6020938361071f565b810103126100ab575192386109fb565b3d9150610a62565b50604051903d90823e3d90fd5b8880fd5b634e487b7160e01b89526032600452602489fd5b634e487b7160e01b8a52603260045260248afd5b9095506020813d602011610aec575b81610adc6020938361071f565b810103126100ab57519438610962565b3d9150610acf565b6040513d8b823e3d90fd5b8980fd5b634e487b7160e01b88526032600452602488fd5b9093506020813d602011610b43575b81610b336020938361071f565b810103126100ab575192386108ca565b3d9150610b26565b6040513d89823e3d90fd5b634e487b7160e01b87526032600452602487fd5b634e487b7160e01b86526032600452602486fd5b604051630f9d066b60e41b8152600490fd5b634e487b7160e01b87526041600452602487fd5b6127109061080c565b87610bba9198929861071f565b95386107cb565b8680fd5b604051630deb687760e11b8152600490fd5b600060408051610be681610703565b82815260606020820152015260018060a01b03166000526036602052604060002060405190610c1482610703565b80546001600160a01b0316825260405160018201805480835260009182526020808320908401929091905b818110610c685750505090610c598160029493038261071f565b60208401520154604082015290565b82546001600160a01b0316845260209093019260019283019201610c3f565b908160209103126100ab575180151581036100ab5790565b81810292918115918404141715610cb257565b634e487b7160e01b600052601160045260246000fd5b51906001600160a01b03821682036100ab57565b90600091606091600091610cef81610bd7565b80519091906001600160a01b031615610efc576040820190815115610e77578151600581148015610e6d575b610da557505051600814610d2c5750565b8051602091820151604051630176f71760e71b815290965094509192506001600160a01b039091169083600481845afa9283156102b257600093610d71575b50929190565b9092506020813d602011610d9d575b81610d8d6020938361071f565b810103126100ab57519138610d6b565b3d9150610d80565b9550955050909150602060018060a01b03603554169360246040518096819363124fd3dd60e21b835260048301525afa9283156102b257600093610e31575b5080516020918201516040516362db83a560e11b81526001600160a01b03968716600482015290959094918116929185916024918391165afa9283156102b257600093610d715750929190565b9092506020813d602011610e65575b81610e4d6020938361071f565b810103126100ab57610e5e90610cc8565b9138610de4565b3d9150610e40565b5060078114610d1b565b95505090915060049250602060018060a01b03603554166040519485809263a262904b60e01b82525afa9283156102b257600093610e31575080516020918201516040516362db83a560e11b81526001600160a01b03968716600482015290959094918116929185916024918391165afa9283156102b257600093610d715750929190565b604051630cc3378f60e31b8152600490fd5b8115610f18570490565b634e487b7160e01b600052601260045260246000fd5b90610100828203126100ab5780601f830112156100ab5760405191610f556101008461071f565b829061010081019283116100ab57905b828210610f725750505090565b60208091610f7f84610cc8565b815201910190610f65565b67ffffffffffffffff81116102495760051b60200190565b90610fac82610f8a565b610fb9604051918261071f565b8281528092610fca601f1991610f8a565b0190602036910137565b9060088110156106ed5760051b0190565b9291801561131157600581148015611307575b6111805760081461101557604051630cc3378f60e31b8152600490fd5b60405163940494f160e01b81526001600160a01b03848116600483018190529194921690602085602481855afa9485156102b25760009561114b575b50608090602460405180948193639ac90d3d60e01b835260048301525afa9081156102b2576000916110cc575b5061108884610fa2565b9360005b81811061109d575050509190600890565b60048110156106ed57600581901b830151600191906001600160a01b03166110c582896106d9565b520161108c565b9060803d608011611144575b6110e2818461071f565b8201906080838303126111415781601f84011215611141576040519261110960808561071f565b8391608082019384116111415750905b828210611129575050503861107e565b6020809161113684610cc8565b815201910190611119565b80fd5b503d6110d8565b90946020823d602011611178575b816111666020938361071f565b81010312611141575051936080611051565b3d9150611159565b60405163bdf475c360e01b81526001600160a01b03948516600482015291909316929190602081602481875afa9081156102b2576000916112cd575b5060405163940494f160e01b81526001600160a01b03821660048201819052602082602481895afa9182156102b257600092611297575b5061010090602460405180988193639ac90d3d60e01b835260048301525afa9485156102b257600095611266575b5061122b81610fa2565b9460005b82811061123e57505050929190565b6001906001600160a01b036112538285610fd4565b511661125f828a6106d9565b520161122f565b6112899195506101003d8111611290575b611281818361071f565b810190610f2e565b9338611221565b503d611277565b90916020823d6020116112c5575b816112b26020938361071f565b81010312611141575051906101006111f3565b3d91506112a5565b90506020813d6020116112ff575b816112e86020938361071f565b810103126100ab576112f990610cc8565b386111bc565b3d91506112db565b5060078114610ff8565b60405163bdf475c360e01b81526001600160a01b03948516600482015291909316929190602081602481875afa9081156102b25760009161144f575b506040805163940494f160e01b81526001600160a01b03831660048201819052909182602481895afa9182156102b257600092611419575b5061010090602460405180988193639ac90d3d60e01b835260048301525afa9485156102b2576000956113f8575b506113bd81610fa2565b9460005b8281106113d057505050929190565b6001906001600160a01b036113e58285610fd4565b51166113f1828a6106d9565b52016113c1565b6114129195506101003d811161129057611281818361071f565b93386113b3565b9091506040813d604011611447575b816114356040938361071f565b810103126100ab575190610100611385565b3d9150611428565b90506020813d602011611481575b8161146a6020938361071f565b810103126100ab5761147b90610cc8565b3861134d565b3d915061145d565b91908203918211610cb257565b670de0b6b3a764000081049060005b60ff81106114e55760405162461bcd60e51b815260206004820152601060248201526f446964204e6f7420436f6e766572676560801b6044820152606490fd5b826114f08184610f0e565b670de0b6b3a7640000810290808204670de0b6b3a76400001490151715610cb2578161151b91610f0e565b670de0b6b3a7640000810290808204670de0b6b3a76400001490151715610cb2578161154691610f0e565b671bc16d674ec80000019081671bc16d674ec8000011610cb2576729a2241af62c00009161157391610c9f565b049283818111156115c8579061158891611489565b600281109081156115a6575b506115a1576001016114a5565b505090565b670de0b6b3a764000080820292508115918304141715610cb257831138611594565b6115d191611489565b61158856fea26469706673582212208ad05d32da0297a5a312225b950c633d9b235d08d142f024261e9fc28ff3ed6464736f6c634300081a0033";

type CurveTricryptoOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveTricryptoOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveTricryptoOracle__factory extends ContractFactory {
  constructor(...args: CurveTricryptoOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CurveTricryptoOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): CurveTricryptoOracle__factory {
    return super.connect(runner) as CurveTricryptoOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveTricryptoOracleInterface {
    return new Interface(_abi) as CurveTricryptoOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CurveTricryptoOracle {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as CurveTricryptoOracle;
  }
}
