/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBatchManager,
  IBatchManagerInterface,
} from "../../../contracts/BatchManager/IBatchManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gasPerBatch",
        type: "uint256",
      },
    ],
    name: "ChangeGasPerBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gasPerPosition",
        type: "uint256",
      },
    ],
    name: "ChangeGasPerPosition",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "shares",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "string",
                    name: "dexName",
                    type: "string",
                  },
                  {
                    internalType: "uint256",
                    name: "shares",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct PrimexPricingLibrary.Path[]",
                name: "paths",
                type: "tuple[]",
              },
            ],
            internalType: "struct PrimexPricingLibrary.Route[]",
            name: "routes",
            type: "tuple[]",
          },
        ],
        internalType: "struct PrimexPricingLibrary.MegaRoute[]",
        name: "_megaRoutes",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_positionAsset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_soldAsset",
        type: "address",
      },
      {
        internalType: "contract IBucketV3",
        name: "_bucket",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_conditionIndexes",
        type: "uint256[]",
      },
      {
        internalType: "enum PositionLibrary.CloseReason",
        name: "_closeReason",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "_positionSoldAssetOracleData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_nativePmxOracleData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_nativeSoldAssetOracleData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_positionNativeAssetOracleData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_pmxSoldAssetOracleData",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "_pullOracleData",
        type: "bytes[][]",
      },
      {
        internalType: "uint256[]",
        name: "_pullOracleTypes",
        type: "uint256[]",
      },
    ],
    name: "closeBatchPositions",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasPerBatch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gasPerPosition",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_positionManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceOracle",
        type: "address",
      },
      {
        internalType: "address",
        name: "_whiteBlackList",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_gasPerPosition",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gasPerBatch",
        type: "uint256",
      },
    ],
    name: "initializeAfterUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "contract IPositionManagerV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceOracle",
    outputs: [
      {
        internalType: "contract IPriceOracleV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gasPerBatch",
        type: "uint256",
      },
    ],
    name: "setGasPerBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gasPerPosition",
        type: "uint256",
      },
    ],
    name: "setGasPerPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "whiteBlackList",
    outputs: [
      {
        internalType: "contract IWhiteBlackList",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IBatchManager__factory {
  static readonly abi = _abi;
  static createInterface(): IBatchManagerInterface {
    return new Interface(_abi) as IBatchManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IBatchManager {
    return new Contract(address, _abi, runner) as unknown as IBatchManager;
  }
}
