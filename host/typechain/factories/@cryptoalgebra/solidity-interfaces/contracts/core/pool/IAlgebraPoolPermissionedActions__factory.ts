/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAlgebraPoolPermissionedActions,
  IAlgebraPoolPermissionedActionsInterface,
} from "../../../../../../@cryptoalgebra/solidity-interfaces/contracts/core/pool/IAlgebraPoolPermissionedActions";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "communityFee0",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "communityFee1",
        type: "uint8",
      },
    ],
    name: "setCommunityFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "virtualPoolAddress",
        type: "address",
      },
    ],
    name: "setIncentive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "newLiquidityCooldown",
        type: "uint32",
      },
    ],
    name: "setLiquidityCooldown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IAlgebraPoolPermissionedActions__factory {
  static readonly abi = _abi;
  static createInterface(): IAlgebraPoolPermissionedActionsInterface {
    return new Interface(_abi) as IAlgebraPoolPermissionedActionsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IAlgebraPoolPermissionedActions {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IAlgebraPoolPermissionedActions;
  }
}
