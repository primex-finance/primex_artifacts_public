/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPriceOracleV2 {
  export type UpdatePriceDropFeedsParamsStruct = {
    assetA: AddressLike;
    assetB: AddressLike;
    priceDropFeed: AddressLike;
  };

  export type UpdatePriceDropFeedsParamsStructOutput = [
    assetA: string,
    assetB: string,
    priceDropFeed: string
  ] & { assetA: string; assetB: string; priceDropFeed: string };

  export type UpdateSupraDataFeedParamsStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    feedData: IPriceOracleStorageV3.SupraDataFeedIdStruct;
  };

  export type UpdateSupraDataFeedParamsStructOutput = [
    tokenA: string,
    tokenB: string,
    feedData: IPriceOracleStorageV3.SupraDataFeedIdStructOutput
  ] & {
    tokenA: string;
    tokenB: string;
    feedData: IPriceOracleStorageV3.SupraDataFeedIdStructOutput;
  };

  export type UpdateUniv3TrustedPairParamsStruct = {
    oracleType: BigNumberish;
    tokenA: AddressLike;
    tokenB: AddressLike;
    isTrusted: boolean;
  };

  export type UpdateUniv3TrustedPairParamsStructOutput = [
    oracleType: bigint,
    tokenA: string,
    tokenB: string,
    isTrusted: boolean
  ] & {
    oracleType: bigint;
    tokenA: string;
    tokenB: string;
    isTrusted: boolean;
  };
}

export declare namespace IPriceOracleStorageV3 {
  export type SupraDataFeedIdStruct = { id: BigNumberish; initialize: boolean };

  export type SupraDataFeedIdStructOutput = [
    id: bigint,
    initialize: boolean
  ] & { id: bigint; initialize: boolean };
}

export interface IPriceOracleV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "chainlinkPriceFeedsUsd"
      | "eth"
      | "gasPriceFeed"
      | "getExchangeRate"
      | "getGasPrice"
      | "getOraclePriceDrop"
      | "getOraclePriceDropFeed"
      | "getPairPriceDrop"
      | "increasePairPriceDrop"
      | "initialize"
      | "pairPriceDrops"
      | "pyth"
      | "pythPairIds"
      | "registry"
      | "setGasPriceFeed"
      | "setOrallyOracle"
      | "setPairPriceDrop"
      | "setPyth"
      | "setSupraPullOracle"
      | "setSupraStorageOracle"
      | "setTimeTolerance"
      | "setTreasury"
      | "setUSDT"
      | "supraDataFeedID"
      | "supraPullOracle"
      | "supraStorageOracle"
      | "timeTolerance"
      | "treasury"
      | "univ3TrustedPairs"
      | "univ3TypeOracles"
      | "updateChainlinkPriceFeedsUsd"
      | "updatePriceDropFeed"
      | "updatePriceDropFeeds"
      | "updatePullOracle"
      | "updatePythPairId"
      | "updateSupraDataFeed"
      | "updateUniv3TrustedPair"
      | "updateUniv3TypeOracle"
      | "usdt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainlinkPriceFeedUpdated"
      | "GasPriceFeedChanged"
      | "PairPriceDropChanged"
      | "PriceDropFeedUpdated"
      | "PriceFeedUpdated"
      | "PythPairIdUpdated"
      | "SupraDataFeedUpdated"
      | "TimeToleranceUpdated"
      | "Univ3OracleUpdated"
      | "Univ3TrustedPairUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chainlinkPriceFeedsUsd",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "eth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDrop",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDropFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairPriceDrop",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePairPriceDrop",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pairPriceDrops",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pyth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pythPairIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGasPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrallyOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairPriceDrop",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPyth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupraPullOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupraStorageOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supraDataFeedID",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supraPullOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supraStorageOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "univ3TrustedPairs",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "univ3TypeOracles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainlinkPriceFeedsUsd",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceDropFeed",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceDropFeeds",
    values: [IPriceOracleV2.UpdatePriceDropFeedsParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePullOracle",
    values: [BytesLike[][], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePythPairId",
    values: [AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupraDataFeed",
    values: [IPriceOracleV2.UpdateSupraDataFeedParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniv3TrustedPair",
    values: [IPriceOracleV2.UpdateUniv3TrustedPairParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniv3TypeOracle",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "chainlinkPriceFeedsUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairPriceDrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pyth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pythPairIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrallyOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPyth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSupraPullOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupraStorageOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUSDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supraDataFeedID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supraPullOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supraStorageOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "univ3TrustedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "univ3TypeOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainlinkPriceFeedsUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceDropFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePullOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePythPairId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupraDataFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniv3TrustedPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniv3TypeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
}

export namespace ChainlinkPriceFeedUpdatedEvent {
  export type InputTuple = [token: AddressLike, priceFeed: AddressLike];
  export type OutputTuple = [token: string, priceFeed: string];
  export interface OutputObject {
    token: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasPriceFeedChangedEvent {
  export type InputTuple = [priceFeed: AddressLike];
  export type OutputTuple = [priceFeed: string];
  export interface OutputObject {
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairPriceDropChangedEvent {
  export type InputTuple = [
    assetA: AddressLike,
    assetB: AddressLike,
    pairPriceDrop: BigNumberish
  ];
  export type OutputTuple = [
    assetA: string,
    assetB: string,
    pairPriceDrop: bigint
  ];
  export interface OutputObject {
    assetA: string;
    assetB: string;
    pairPriceDrop: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDropFeedUpdatedEvent {
  export type InputTuple = [
    assetA: AddressLike,
    assetB: AddressLike,
    priceDropFeed: AddressLike
  ];
  export type OutputTuple = [
    assetA: string,
    assetB: string,
    priceDropFeed: string
  ];
  export interface OutputObject {
    assetA: string;
    assetB: string;
    priceDropFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedUpdatedEvent {
  export type InputTuple = [
    assetA: AddressLike,
    assetB: AddressLike,
    priceFeed: AddressLike
  ];
  export type OutputTuple = [assetA: string, assetB: string, priceFeed: string];
  export interface OutputObject {
    assetA: string;
    assetB: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PythPairIdUpdatedEvent {
  export type InputTuple = [token: AddressLike, priceFeedId: BytesLike];
  export type OutputTuple = [token: string, priceFeedId: string];
  export interface OutputObject {
    token: string;
    priceFeedId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupraDataFeedUpdatedEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [tokenA: string, tokenB: string, id: bigint];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimeToleranceUpdatedEvent {
  export type InputTuple = [timeTolerance: BigNumberish];
  export type OutputTuple = [timeTolerance: bigint];
  export interface OutputObject {
    timeTolerance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Univ3OracleUpdatedEvent {
  export type InputTuple = [oracleType: BigNumberish, oracle: AddressLike];
  export type OutputTuple = [oracleType: bigint, oracle: string];
  export interface OutputObject {
    oracleType: bigint;
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Univ3TrustedPairUpdatedEvent {
  export type InputTuple = [
    oracleType: BigNumberish,
    tokenA: AddressLike,
    tokenB: AddressLike,
    isTrusted: boolean
  ];
  export type OutputTuple = [
    oracleType: bigint,
    tokenA: string,
    tokenB: string,
    isTrusted: boolean
  ];
  export interface OutputObject {
    oracleType: bigint;
    tokenA: string;
    tokenB: string;
    isTrusted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceOracleV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceOracleV2;
  waitForDeployment(): Promise<this>;

  interface: IPriceOracleV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chainlinkPriceFeedsUsd: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  eth: TypedContractMethod<[], [string], "view">;

  gasPriceFeed: TypedContractMethod<[], [string], "view">;

  getExchangeRate: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, oracleData: BytesLike],
    [bigint],
    "payable"
  >;

  getGasPrice: TypedContractMethod<[], [bigint], "view">;

  getOraclePriceDrop: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [bigint],
    "view"
  >;

  getOraclePriceDropFeed: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [string],
    "view"
  >;

  getPairPriceDrop: TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike],
    [bigint],
    "view"
  >;

  increasePairPriceDrop: TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _registry: AddressLike,
      _eth: AddressLike,
      _usdt: AddressLike,
      _treasury: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  pairPriceDrops: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  pyth: TypedContractMethod<[], [string], "view">;

  pythPairIds: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  setGasPriceFeed: TypedContractMethod<
    [priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setOrallyOracle: TypedContractMethod<
    [_orally: AddressLike],
    [void],
    "nonpayable"
  >;

  setPairPriceDrop: TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPyth: TypedContractMethod<[_pyth: AddressLike], [void], "nonpayable">;

  setSupraPullOracle: TypedContractMethod<
    [_supraPullOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupraStorageOracle: TypedContractMethod<
    [_supraStorageOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setTimeTolerance: TypedContractMethod<
    [_timeTolerance: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setUSDT: TypedContractMethod<[_usdt: AddressLike], [void], "nonpayable">;

  supraDataFeedID: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, boolean]],
    "view"
  >;

  supraPullOracle: TypedContractMethod<[], [string], "view">;

  supraStorageOracle: TypedContractMethod<[], [string], "view">;

  timeTolerance: TypedContractMethod<[], [bigint], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  univ3TrustedPairs: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: AddressLike],
    [boolean],
    "view"
  >;

  univ3TypeOracles: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  updateChainlinkPriceFeedsUsd: TypedContractMethod<
    [_tokens: AddressLike[], _feeds: AddressLike[]],
    [void],
    "nonpayable"
  >;

  updatePriceDropFeed: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, priceDropFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceDropFeeds: TypedContractMethod<
    [_updateParams: IPriceOracleV2.UpdatePriceDropFeedsParamsStruct[]],
    [void],
    "nonpayable"
  >;

  updatePullOracle: TypedContractMethod<
    [_data: BytesLike[][], _pullOracleTypes: BigNumberish[]],
    [void],
    "payable"
  >;

  updatePythPairId: TypedContractMethod<
    [_tokens: AddressLike[], _priceFeedIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  updateSupraDataFeed: TypedContractMethod<
    [_params: IPriceOracleV2.UpdateSupraDataFeedParamsStruct[]],
    [void],
    "nonpayable"
  >;

  updateUniv3TrustedPair: TypedContractMethod<
    [_updateParams: IPriceOracleV2.UpdateUniv3TrustedPairParamsStruct[]],
    [void],
    "nonpayable"
  >;

  updateUniv3TypeOracle: TypedContractMethod<
    [_oracleTypes: BigNumberish[], _oracles: AddressLike[]],
    [void],
    "nonpayable"
  >;

  usdt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chainlinkPriceFeedsUsd"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "eth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, oracleData: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getGasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePriceDrop"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOraclePriceDropFeed"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairPriceDrop"
  ): TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePairPriceDrop"
  ): TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _registry: AddressLike,
      _eth: AddressLike,
      _usdt: AddressLike,
      _treasury: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pairPriceDrops"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pyth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pythPairIds"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGasPriceFeed"
  ): TypedContractMethod<[priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOrallyOracle"
  ): TypedContractMethod<[_orally: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPairPriceDrop"
  ): TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPyth"
  ): TypedContractMethod<[_pyth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupraPullOracle"
  ): TypedContractMethod<[_supraPullOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupraStorageOracle"
  ): TypedContractMethod<
    [_supraStorageOracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimeTolerance"
  ): TypedContractMethod<[_timeTolerance: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSDT"
  ): TypedContractMethod<[_usdt: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supraDataFeedID"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "supraPullOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supraStorageOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timeTolerance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "univ3TrustedPairs"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "univ3TypeOracles"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateChainlinkPriceFeedsUsd"
  ): TypedContractMethod<
    [_tokens: AddressLike[], _feeds: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceDropFeed"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, priceDropFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceDropFeeds"
  ): TypedContractMethod<
    [_updateParams: IPriceOracleV2.UpdatePriceDropFeedsParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePullOracle"
  ): TypedContractMethod<
    [_data: BytesLike[][], _pullOracleTypes: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updatePythPairId"
  ): TypedContractMethod<
    [_tokens: AddressLike[], _priceFeedIds: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSupraDataFeed"
  ): TypedContractMethod<
    [_params: IPriceOracleV2.UpdateSupraDataFeedParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUniv3TrustedPair"
  ): TypedContractMethod<
    [_updateParams: IPriceOracleV2.UpdateUniv3TrustedPairParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateUniv3TypeOracle"
  ): TypedContractMethod<
    [_oracleTypes: BigNumberish[], _oracles: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ChainlinkPriceFeedUpdated"
  ): TypedContractEvent<
    ChainlinkPriceFeedUpdatedEvent.InputTuple,
    ChainlinkPriceFeedUpdatedEvent.OutputTuple,
    ChainlinkPriceFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GasPriceFeedChanged"
  ): TypedContractEvent<
    GasPriceFeedChangedEvent.InputTuple,
    GasPriceFeedChangedEvent.OutputTuple,
    GasPriceFeedChangedEvent.OutputObject
  >;
  getEvent(
    key: "PairPriceDropChanged"
  ): TypedContractEvent<
    PairPriceDropChangedEvent.InputTuple,
    PairPriceDropChangedEvent.OutputTuple,
    PairPriceDropChangedEvent.OutputObject
  >;
  getEvent(
    key: "PriceDropFeedUpdated"
  ): TypedContractEvent<
    PriceDropFeedUpdatedEvent.InputTuple,
    PriceDropFeedUpdatedEvent.OutputTuple,
    PriceDropFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedUpdated"
  ): TypedContractEvent<
    PriceFeedUpdatedEvent.InputTuple,
    PriceFeedUpdatedEvent.OutputTuple,
    PriceFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PythPairIdUpdated"
  ): TypedContractEvent<
    PythPairIdUpdatedEvent.InputTuple,
    PythPairIdUpdatedEvent.OutputTuple,
    PythPairIdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SupraDataFeedUpdated"
  ): TypedContractEvent<
    SupraDataFeedUpdatedEvent.InputTuple,
    SupraDataFeedUpdatedEvent.OutputTuple,
    SupraDataFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TimeToleranceUpdated"
  ): TypedContractEvent<
    TimeToleranceUpdatedEvent.InputTuple,
    TimeToleranceUpdatedEvent.OutputTuple,
    TimeToleranceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Univ3OracleUpdated"
  ): TypedContractEvent<
    Univ3OracleUpdatedEvent.InputTuple,
    Univ3OracleUpdatedEvent.OutputTuple,
    Univ3OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Univ3TrustedPairUpdated"
  ): TypedContractEvent<
    Univ3TrustedPairUpdatedEvent.InputTuple,
    Univ3TrustedPairUpdatedEvent.OutputTuple,
    Univ3TrustedPairUpdatedEvent.OutputObject
  >;

  filters: {
    "ChainlinkPriceFeedUpdated(address,address)": TypedContractEvent<
      ChainlinkPriceFeedUpdatedEvent.InputTuple,
      ChainlinkPriceFeedUpdatedEvent.OutputTuple,
      ChainlinkPriceFeedUpdatedEvent.OutputObject
    >;
    ChainlinkPriceFeedUpdated: TypedContractEvent<
      ChainlinkPriceFeedUpdatedEvent.InputTuple,
      ChainlinkPriceFeedUpdatedEvent.OutputTuple,
      ChainlinkPriceFeedUpdatedEvent.OutputObject
    >;

    "GasPriceFeedChanged(address)": TypedContractEvent<
      GasPriceFeedChangedEvent.InputTuple,
      GasPriceFeedChangedEvent.OutputTuple,
      GasPriceFeedChangedEvent.OutputObject
    >;
    GasPriceFeedChanged: TypedContractEvent<
      GasPriceFeedChangedEvent.InputTuple,
      GasPriceFeedChangedEvent.OutputTuple,
      GasPriceFeedChangedEvent.OutputObject
    >;

    "PairPriceDropChanged(address,address,uint256)": TypedContractEvent<
      PairPriceDropChangedEvent.InputTuple,
      PairPriceDropChangedEvent.OutputTuple,
      PairPriceDropChangedEvent.OutputObject
    >;
    PairPriceDropChanged: TypedContractEvent<
      PairPriceDropChangedEvent.InputTuple,
      PairPriceDropChangedEvent.OutputTuple,
      PairPriceDropChangedEvent.OutputObject
    >;

    "PriceDropFeedUpdated(address,address,address)": TypedContractEvent<
      PriceDropFeedUpdatedEvent.InputTuple,
      PriceDropFeedUpdatedEvent.OutputTuple,
      PriceDropFeedUpdatedEvent.OutputObject
    >;
    PriceDropFeedUpdated: TypedContractEvent<
      PriceDropFeedUpdatedEvent.InputTuple,
      PriceDropFeedUpdatedEvent.OutputTuple,
      PriceDropFeedUpdatedEvent.OutputObject
    >;

    "PriceFeedUpdated(address,address,address)": TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;
    PriceFeedUpdated: TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;

    "PythPairIdUpdated(address,bytes32)": TypedContractEvent<
      PythPairIdUpdatedEvent.InputTuple,
      PythPairIdUpdatedEvent.OutputTuple,
      PythPairIdUpdatedEvent.OutputObject
    >;
    PythPairIdUpdated: TypedContractEvent<
      PythPairIdUpdatedEvent.InputTuple,
      PythPairIdUpdatedEvent.OutputTuple,
      PythPairIdUpdatedEvent.OutputObject
    >;

    "SupraDataFeedUpdated(address,address,uint256)": TypedContractEvent<
      SupraDataFeedUpdatedEvent.InputTuple,
      SupraDataFeedUpdatedEvent.OutputTuple,
      SupraDataFeedUpdatedEvent.OutputObject
    >;
    SupraDataFeedUpdated: TypedContractEvent<
      SupraDataFeedUpdatedEvent.InputTuple,
      SupraDataFeedUpdatedEvent.OutputTuple,
      SupraDataFeedUpdatedEvent.OutputObject
    >;

    "TimeToleranceUpdated(uint256)": TypedContractEvent<
      TimeToleranceUpdatedEvent.InputTuple,
      TimeToleranceUpdatedEvent.OutputTuple,
      TimeToleranceUpdatedEvent.OutputObject
    >;
    TimeToleranceUpdated: TypedContractEvent<
      TimeToleranceUpdatedEvent.InputTuple,
      TimeToleranceUpdatedEvent.OutputTuple,
      TimeToleranceUpdatedEvent.OutputObject
    >;

    "Univ3OracleUpdated(uint256,address)": TypedContractEvent<
      Univ3OracleUpdatedEvent.InputTuple,
      Univ3OracleUpdatedEvent.OutputTuple,
      Univ3OracleUpdatedEvent.OutputObject
    >;
    Univ3OracleUpdated: TypedContractEvent<
      Univ3OracleUpdatedEvent.InputTuple,
      Univ3OracleUpdatedEvent.OutputTuple,
      Univ3OracleUpdatedEvent.OutputObject
    >;

    "Univ3TrustedPairUpdated(uint256,address,address,bool)": TypedContractEvent<
      Univ3TrustedPairUpdatedEvent.InputTuple,
      Univ3TrustedPairUpdatedEvent.OutputTuple,
      Univ3TrustedPairUpdatedEvent.OutputObject
    >;
    Univ3TrustedPairUpdated: TypedContractEvent<
      Univ3TrustedPairUpdatedEvent.InputTuple,
      Univ3TrustedPairUpdatedEvent.OutputTuple,
      Univ3TrustedPairUpdatedEvent.OutputObject
    >;
  };
}
