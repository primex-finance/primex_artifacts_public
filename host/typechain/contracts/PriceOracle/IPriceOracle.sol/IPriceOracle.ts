/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eth"
      | "gasPriceFeed"
      | "getDirectPriceFeed"
      | "getExchangeRate"
      | "getGasPrice"
      | "getOraclePriceDrop"
      | "getOraclePriceDropFeed"
      | "getPairPriceDrop"
      | "getPriceFeedsPair"
      | "increasePairPriceDrop"
      | "initialize"
      | "pairPriceDrops"
      | "registry"
      | "setGasPriceFeed"
      | "setPairPriceDrop"
      | "updatePriceDropFeed"
      | "updatePriceFeed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GasPriceFeedChanged"
      | "PairPriceDropChanged"
      | "PriceDropFeedUpdated"
      | "PriceFeedUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "eth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectPriceFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDrop",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceDropFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairPriceDrop",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeedsPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePairPriceDrop",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pairPriceDrops",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGasPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairPriceDrop",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceDropFeed",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "eth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeedsPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairPriceDrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairPriceDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceDropFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
}

export namespace GasPriceFeedChangedEvent {
  export type InputTuple = [priceFeed: AddressLike];
  export type OutputTuple = [priceFeed: string];
  export interface OutputObject {
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairPriceDropChangedEvent {
  export type InputTuple = [
    assetA: AddressLike,
    assetB: AddressLike,
    pairPriceDrop: BigNumberish
  ];
  export type OutputTuple = [
    assetA: string,
    assetB: string,
    pairPriceDrop: bigint
  ];
  export interface OutputObject {
    assetA: string;
    assetB: string;
    pairPriceDrop: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDropFeedUpdatedEvent {
  export type InputTuple = [
    assetA: AddressLike,
    assetB: AddressLike,
    priceDropFeed: AddressLike
  ];
  export type OutputTuple = [
    assetA: string,
    assetB: string,
    priceDropFeed: string
  ];
  export interface OutputObject {
    assetA: string;
    assetB: string;
    priceDropFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedUpdatedEvent {
  export type InputTuple = [
    assetA: AddressLike,
    assetB: AddressLike,
    priceFeed: AddressLike
  ];
  export type OutputTuple = [assetA: string, assetB: string, priceFeed: string];
  export interface OutputObject {
    assetA: string;
    assetB: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: IPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eth: TypedContractMethod<[], [string], "view">;

  gasPriceFeed: TypedContractMethod<[], [string], "view">;

  getDirectPriceFeed: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [string],
    "view"
  >;

  getExchangeRate: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [[bigint, boolean]],
    "view"
  >;

  getGasPrice: TypedContractMethod<[], [bigint], "view">;

  getOraclePriceDrop: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [bigint],
    "view"
  >;

  getOraclePriceDropFeed: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [string],
    "view"
  >;

  getPairPriceDrop: TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike],
    [bigint],
    "view"
  >;

  getPriceFeedsPair: TypedContractMethod<
    [baseAsset: AddressLike, quoteAsset: AddressLike],
    [[string, string]],
    "view"
  >;

  increasePairPriceDrop: TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_registry: AddressLike, _eth: AddressLike],
    [void],
    "nonpayable"
  >;

  pairPriceDrops: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  setGasPriceFeed: TypedContractMethod<
    [priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setPairPriceDrop: TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePriceDropFeed: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, priceDropFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceFeed: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDirectPriceFeed"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [[bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePriceDrop"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOraclePriceDropFeed"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairPriceDrop"
  ): TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceFeedsPair"
  ): TypedContractMethod<
    [baseAsset: AddressLike, quoteAsset: AddressLike],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePairPriceDrop"
  ): TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_registry: AddressLike, _eth: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pairPriceDrops"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGasPriceFeed"
  ): TypedContractMethod<[priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPairPriceDrop"
  ): TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _pairPriceDrop: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceDropFeed"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, priceDropFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GasPriceFeedChanged"
  ): TypedContractEvent<
    GasPriceFeedChangedEvent.InputTuple,
    GasPriceFeedChangedEvent.OutputTuple,
    GasPriceFeedChangedEvent.OutputObject
  >;
  getEvent(
    key: "PairPriceDropChanged"
  ): TypedContractEvent<
    PairPriceDropChangedEvent.InputTuple,
    PairPriceDropChangedEvent.OutputTuple,
    PairPriceDropChangedEvent.OutputObject
  >;
  getEvent(
    key: "PriceDropFeedUpdated"
  ): TypedContractEvent<
    PriceDropFeedUpdatedEvent.InputTuple,
    PriceDropFeedUpdatedEvent.OutputTuple,
    PriceDropFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedUpdated"
  ): TypedContractEvent<
    PriceFeedUpdatedEvent.InputTuple,
    PriceFeedUpdatedEvent.OutputTuple,
    PriceFeedUpdatedEvent.OutputObject
  >;

  filters: {
    "GasPriceFeedChanged(address)": TypedContractEvent<
      GasPriceFeedChangedEvent.InputTuple,
      GasPriceFeedChangedEvent.OutputTuple,
      GasPriceFeedChangedEvent.OutputObject
    >;
    GasPriceFeedChanged: TypedContractEvent<
      GasPriceFeedChangedEvent.InputTuple,
      GasPriceFeedChangedEvent.OutputTuple,
      GasPriceFeedChangedEvent.OutputObject
    >;

    "PairPriceDropChanged(address,address,uint256)": TypedContractEvent<
      PairPriceDropChangedEvent.InputTuple,
      PairPriceDropChangedEvent.OutputTuple,
      PairPriceDropChangedEvent.OutputObject
    >;
    PairPriceDropChanged: TypedContractEvent<
      PairPriceDropChangedEvent.InputTuple,
      PairPriceDropChangedEvent.OutputTuple,
      PairPriceDropChangedEvent.OutputObject
    >;

    "PriceDropFeedUpdated(address,address,address)": TypedContractEvent<
      PriceDropFeedUpdatedEvent.InputTuple,
      PriceDropFeedUpdatedEvent.OutputTuple,
      PriceDropFeedUpdatedEvent.OutputObject
    >;
    PriceDropFeedUpdated: TypedContractEvent<
      PriceDropFeedUpdatedEvent.InputTuple,
      PriceDropFeedUpdatedEvent.OutputTuple,
      PriceDropFeedUpdatedEvent.OutputObject
    >;

    "PriceFeedUpdated(address,address,address)": TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;
    PriceFeedUpdated: TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;
  };
}
