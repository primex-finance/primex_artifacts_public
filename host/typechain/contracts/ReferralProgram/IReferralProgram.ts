/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IReferralProgramStorage {
  export type ReferralProgramUnitStruct = {
    referrer: AddressLike;
    referrals: AddressLike[];
  };

  export type ReferralProgramUnitStructOutput = [
    referrer: string,
    referrals: string[]
  ] & { referrer: string; referrals: string[] };
}

export interface IReferralProgramInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getReferralsOf"
      | "getReferralsOfLength"
      | "getReferrers"
      | "initialize"
      | "referralsOf"
      | "referrerOf"
      | "register"
      | "registry"
      | "setReferrals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RegisteredUser"
      | "SetReferralByAdmin"
      | "SetReferrerByAdmin"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getReferralsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralsOfLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralsOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "register", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setReferrals",
    values: [IReferralProgramStorage.ReferralProgramUnitStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReferralsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralsOfLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferrals",
    data: BytesLike
  ): Result;
}

export namespace RegisteredUserEvent {
  export type InputTuple = [user: AddressLike, parent: AddressLike];
  export type OutputTuple = [user: string, parent: string];
  export interface OutputObject {
    user: string;
    parent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReferralByAdminEvent {
  export type InputTuple = [referrer: AddressLike, referral: AddressLike];
  export type OutputTuple = [referrer: string, referral: string];
  export interface OutputObject {
    referrer: string;
    referral: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReferrerByAdminEvent {
  export type InputTuple = [referrer: AddressLike];
  export type OutputTuple = [referrer: string];
  export interface OutputObject {
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IReferralProgram extends BaseContract {
  connect(runner?: ContractRunner | null): IReferralProgram;
  waitForDeployment(): Promise<this>;

  interface: IReferralProgramInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getReferralsOf: TypedContractMethod<
    [_referrer: AddressLike],
    [string[]],
    "view"
  >;

  getReferralsOfLength: TypedContractMethod<
    [_referrer: AddressLike],
    [bigint],
    "view"
  >;

  getReferrers: TypedContractMethod<[], [string[]], "view">;

  initialize: TypedContractMethod<
    [_registry: AddressLike],
    [void],
    "nonpayable"
  >;

  referralsOf: TypedContractMethod<
    [_referrer: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;

  referrerOf: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  register: TypedContractMethod<
    [_referrerSignature: BytesLike],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  setReferrals: TypedContractMethod<
    [referralProgramUnits: IReferralProgramStorage.ReferralProgramUnitStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getReferralsOf"
  ): TypedContractMethod<[_referrer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getReferralsOfLength"
  ): TypedContractMethod<[_referrer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReferrers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "referralsOf"
  ): TypedContractMethod<
    [_referrer: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "referrerOf"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[_referrerSignature: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setReferrals"
  ): TypedContractMethod<
    [referralProgramUnits: IReferralProgramStorage.ReferralProgramUnitStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RegisteredUser"
  ): TypedContractEvent<
    RegisteredUserEvent.InputTuple,
    RegisteredUserEvent.OutputTuple,
    RegisteredUserEvent.OutputObject
  >;
  getEvent(
    key: "SetReferralByAdmin"
  ): TypedContractEvent<
    SetReferralByAdminEvent.InputTuple,
    SetReferralByAdminEvent.OutputTuple,
    SetReferralByAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetReferrerByAdmin"
  ): TypedContractEvent<
    SetReferrerByAdminEvent.InputTuple,
    SetReferrerByAdminEvent.OutputTuple,
    SetReferrerByAdminEvent.OutputObject
  >;

  filters: {
    "RegisteredUser(address,address)": TypedContractEvent<
      RegisteredUserEvent.InputTuple,
      RegisteredUserEvent.OutputTuple,
      RegisteredUserEvent.OutputObject
    >;
    RegisteredUser: TypedContractEvent<
      RegisteredUserEvent.InputTuple,
      RegisteredUserEvent.OutputTuple,
      RegisteredUserEvent.OutputObject
    >;

    "SetReferralByAdmin(address,address)": TypedContractEvent<
      SetReferralByAdminEvent.InputTuple,
      SetReferralByAdminEvent.OutputTuple,
      SetReferralByAdminEvent.OutputObject
    >;
    SetReferralByAdmin: TypedContractEvent<
      SetReferralByAdminEvent.InputTuple,
      SetReferralByAdminEvent.OutputTuple,
      SetReferralByAdminEvent.OutputObject
    >;

    "SetReferrerByAdmin(address)": TypedContractEvent<
      SetReferrerByAdminEvent.InputTuple,
      SetReferrerByAdminEvent.OutputTuple,
      SetReferrerByAdminEvent.OutputObject
    >;
    SetReferrerByAdmin: TypedContractEvent<
      SetReferrerByAdminEvent.InputTuple,
      SetReferrerByAdminEvent.OutputTuple,
      SetReferrerByAdminEvent.OutputObject
    >;
  };
}
