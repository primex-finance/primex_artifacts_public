/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IBucketEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "TopUpTreasury" | "Withdraw" | "WithdrawFromAave"
  ): EventFragment;
}

export namespace TopUpTreasuryEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    withdrawer: AddressLike,
    borrowAssetReceiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    withdrawer: string,
    borrowAssetReceiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    withdrawer: string;
    borrowAssetReceiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFromAaveEvent {
  export type InputTuple = [pool: AddressLike, amount: BigNumberish];
  export type OutputTuple = [pool: string, amount: bigint];
  export interface OutputObject {
    pool: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBucketEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IBucketEvents;
  waitForDeployment(): Promise<this>;

  interface: IBucketEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "TopUpTreasury"
  ): TypedContractEvent<
    TopUpTreasuryEvent.InputTuple,
    TopUpTreasuryEvent.OutputTuple,
    TopUpTreasuryEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFromAave"
  ): TypedContractEvent<
    WithdrawFromAaveEvent.InputTuple,
    WithdrawFromAaveEvent.OutputTuple,
    WithdrawFromAaveEvent.OutputObject
  >;

  filters: {
    "TopUpTreasury(address,uint256)": TypedContractEvent<
      TopUpTreasuryEvent.InputTuple,
      TopUpTreasuryEvent.OutputTuple,
      TopUpTreasuryEvent.OutputObject
    >;
    TopUpTreasury: TypedContractEvent<
      TopUpTreasuryEvent.InputTuple,
      TopUpTreasuryEvent.OutputTuple,
      TopUpTreasuryEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawFromAave(address,uint256)": TypedContractEvent<
      WithdrawFromAaveEvent.InputTuple,
      WithdrawFromAaveEvent.OutputTuple,
      WithdrawFromAaveEvent.OutputObject
    >;
    WithdrawFromAave: TypedContractEvent<
      WithdrawFromAaveEvent.InputTuple,
      WithdrawFromAaveEvent.OutputTuple,
      WithdrawFromAaveEvent.OutputObject
    >;
  };
}
