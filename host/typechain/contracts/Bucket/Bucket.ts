/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PrimexPricingLibrary {
  export type PathStruct = {
    dexName: string;
    shares: BigNumberish;
    payload: BytesLike;
  };

  export type PathStructOutput = [
    dexName: string,
    shares: bigint,
    payload: string
  ] & { dexName: string; shares: bigint; payload: string };

  export type RouteStruct = {
    to: AddressLike;
    paths: PrimexPricingLibrary.PathStruct[];
  };

  export type RouteStructOutput = [
    to: string,
    paths: PrimexPricingLibrary.PathStructOutput[]
  ] & { to: string; paths: PrimexPricingLibrary.PathStructOutput[] };

  export type MegaRouteStruct = {
    shares: BigNumberish;
    routes: PrimexPricingLibrary.RouteStruct[];
  };

  export type MegaRouteStructOutput = [
    shares: bigint,
    routes: PrimexPricingLibrary.RouteStructOutput[]
  ] & { shares: bigint; routes: PrimexPricingLibrary.RouteStructOutput[] };
}

export declare namespace IBucketStorage {
  export type LiquidityMiningParamsStruct = {
    liquidityMiningRewardDistributor: AddressLike;
    isBucketLaunched: boolean;
    accumulatingAmount: BigNumberish;
    deadlineTimestamp: BigNumberish;
    stabilizationDuration: BigNumberish;
    stabilizationEndTimestamp: BigNumberish;
    maxAmountPerUser: BigNumberish;
    maxDuration: BigNumberish;
    maxStabilizationEndTimestamp: BigNumberish;
  };

  export type LiquidityMiningParamsStructOutput = [
    liquidityMiningRewardDistributor: string,
    isBucketLaunched: boolean,
    accumulatingAmount: bigint,
    deadlineTimestamp: bigint,
    stabilizationDuration: bigint,
    stabilizationEndTimestamp: bigint,
    maxAmountPerUser: bigint,
    maxDuration: bigint,
    maxStabilizationEndTimestamp: bigint
  ] & {
    liquidityMiningRewardDistributor: string;
    isBucketLaunched: boolean;
    accumulatingAmount: bigint;
    deadlineTimestamp: bigint;
    stabilizationDuration: bigint;
    stabilizationEndTimestamp: bigint;
    maxAmountPerUser: bigint;
    maxDuration: bigint;
    maxStabilizationEndTimestamp: bigint;
  };
}

export declare namespace IBucket {
  export type ConstructorParamsStruct = {
    name: string;
    pToken: AddressLike;
    debtToken: AddressLike;
    positionManager: AddressLike;
    priceOracle: AddressLike;
    dns: AddressLike;
    reserve: AddressLike;
    whiteBlackList: AddressLike;
    assets: AddressLike[];
    borrowedAsset: AddressLike;
    feeBuffer: BigNumberish;
    withdrawalFeeRate: BigNumberish;
    reserveRate: BigNumberish;
    liquidityMiningRewardDistributor: AddressLike;
    liquidityMiningAmount: BigNumberish;
    liquidityMiningDeadline: BigNumberish;
    stabilizationDuration: BigNumberish;
    interestRateStrategy: AddressLike;
    estimatedBar: BigNumberish;
    estimatedLar: BigNumberish;
    maxAmountPerUser: BigNumberish;
    isReinvestToAaveEnabled: boolean;
    barCalcParams: BytesLike;
    maxTotalDeposit: BigNumberish;
  };

  export type ConstructorParamsStructOutput = [
    name: string,
    pToken: string,
    debtToken: string,
    positionManager: string,
    priceOracle: string,
    dns: string,
    reserve: string,
    whiteBlackList: string,
    assets: string[],
    borrowedAsset: string,
    feeBuffer: bigint,
    withdrawalFeeRate: bigint,
    reserveRate: bigint,
    liquidityMiningRewardDistributor: string,
    liquidityMiningAmount: bigint,
    liquidityMiningDeadline: bigint,
    stabilizationDuration: bigint,
    interestRateStrategy: string,
    estimatedBar: bigint,
    estimatedLar: bigint,
    maxAmountPerUser: bigint,
    isReinvestToAaveEnabled: boolean,
    barCalcParams: string,
    maxTotalDeposit: bigint
  ] & {
    name: string;
    pToken: string;
    debtToken: string;
    positionManager: string;
    priceOracle: string;
    dns: string;
    reserve: string;
    whiteBlackList: string;
    assets: string[];
    borrowedAsset: string;
    feeBuffer: bigint;
    withdrawalFeeRate: bigint;
    reserveRate: bigint;
    liquidityMiningRewardDistributor: string;
    liquidityMiningAmount: bigint;
    liquidityMiningDeadline: bigint;
    stabilizationDuration: bigint;
    interestRateStrategy: string;
    estimatedBar: bigint;
    estimatedLar: bigint;
    maxAmountPerUser: bigint;
    isReinvestToAaveEnabled: boolean;
    barCalcParams: string;
    maxTotalDeposit: bigint;
  };
}

export interface BucketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aaveDeposit"
      | "addAsset"
      | "allowedAssets"
      | "availableLiquidity"
      | "bar"
      | "batchDecreaseTradersDebt"
      | "borrowedAsset"
      | "bucketExtension"
      | "cumulateToLiquidityIndex"
      | "debtToken"
      | "decreaseTraderDebt"
      | "deposit(address,uint256,bool)"
      | "deposit(address,uint256)"
      | "depositFromBucket"
      | "estimatedBar"
      | "estimatedLar"
      | "feeBuffer"
      | "getAllowedAssets"
      | "getLiquidityMiningParams"
      | "getNormalizedIncome"
      | "getNormalizedVariableDebt"
      | "increaseDebt"
      | "initialize"
      | "interestRateStrategy"
      | "isActive"
      | "isBucketStable"
      | "isDelisted"
      | "isDeprecated"
      | "isReinvestToAaveEnabled"
      | "isWithdrawAfterDelistingAvailable"
      | "lar"
      | "lastUpdatedBlockTimestamp"
      | "liquidityIndex"
      | "maxAssetLeverage(address)"
      | "maxAssetLeverage(address,uint256)"
      | "maxTotalDeposit"
      | "name"
      | "pToken"
      | "paybackPermanentLoss"
      | "performFlashLoanTransfer"
      | "permanentLoss"
      | "permanentLossScaled"
      | "positionManager"
      | "receiveDeposit"
      | "registry"
      | "removeAsset"
      | "reserve"
      | "reserveRate"
      | "returnLiquidityFromAaveToBucket"
      | "setBarCalculationParams"
      | "setBucketExtension"
      | "setFeeBuffer"
      | "setInterestRateStrategy"
      | "setMaxTotalDeposit"
      | "setReserveRate"
      | "setWithdrawalFee"
      | "supportsInterface"
      | "updateRates"
      | "variableBorrowIndex"
      | "whiteBlackList"
      | "withdraw"
      | "withdrawAfterDelisting"
      | "withdrawalFeeRate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAsset"
      | "BarCalculationParamsChanged"
      | "BucketLaunched"
      | "ChangedBucketExtension"
      | "Deposit"
      | "DepositToAave"
      | "FeeBufferChanged"
      | "Initialized"
      | "InterestRateStrategyChanged"
      | "MaxTotalDepositChanged"
      | "RatesIndexesUpdated"
      | "RemoveAsset"
      | "ReserveRateChanged"
      | "TopUpTreasury"
      | "Withdraw"
      | "WithdrawFromAave"
      | "WithdrawalFeeChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "aaveDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "availableLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchDecreaseTradersDebt",
    values: [
      AddressLike[],
      BigNumberish[],
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowedAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bucketExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulateToLiquidityIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseTraderDebt",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,uint256,bool)",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFromBucket",
    values: [
      string,
      AddressLike,
      PrimexPricingLibrary.MegaRouteStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedBar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedLar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeBuffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllowedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityMiningParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedIncome",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedVariableDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IBucket.ConstructorParamsStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isBucketStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDelisted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isReinvestToAaveEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawAfterDelistingAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAssetLeverage(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAssetLeverage(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paybackPermanentLoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performFlashLoanTransfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permanentLoss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permanentLossScaled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveDeposit",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserveRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnLiquidityFromAaveToBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBarCalculationParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBucketExtension",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableBorrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteBlackList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAfterDelisting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFeeRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aaveDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchDecreaseTradersDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulateToLiquidityIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTraderDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFromBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedBar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedLar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityMiningParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedVariableDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBucketStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDelisted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReinvestToAaveEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawAfterDelistingAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAssetLeverage(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAssetLeverage(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paybackPermanentLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performFlashLoanTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permanentLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permanentLossScaled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnLiquidityFromAaveToBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBarCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBucketExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAfterDelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFeeRate",
    data: BytesLike
  ): Result;
}

export namespace AddAssetEvent {
  export type InputTuple = [addedAsset: AddressLike];
  export type OutputTuple = [addedAsset: string];
  export interface OutputObject {
    addedAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BarCalculationParamsChangedEvent {
  export type InputTuple = [params: BytesLike];
  export type OutputTuple = [params: string];
  export interface OutputObject {
    params: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketLaunchedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedBucketExtensionEvent {
  export type InputTuple = [newBucketExtension: AddressLike];
  export type OutputTuple = [newBucketExtension: string];
  export interface OutputObject {
    newBucketExtension: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositer: AddressLike,
    pTokenReceiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    depositer: string,
    pTokenReceiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    depositer: string;
    pTokenReceiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositToAaveEvent {
  export type InputTuple = [pool: AddressLike, amount: BigNumberish];
  export type OutputTuple = [pool: string, amount: bigint];
  export interface OutputObject {
    pool: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeBufferChangedEvent {
  export type InputTuple = [feeBuffer: BigNumberish];
  export type OutputTuple = [feeBuffer: bigint];
  export interface OutputObject {
    feeBuffer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestRateStrategyChangedEvent {
  export type InputTuple = [interestRateStrategy: AddressLike];
  export type OutputTuple = [interestRateStrategy: string];
  export interface OutputObject {
    interestRateStrategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTotalDepositChangedEvent {
  export type InputTuple = [maxTotalDeposit: BigNumberish];
  export type OutputTuple = [maxTotalDeposit: bigint];
  export interface OutputObject {
    maxTotalDeposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatesIndexesUpdatedEvent {
  export type InputTuple = [
    bar: BigNumberish,
    lar: BigNumberish,
    variableBorrowIndex: BigNumberish,
    liquidityIndex: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bar: bigint,
    lar: bigint,
    variableBorrowIndex: bigint,
    liquidityIndex: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    bar: bigint;
    lar: bigint;
    variableBorrowIndex: bigint;
    liquidityIndex: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAssetEvent {
  export type InputTuple = [deletedAsset: AddressLike];
  export type OutputTuple = [deletedAsset: string];
  export interface OutputObject {
    deletedAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveRateChangedEvent {
  export type InputTuple = [reserveRate: BigNumberish];
  export type OutputTuple = [reserveRate: bigint];
  export interface OutputObject {
    reserveRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopUpTreasuryEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    withdrawer: AddressLike,
    borrowAssetReceiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    withdrawer: string,
    borrowAssetReceiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    withdrawer: string;
    borrowAssetReceiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFromAaveEvent {
  export type InputTuple = [pool: AddressLike, amount: BigNumberish];
  export type OutputTuple = [pool: string, amount: bigint];
  export interface OutputObject {
    pool: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalFeeChangedEvent {
  export type InputTuple = [withdrawalFeeRate: BigNumberish];
  export type OutputTuple = [withdrawalFeeRate: bigint];
  export interface OutputObject {
    withdrawalFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bucket extends BaseContract {
  connect(runner?: ContractRunner | null): Bucket;
  waitForDeployment(): Promise<this>;

  interface: BucketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aaveDeposit: TypedContractMethod<[], [bigint], "view">;

  addAsset: TypedContractMethod<[_newAsset: AddressLike], [void], "nonpayable">;

  allowedAssets: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { index: bigint; isSupported: boolean }],
    "view"
  >;

  availableLiquidity: TypedContractMethod<[], [bigint], "view">;

  bar: TypedContractMethod<[], [bigint], "view">;

  batchDecreaseTradersDebt: TypedContractMethod<
    [
      _traders: AddressLike[],
      _debtsToBurn: BigNumberish[],
      _receiverOfAmountToReturn: AddressLike,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      _length: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  borrowedAsset: TypedContractMethod<[], [string], "view">;

  bucketExtension: TypedContractMethod<[], [string], "view">;

  cumulateToLiquidityIndex: TypedContractMethod<
    [_amount: BigNumberish, _availableLiquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  debtToken: TypedContractMethod<[], [string], "view">;

  decreaseTraderDebt: TypedContractMethod<
    [
      _trader: AddressLike,
      _debtToBurn: BigNumberish,
      _receiverOfAmountToReturn: AddressLike,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "deposit(address,uint256,bool)": TypedContractMethod<
    [
      _pTokenReceiver: AddressLike,
      _amount: BigNumberish,
      _takeDepositFromWallet: boolean
    ],
    [void],
    "nonpayable"
  >;

  "deposit(address,uint256)": TypedContractMethod<
    [_pTokenReceiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositFromBucket: TypedContractMethod<
    [
      _bucketTo: string,
      _swapManager: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  estimatedBar: TypedContractMethod<[], [bigint], "view">;

  estimatedLar: TypedContractMethod<[], [bigint], "view">;

  feeBuffer: TypedContractMethod<[], [bigint], "view">;

  getAllowedAssets: TypedContractMethod<[], [string[]], "view">;

  getLiquidityMiningParams: TypedContractMethod<
    [],
    [IBucketStorage.LiquidityMiningParamsStructOutput],
    "view"
  >;

  getNormalizedIncome: TypedContractMethod<[], [bigint], "view">;

  getNormalizedVariableDebt: TypedContractMethod<[], [bigint], "view">;

  increaseDebt: TypedContractMethod<
    [_trader: AddressLike, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_params: IBucket.ConstructorParamsStruct, _registry: AddressLike],
    [void],
    "nonpayable"
  >;

  interestRateStrategy: TypedContractMethod<[], [string], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  isBucketStable: TypedContractMethod<[], [boolean], "view">;

  isDelisted: TypedContractMethod<[], [boolean], "view">;

  isDeprecated: TypedContractMethod<[], [boolean], "view">;

  isReinvestToAaveEnabled: TypedContractMethod<[], [boolean], "view">;

  isWithdrawAfterDelistingAvailable: TypedContractMethod<[], [boolean], "view">;

  lar: TypedContractMethod<[], [bigint], "view">;

  lastUpdatedBlockTimestamp: TypedContractMethod<[], [bigint], "view">;

  liquidityIndex: TypedContractMethod<[], [bigint], "view">;

  "maxAssetLeverage(address)": TypedContractMethod<
    [_asset: AddressLike],
    [bigint],
    "view"
  >;

  "maxAssetLeverage(address,uint256)": TypedContractMethod<
    [_asset: AddressLike, _feeRate: BigNumberish],
    [bigint],
    "view"
  >;

  maxTotalDeposit: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  pToken: TypedContractMethod<[], [string], "view">;

  paybackPermanentLoss: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  performFlashLoanTransfer: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  permanentLoss: TypedContractMethod<[], [bigint], "view">;

  permanentLossScaled: TypedContractMethod<[], [bigint], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  receiveDeposit: TypedContractMethod<
    [
      _pTokenReceiver: AddressLike,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _bucketFrom: string
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  removeAsset: TypedContractMethod<
    [_assetToDelete: AddressLike],
    [void],
    "nonpayable"
  >;

  reserve: TypedContractMethod<[], [string], "view">;

  reserveRate: TypedContractMethod<[], [bigint], "view">;

  returnLiquidityFromAaveToBucket: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  setBarCalculationParams: TypedContractMethod<
    [_params: BytesLike],
    [void],
    "nonpayable"
  >;

  setBucketExtension: TypedContractMethod<
    [_newBucketExtension: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeBuffer: TypedContractMethod<
    [_feeBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;

  setInterestRateStrategy: TypedContractMethod<
    [_interestRateStrategy: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxTotalDeposit: TypedContractMethod<
    [_maxTotalDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReserveRate: TypedContractMethod<
    [_reserveRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawalFee: TypedContractMethod<
    [_withdrawalFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateRates: TypedContractMethod<[], [void], "nonpayable">;

  variableBorrowIndex: TypedContractMethod<[], [bigint], "view">;

  whiteBlackList: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_borrowAssetReceiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAfterDelisting: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawalFeeRate: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aaveDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAsset"
  ): TypedContractMethod<[_newAsset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedAssets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { index: bigint; isSupported: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "availableLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchDecreaseTradersDebt"
  ): TypedContractMethod<
    [
      _traders: AddressLike[],
      _debtsToBurn: BigNumberish[],
      _receiverOfAmountToReturn: AddressLike,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish,
      _length: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowedAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bucketExtension"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cumulateToLiquidityIndex"
  ): TypedContractMethod<
    [_amount: BigNumberish, _availableLiquidity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decreaseTraderDebt"
  ): TypedContractMethod<
    [
      _trader: AddressLike,
      _debtToBurn: BigNumberish,
      _receiverOfAmountToReturn: AddressLike,
      _amountToReturn: BigNumberish,
      _permanentLossAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(address,uint256,bool)"
  ): TypedContractMethod<
    [
      _pTokenReceiver: AddressLike,
      _amount: BigNumberish,
      _takeDepositFromWallet: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(address,uint256)"
  ): TypedContractMethod<
    [_pTokenReceiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositFromBucket"
  ): TypedContractMethod<
    [
      _bucketTo: string,
      _swapManager: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "estimatedBar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimatedLar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllowedAssets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getLiquidityMiningParams"
  ): TypedContractMethod<
    [],
    [IBucketStorage.LiquidityMiningParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNormalizedIncome"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNormalizedVariableDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseDebt"
  ): TypedContractMethod<
    [_trader: AddressLike, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_params: IBucket.ConstructorParamsStruct, _registry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRateStrategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBucketStable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDelisted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDeprecated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReinvestToAaveEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWithdrawAfterDelistingAvailable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdatedBlockTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxAssetLeverage(address)"
  ): TypedContractMethod<[_asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxAssetLeverage(address,uint256)"
  ): TypedContractMethod<
    [_asset: AddressLike, _feeRate: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxTotalDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paybackPermanentLoss"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "performFlashLoanTransfer"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permanentLoss"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "permanentLossScaled"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveDeposit"
  ): TypedContractMethod<
    [
      _pTokenReceiver: AddressLike,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _bucketFrom: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAsset"
  ): TypedContractMethod<[_assetToDelete: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reserve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reserveRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "returnLiquidityFromAaveToBucket"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBarCalculationParams"
  ): TypedContractMethod<[_params: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBucketExtension"
  ): TypedContractMethod<
    [_newBucketExtension: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeBuffer"
  ): TypedContractMethod<[_feeBuffer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestRateStrategy"
  ): TypedContractMethod<
    [_interestRateStrategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxTotalDeposit"
  ): TypedContractMethod<
    [_maxTotalDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveRate"
  ): TypedContractMethod<[_reserveRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawalFee"
  ): TypedContractMethod<
    [_withdrawalFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateRates"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "variableBorrowIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whiteBlackList"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_borrowAssetReceiver: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAfterDelisting"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawalFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddAsset"
  ): TypedContractEvent<
    AddAssetEvent.InputTuple,
    AddAssetEvent.OutputTuple,
    AddAssetEvent.OutputObject
  >;
  getEvent(
    key: "BarCalculationParamsChanged"
  ): TypedContractEvent<
    BarCalculationParamsChangedEvent.InputTuple,
    BarCalculationParamsChangedEvent.OutputTuple,
    BarCalculationParamsChangedEvent.OutputObject
  >;
  getEvent(
    key: "BucketLaunched"
  ): TypedContractEvent<
    BucketLaunchedEvent.InputTuple,
    BucketLaunchedEvent.OutputTuple,
    BucketLaunchedEvent.OutputObject
  >;
  getEvent(
    key: "ChangedBucketExtension"
  ): TypedContractEvent<
    ChangedBucketExtensionEvent.InputTuple,
    ChangedBucketExtensionEvent.OutputTuple,
    ChangedBucketExtensionEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DepositToAave"
  ): TypedContractEvent<
    DepositToAaveEvent.InputTuple,
    DepositToAaveEvent.OutputTuple,
    DepositToAaveEvent.OutputObject
  >;
  getEvent(
    key: "FeeBufferChanged"
  ): TypedContractEvent<
    FeeBufferChangedEvent.InputTuple,
    FeeBufferChangedEvent.OutputTuple,
    FeeBufferChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InterestRateStrategyChanged"
  ): TypedContractEvent<
    InterestRateStrategyChangedEvent.InputTuple,
    InterestRateStrategyChangedEvent.OutputTuple,
    InterestRateStrategyChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTotalDepositChanged"
  ): TypedContractEvent<
    MaxTotalDepositChangedEvent.InputTuple,
    MaxTotalDepositChangedEvent.OutputTuple,
    MaxTotalDepositChangedEvent.OutputObject
  >;
  getEvent(
    key: "RatesIndexesUpdated"
  ): TypedContractEvent<
    RatesIndexesUpdatedEvent.InputTuple,
    RatesIndexesUpdatedEvent.OutputTuple,
    RatesIndexesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAsset"
  ): TypedContractEvent<
    RemoveAssetEvent.InputTuple,
    RemoveAssetEvent.OutputTuple,
    RemoveAssetEvent.OutputObject
  >;
  getEvent(
    key: "ReserveRateChanged"
  ): TypedContractEvent<
    ReserveRateChangedEvent.InputTuple,
    ReserveRateChangedEvent.OutputTuple,
    ReserveRateChangedEvent.OutputObject
  >;
  getEvent(
    key: "TopUpTreasury"
  ): TypedContractEvent<
    TopUpTreasuryEvent.InputTuple,
    TopUpTreasuryEvent.OutputTuple,
    TopUpTreasuryEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFromAave"
  ): TypedContractEvent<
    WithdrawFromAaveEvent.InputTuple,
    WithdrawFromAaveEvent.OutputTuple,
    WithdrawFromAaveEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalFeeChanged"
  ): TypedContractEvent<
    WithdrawalFeeChangedEvent.InputTuple,
    WithdrawalFeeChangedEvent.OutputTuple,
    WithdrawalFeeChangedEvent.OutputObject
  >;

  filters: {
    "AddAsset(address)": TypedContractEvent<
      AddAssetEvent.InputTuple,
      AddAssetEvent.OutputTuple,
      AddAssetEvent.OutputObject
    >;
    AddAsset: TypedContractEvent<
      AddAssetEvent.InputTuple,
      AddAssetEvent.OutputTuple,
      AddAssetEvent.OutputObject
    >;

    "BarCalculationParamsChanged(bytes)": TypedContractEvent<
      BarCalculationParamsChangedEvent.InputTuple,
      BarCalculationParamsChangedEvent.OutputTuple,
      BarCalculationParamsChangedEvent.OutputObject
    >;
    BarCalculationParamsChanged: TypedContractEvent<
      BarCalculationParamsChangedEvent.InputTuple,
      BarCalculationParamsChangedEvent.OutputTuple,
      BarCalculationParamsChangedEvent.OutputObject
    >;

    "BucketLaunched()": TypedContractEvent<
      BucketLaunchedEvent.InputTuple,
      BucketLaunchedEvent.OutputTuple,
      BucketLaunchedEvent.OutputObject
    >;
    BucketLaunched: TypedContractEvent<
      BucketLaunchedEvent.InputTuple,
      BucketLaunchedEvent.OutputTuple,
      BucketLaunchedEvent.OutputObject
    >;

    "ChangedBucketExtension(address)": TypedContractEvent<
      ChangedBucketExtensionEvent.InputTuple,
      ChangedBucketExtensionEvent.OutputTuple,
      ChangedBucketExtensionEvent.OutputObject
    >;
    ChangedBucketExtension: TypedContractEvent<
      ChangedBucketExtensionEvent.InputTuple,
      ChangedBucketExtensionEvent.OutputTuple,
      ChangedBucketExtensionEvent.OutputObject
    >;

    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DepositToAave(address,uint256)": TypedContractEvent<
      DepositToAaveEvent.InputTuple,
      DepositToAaveEvent.OutputTuple,
      DepositToAaveEvent.OutputObject
    >;
    DepositToAave: TypedContractEvent<
      DepositToAaveEvent.InputTuple,
      DepositToAaveEvent.OutputTuple,
      DepositToAaveEvent.OutputObject
    >;

    "FeeBufferChanged(uint256)": TypedContractEvent<
      FeeBufferChangedEvent.InputTuple,
      FeeBufferChangedEvent.OutputTuple,
      FeeBufferChangedEvent.OutputObject
    >;
    FeeBufferChanged: TypedContractEvent<
      FeeBufferChangedEvent.InputTuple,
      FeeBufferChangedEvent.OutputTuple,
      FeeBufferChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InterestRateStrategyChanged(address)": TypedContractEvent<
      InterestRateStrategyChangedEvent.InputTuple,
      InterestRateStrategyChangedEvent.OutputTuple,
      InterestRateStrategyChangedEvent.OutputObject
    >;
    InterestRateStrategyChanged: TypedContractEvent<
      InterestRateStrategyChangedEvent.InputTuple,
      InterestRateStrategyChangedEvent.OutputTuple,
      InterestRateStrategyChangedEvent.OutputObject
    >;

    "MaxTotalDepositChanged(uint256)": TypedContractEvent<
      MaxTotalDepositChangedEvent.InputTuple,
      MaxTotalDepositChangedEvent.OutputTuple,
      MaxTotalDepositChangedEvent.OutputObject
    >;
    MaxTotalDepositChanged: TypedContractEvent<
      MaxTotalDepositChangedEvent.InputTuple,
      MaxTotalDepositChangedEvent.OutputTuple,
      MaxTotalDepositChangedEvent.OutputObject
    >;

    "RatesIndexesUpdated(uint128,uint128,uint128,uint128,uint256)": TypedContractEvent<
      RatesIndexesUpdatedEvent.InputTuple,
      RatesIndexesUpdatedEvent.OutputTuple,
      RatesIndexesUpdatedEvent.OutputObject
    >;
    RatesIndexesUpdated: TypedContractEvent<
      RatesIndexesUpdatedEvent.InputTuple,
      RatesIndexesUpdatedEvent.OutputTuple,
      RatesIndexesUpdatedEvent.OutputObject
    >;

    "RemoveAsset(address)": TypedContractEvent<
      RemoveAssetEvent.InputTuple,
      RemoveAssetEvent.OutputTuple,
      RemoveAssetEvent.OutputObject
    >;
    RemoveAsset: TypedContractEvent<
      RemoveAssetEvent.InputTuple,
      RemoveAssetEvent.OutputTuple,
      RemoveAssetEvent.OutputObject
    >;

    "ReserveRateChanged(uint256)": TypedContractEvent<
      ReserveRateChangedEvent.InputTuple,
      ReserveRateChangedEvent.OutputTuple,
      ReserveRateChangedEvent.OutputObject
    >;
    ReserveRateChanged: TypedContractEvent<
      ReserveRateChangedEvent.InputTuple,
      ReserveRateChangedEvent.OutputTuple,
      ReserveRateChangedEvent.OutputObject
    >;

    "TopUpTreasury(address,uint256)": TypedContractEvent<
      TopUpTreasuryEvent.InputTuple,
      TopUpTreasuryEvent.OutputTuple,
      TopUpTreasuryEvent.OutputObject
    >;
    TopUpTreasury: TypedContractEvent<
      TopUpTreasuryEvent.InputTuple,
      TopUpTreasuryEvent.OutputTuple,
      TopUpTreasuryEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawFromAave(address,uint256)": TypedContractEvent<
      WithdrawFromAaveEvent.InputTuple,
      WithdrawFromAaveEvent.OutputTuple,
      WithdrawFromAaveEvent.OutputObject
    >;
    WithdrawFromAave: TypedContractEvent<
      WithdrawFromAaveEvent.InputTuple,
      WithdrawFromAaveEvent.OutputTuple,
      WithdrawFromAaveEvent.OutputObject
    >;

    "WithdrawalFeeChanged(uint256)": TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;
    WithdrawalFeeChanged: TypedContractEvent<
      WithdrawalFeeChangedEvent.InputTuple,
      WithdrawalFeeChangedEvent.OutputTuple,
      WithdrawalFeeChangedEvent.OutputObject
    >;
  };
}
