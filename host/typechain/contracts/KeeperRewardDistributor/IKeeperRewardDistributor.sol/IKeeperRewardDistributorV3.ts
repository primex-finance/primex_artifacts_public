/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IKeeperRewardDistributorStorage {
  export type KeeperActionRewardConfigStruct = {
    baseMaxGas1: BigNumberish;
    baseMaxGas2: BigNumberish;
    multiplier1: BigNumberish;
    multiplier2: BigNumberish;
    inflectionPoint: BigNumberish;
  };

  export type KeeperActionRewardConfigStructOutput = [
    baseMaxGas1: bigint,
    baseMaxGas2: bigint,
    multiplier1: bigint,
    multiplier2: bigint,
    inflectionPoint: bigint
  ] & {
    baseMaxGas1: bigint;
    baseMaxGas2: bigint;
    multiplier1: bigint;
    multiplier2: bigint;
    inflectionPoint: bigint;
  };
}

export declare namespace IKeeperRewardDistributorV3 {
  export type MaxGasPerPositionParamsStruct = {
    actionType: BigNumberish;
    config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStruct;
  };

  export type MaxGasPerPositionParamsStructOutput = [
    actionType: bigint,
    config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStructOutput
  ] & {
    actionType: bigint;
    config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStructOutput;
  };

  export type DecreasingGasByReasonParamsStruct = {
    reason: BigNumberish;
    amount: BigNumberish;
  };

  export type DecreasingGasByReasonParamsStructOutput = [
    reason: bigint,
    amount: bigint
  ] & { reason: bigint; amount: bigint };

  export type InitParamsStruct = {
    priceOracle: AddressLike;
    registry: AddressLike;
    pmx: AddressLike;
    treasury: AddressLike;
    whiteBlackList: AddressLike;
    pmxPartInReward: BigNumberish;
    nativePartInReward: BigNumberish;
    positionSizeCoefficient: BigNumberish;
    additionalGas: BigNumberish;
    defaultMaxGasPrice: BigNumberish;
    oracleGasPriceTolerance: BigNumberish;
    paymentModel: BigNumberish;
    maxGasPerPositionParams: IKeeperRewardDistributorV3.MaxGasPerPositionParamsStruct[];
    decreasingGasByReasonParams: IKeeperRewardDistributorV3.DecreasingGasByReasonParamsStruct[];
  };

  export type InitParamsStructOutput = [
    priceOracle: string,
    registry: string,
    pmx: string,
    treasury: string,
    whiteBlackList: string,
    pmxPartInReward: bigint,
    nativePartInReward: bigint,
    positionSizeCoefficient: bigint,
    additionalGas: bigint,
    defaultMaxGasPrice: bigint,
    oracleGasPriceTolerance: bigint,
    paymentModel: bigint,
    maxGasPerPositionParams: IKeeperRewardDistributorV3.MaxGasPerPositionParamsStructOutput[],
    decreasingGasByReasonParams: IKeeperRewardDistributorV3.DecreasingGasByReasonParamsStructOutput[]
  ] & {
    priceOracle: string;
    registry: string;
    pmx: string;
    treasury: string;
    whiteBlackList: string;
    pmxPartInReward: bigint;
    nativePartInReward: bigint;
    positionSizeCoefficient: bigint;
    additionalGas: bigint;
    defaultMaxGasPrice: bigint;
    oracleGasPriceTolerance: bigint;
    paymentModel: bigint;
    maxGasPerPositionParams: IKeeperRewardDistributorV3.MaxGasPerPositionParamsStructOutput[];
    decreasingGasByReasonParams: IKeeperRewardDistributorV3.DecreasingGasByReasonParamsStructOutput[];
  };

  export type UpdateRewardParamsStruct = {
    keeper: AddressLike;
    positionAsset: AddressLike;
    positionSize: BigNumberish;
    action: BigNumberish;
    numberOfActions: BigNumberish;
    gasSpent: BigNumberish;
    decreasingCounter: BigNumberish[];
    routesLength: BigNumberish;
    nativePmxOracleData: BytesLike;
    positionNativeAssetOracleData: BytesLike;
  };

  export type UpdateRewardParamsStructOutput = [
    keeper: string,
    positionAsset: string,
    positionSize: bigint,
    action: bigint,
    numberOfActions: bigint,
    gasSpent: bigint,
    decreasingCounter: bigint[],
    routesLength: bigint,
    nativePmxOracleData: string,
    positionNativeAssetOracleData: string
  ] & {
    keeper: string;
    positionAsset: string;
    positionSize: bigint;
    action: bigint;
    numberOfActions: bigint;
    gasSpent: bigint;
    decreasingCounter: bigint[];
    routesLength: bigint;
    nativePmxOracleData: string;
    positionNativeAssetOracleData: string;
  };
}

export interface IKeeperRewardDistributorV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "additionalGas"
      | "claim"
      | "dataLengthRestrictions"
      | "decreasingGasByReason"
      | "defaultMaxGasPrice"
      | "getGasCalculationParams"
      | "initialize"
      | "keeperBalance"
      | "maxGasPerPosition"
      | "minPositionSizeAddend"
      | "nativePartInReward"
      | "optimisticGasCoefficient"
      | "oracleGasPriceTolerance"
      | "pause"
      | "paymentModel"
      | "pmx"
      | "pmxPartInReward"
      | "positionSizeCoefficient"
      | "positionSizeCoefficientB"
      | "priceOracle"
      | "registry"
      | "setAdditionalGas"
      | "setDataLengthRestrictions"
      | "setDecreasingGasByReason"
      | "setDefaultMaxGasPrice"
      | "setMaxGasPerPosition"
      | "setMinPositionSizeAddend"
      | "setNativePartInReward"
      | "setOptimisticGasCoefficient"
      | "setOracleGasPriceTolerance"
      | "setPmxPartInReward"
      | "setPositionSizeCoefficient"
      | "totalBalance"
      | "treasury"
      | "unpause"
      | "updateReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdditionalGasChanged"
      | "ClaimFees"
      | "DataLengthRestrictionsChanged"
      | "DecreasingGasByReasonChanged"
      | "DefaultMaxGasPriceChanged"
      | "KeeperRewardUpdated"
      | "MaxGasPerPositionChanged"
      | "MinPositionSizeAddendChanged"
      | "NativePartInRewardChanged"
      | "OptimisticGasCoefficientChanged"
      | "OracleGasPriceToleranceChanged"
      | "PmxPartInRewardChanged"
      | "PositionSizeCoefficientChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "additionalGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataLengthRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasingGasByReason",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCalculationParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IKeeperRewardDistributorV3.InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPerPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSizeAddend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativePartInReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticGasCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleGasPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pmxPartInReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionSizeCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionSizeCoefficientB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdditionalGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataLengthRestrictions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecreasingGasByReason",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMaxGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPerPosition",
    values: [
      BigNumberish,
      IKeeperRewardDistributorStorage.KeeperActionRewardConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionSizeAddend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativePartInReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptimisticGasCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleGasPriceTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPmxPartInReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionSizeCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [IKeeperRewardDistributorV3.UpdateRewardParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "additionalGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataLengthRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasingGasByReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keeperBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSizeAddend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativePartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticGasCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleGasPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pmxPartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionSizeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionSizeCoefficientB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdditionalGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataLengthRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecreasingGasByReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionSizeAddend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativePartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptimisticGasCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleGasPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPmxPartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionSizeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;
}

export namespace AdditionalGasChangedEvent {
  export type InputTuple = [additionalGas: BigNumberish];
  export type OutputTuple = [additionalGas: bigint];
  export interface OutputObject {
    additionalGas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    keeper: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [keeper: string, asset: string, amount: bigint];
  export interface OutputObject {
    keeper: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataLengthRestrictionsChangedEvent {
  export type InputTuple = [
    callingMethod: BigNumberish,
    maxRoutesLength: BigNumberish,
    baseLength: BigNumberish
  ];
  export type OutputTuple = [
    callingMethod: bigint,
    maxRoutesLength: bigint,
    baseLength: bigint
  ];
  export interface OutputObject {
    callingMethod: bigint;
    maxRoutesLength: bigint;
    baseLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreasingGasByReasonChangedEvent {
  export type InputTuple = [reason: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [reason: bigint, amount: bigint];
  export interface OutputObject {
    reason: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultMaxGasPriceChangedEvent {
  export type InputTuple = [defaultMaxGasPrice: BigNumberish];
  export type OutputTuple = [defaultMaxGasPrice: bigint];
  export interface OutputObject {
    defaultMaxGasPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperRewardUpdatedEvent {
  export type InputTuple = [
    keeper: AddressLike,
    rewardInPmx: BigNumberish,
    rewardInNativeCurrency: BigNumberish
  ];
  export type OutputTuple = [
    keeper: string,
    rewardInPmx: bigint,
    rewardInNativeCurrency: bigint
  ];
  export interface OutputObject {
    keeper: string;
    rewardInPmx: bigint;
    rewardInNativeCurrency: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxGasPerPositionChangedEvent {
  export type InputTuple = [
    actionType: BigNumberish,
    config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStruct
  ];
  export type OutputTuple = [
    actionType: bigint,
    config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStructOutput
  ];
  export interface OutputObject {
    actionType: bigint;
    config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinPositionSizeAddendChangedEvent {
  export type InputTuple = [newMinPositionSizeAddend: BigNumberish];
  export type OutputTuple = [newMinPositionSizeAddend: bigint];
  export interface OutputObject {
    newMinPositionSizeAddend: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativePartInRewardChangedEvent {
  export type InputTuple = [nativePartInReward: BigNumberish];
  export type OutputTuple = [nativePartInReward: bigint];
  export interface OutputObject {
    nativePartInReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OptimisticGasCoefficientChangedEvent {
  export type InputTuple = [newOptimismGasCoefficient: BigNumberish];
  export type OutputTuple = [newOptimismGasCoefficient: bigint];
  export interface OutputObject {
    newOptimismGasCoefficient: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleGasPriceToleranceChangedEvent {
  export type InputTuple = [oracleGasPriceTolerance: BigNumberish];
  export type OutputTuple = [oracleGasPriceTolerance: bigint];
  export interface OutputObject {
    oracleGasPriceTolerance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PmxPartInRewardChangedEvent {
  export type InputTuple = [pmxPartInReward: BigNumberish];
  export type OutputTuple = [pmxPartInReward: bigint];
  export interface OutputObject {
    pmxPartInReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionSizeCoefficientChangedEvent {
  export type InputTuple = [positionSizeCoefficient: BigNumberish];
  export type OutputTuple = [positionSizeCoefficient: bigint];
  export interface OutputObject {
    positionSizeCoefficient: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IKeeperRewardDistributorV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IKeeperRewardDistributorV3;
  waitForDeployment(): Promise<this>;

  interface: IKeeperRewardDistributorV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  additionalGas: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<
    [_pmxAmount: BigNumberish, _nativeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  dataLengthRestrictions: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  decreasingGasByReason: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  defaultMaxGasPrice: TypedContractMethod<[], [bigint], "view">;

  getGasCalculationParams: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  initialize: TypedContractMethod<
    [_params: IKeeperRewardDistributorV3.InitParamsStruct],
    [void],
    "nonpayable"
  >;

  keeperBalance: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  maxGasPerPosition: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  minPositionSizeAddend: TypedContractMethod<[], [bigint], "view">;

  nativePartInReward: TypedContractMethod<[], [bigint], "view">;

  optimisticGasCoefficient: TypedContractMethod<[], [bigint], "view">;

  oracleGasPriceTolerance: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paymentModel: TypedContractMethod<[], [bigint], "view">;

  pmx: TypedContractMethod<[], [string], "view">;

  pmxPartInReward: TypedContractMethod<[], [bigint], "view">;

  positionSizeCoefficient: TypedContractMethod<[], [bigint], "view">;

  positionSizeCoefficientB: TypedContractMethod<[], [bigint], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  setAdditionalGas: TypedContractMethod<
    [_additionalGas: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDataLengthRestrictions: TypedContractMethod<
    [
      _callingMethod: BigNumberish,
      _maxRoutesLength: BigNumberish,
      _baseLength: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setDecreasingGasByReason: TypedContractMethod<
    [_reason: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultMaxGasPrice: TypedContractMethod<
    [_defaultMaxGasPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxGasPerPosition: TypedContractMethod<
    [
      _actionType: BigNumberish,
      _config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  setMinPositionSizeAddend: TypedContractMethod<
    [_minPositionSizeAddend: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNativePartInReward: TypedContractMethod<
    [_nativePartInReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOptimisticGasCoefficient: TypedContractMethod<
    [_newOptimisticGasCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOracleGasPriceTolerance: TypedContractMethod<
    [_oracleGasPriceTolerance: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPmxPartInReward: TypedContractMethod<
    [_pmxPartInReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPositionSizeCoefficient: TypedContractMethod<
    [_positionSizeCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalBalance: TypedContractMethod<[], [[bigint, bigint]], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateReward: TypedContractMethod<
    [_params: IKeeperRewardDistributorV3.UpdateRewardParamsStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "additionalGas"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [_pmxAmount: BigNumberish, _nativeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dataLengthRestrictions"
  ): TypedContractMethod<[arg0: BigNumberish], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "decreasingGasByReason"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultMaxGasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGasCalculationParams"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_params: IKeeperRewardDistributorV3.InitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "keeperBalance"
  ): TypedContractMethod<[arg0: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "maxGasPerPosition"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "minPositionSizeAddend"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nativePartInReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "optimisticGasCoefficient"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleGasPriceTolerance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paymentModel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pmxPartInReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionSizeCoefficient"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionSizeCoefficientB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdditionalGas"
  ): TypedContractMethod<[_additionalGas: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDataLengthRestrictions"
  ): TypedContractMethod<
    [
      _callingMethod: BigNumberish,
      _maxRoutesLength: BigNumberish,
      _baseLength: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDecreasingGasByReason"
  ): TypedContractMethod<
    [_reason: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultMaxGasPrice"
  ): TypedContractMethod<
    [_defaultMaxGasPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxGasPerPosition"
  ): TypedContractMethod<
    [
      _actionType: BigNumberish,
      _config: IKeeperRewardDistributorStorage.KeeperActionRewardConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinPositionSizeAddend"
  ): TypedContractMethod<
    [_minPositionSizeAddend: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNativePartInReward"
  ): TypedContractMethod<
    [_nativePartInReward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOptimisticGasCoefficient"
  ): TypedContractMethod<
    [_newOptimisticGasCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracleGasPriceTolerance"
  ): TypedContractMethod<
    [_oracleGasPriceTolerance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPmxPartInReward"
  ): TypedContractMethod<
    [_pmxPartInReward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPositionSizeCoefficient"
  ): TypedContractMethod<
    [_positionSizeCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalBalance"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReward"
  ): TypedContractMethod<
    [_params: IKeeperRewardDistributorV3.UpdateRewardParamsStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdditionalGasChanged"
  ): TypedContractEvent<
    AdditionalGasChangedEvent.InputTuple,
    AdditionalGasChangedEvent.OutputTuple,
    AdditionalGasChangedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "DataLengthRestrictionsChanged"
  ): TypedContractEvent<
    DataLengthRestrictionsChangedEvent.InputTuple,
    DataLengthRestrictionsChangedEvent.OutputTuple,
    DataLengthRestrictionsChangedEvent.OutputObject
  >;
  getEvent(
    key: "DecreasingGasByReasonChanged"
  ): TypedContractEvent<
    DecreasingGasByReasonChangedEvent.InputTuple,
    DecreasingGasByReasonChangedEvent.OutputTuple,
    DecreasingGasByReasonChangedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultMaxGasPriceChanged"
  ): TypedContractEvent<
    DefaultMaxGasPriceChangedEvent.InputTuple,
    DefaultMaxGasPriceChangedEvent.OutputTuple,
    DefaultMaxGasPriceChangedEvent.OutputObject
  >;
  getEvent(
    key: "KeeperRewardUpdated"
  ): TypedContractEvent<
    KeeperRewardUpdatedEvent.InputTuple,
    KeeperRewardUpdatedEvent.OutputTuple,
    KeeperRewardUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxGasPerPositionChanged"
  ): TypedContractEvent<
    MaxGasPerPositionChangedEvent.InputTuple,
    MaxGasPerPositionChangedEvent.OutputTuple,
    MaxGasPerPositionChangedEvent.OutputObject
  >;
  getEvent(
    key: "MinPositionSizeAddendChanged"
  ): TypedContractEvent<
    MinPositionSizeAddendChangedEvent.InputTuple,
    MinPositionSizeAddendChangedEvent.OutputTuple,
    MinPositionSizeAddendChangedEvent.OutputObject
  >;
  getEvent(
    key: "NativePartInRewardChanged"
  ): TypedContractEvent<
    NativePartInRewardChangedEvent.InputTuple,
    NativePartInRewardChangedEvent.OutputTuple,
    NativePartInRewardChangedEvent.OutputObject
  >;
  getEvent(
    key: "OptimisticGasCoefficientChanged"
  ): TypedContractEvent<
    OptimisticGasCoefficientChangedEvent.InputTuple,
    OptimisticGasCoefficientChangedEvent.OutputTuple,
    OptimisticGasCoefficientChangedEvent.OutputObject
  >;
  getEvent(
    key: "OracleGasPriceToleranceChanged"
  ): TypedContractEvent<
    OracleGasPriceToleranceChangedEvent.InputTuple,
    OracleGasPriceToleranceChangedEvent.OutputTuple,
    OracleGasPriceToleranceChangedEvent.OutputObject
  >;
  getEvent(
    key: "PmxPartInRewardChanged"
  ): TypedContractEvent<
    PmxPartInRewardChangedEvent.InputTuple,
    PmxPartInRewardChangedEvent.OutputTuple,
    PmxPartInRewardChangedEvent.OutputObject
  >;
  getEvent(
    key: "PositionSizeCoefficientChanged"
  ): TypedContractEvent<
    PositionSizeCoefficientChangedEvent.InputTuple,
    PositionSizeCoefficientChangedEvent.OutputTuple,
    PositionSizeCoefficientChangedEvent.OutputObject
  >;

  filters: {
    "AdditionalGasChanged(uint256)": TypedContractEvent<
      AdditionalGasChangedEvent.InputTuple,
      AdditionalGasChangedEvent.OutputTuple,
      AdditionalGasChangedEvent.OutputObject
    >;
    AdditionalGasChanged: TypedContractEvent<
      AdditionalGasChangedEvent.InputTuple,
      AdditionalGasChangedEvent.OutputTuple,
      AdditionalGasChangedEvent.OutputObject
    >;

    "ClaimFees(address,address,uint256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "DataLengthRestrictionsChanged(uint8,uint256,uint256)": TypedContractEvent<
      DataLengthRestrictionsChangedEvent.InputTuple,
      DataLengthRestrictionsChangedEvent.OutputTuple,
      DataLengthRestrictionsChangedEvent.OutputObject
    >;
    DataLengthRestrictionsChanged: TypedContractEvent<
      DataLengthRestrictionsChangedEvent.InputTuple,
      DataLengthRestrictionsChangedEvent.OutputTuple,
      DataLengthRestrictionsChangedEvent.OutputObject
    >;

    "DecreasingGasByReasonChanged(uint8,uint256)": TypedContractEvent<
      DecreasingGasByReasonChangedEvent.InputTuple,
      DecreasingGasByReasonChangedEvent.OutputTuple,
      DecreasingGasByReasonChangedEvent.OutputObject
    >;
    DecreasingGasByReasonChanged: TypedContractEvent<
      DecreasingGasByReasonChangedEvent.InputTuple,
      DecreasingGasByReasonChangedEvent.OutputTuple,
      DecreasingGasByReasonChangedEvent.OutputObject
    >;

    "DefaultMaxGasPriceChanged(uint256)": TypedContractEvent<
      DefaultMaxGasPriceChangedEvent.InputTuple,
      DefaultMaxGasPriceChangedEvent.OutputTuple,
      DefaultMaxGasPriceChangedEvent.OutputObject
    >;
    DefaultMaxGasPriceChanged: TypedContractEvent<
      DefaultMaxGasPriceChangedEvent.InputTuple,
      DefaultMaxGasPriceChangedEvent.OutputTuple,
      DefaultMaxGasPriceChangedEvent.OutputObject
    >;

    "KeeperRewardUpdated(address,uint256,uint256)": TypedContractEvent<
      KeeperRewardUpdatedEvent.InputTuple,
      KeeperRewardUpdatedEvent.OutputTuple,
      KeeperRewardUpdatedEvent.OutputObject
    >;
    KeeperRewardUpdated: TypedContractEvent<
      KeeperRewardUpdatedEvent.InputTuple,
      KeeperRewardUpdatedEvent.OutputTuple,
      KeeperRewardUpdatedEvent.OutputObject
    >;

    "MaxGasPerPositionChanged(uint8,tuple)": TypedContractEvent<
      MaxGasPerPositionChangedEvent.InputTuple,
      MaxGasPerPositionChangedEvent.OutputTuple,
      MaxGasPerPositionChangedEvent.OutputObject
    >;
    MaxGasPerPositionChanged: TypedContractEvent<
      MaxGasPerPositionChangedEvent.InputTuple,
      MaxGasPerPositionChangedEvent.OutputTuple,
      MaxGasPerPositionChangedEvent.OutputObject
    >;

    "MinPositionSizeAddendChanged(uint256)": TypedContractEvent<
      MinPositionSizeAddendChangedEvent.InputTuple,
      MinPositionSizeAddendChangedEvent.OutputTuple,
      MinPositionSizeAddendChangedEvent.OutputObject
    >;
    MinPositionSizeAddendChanged: TypedContractEvent<
      MinPositionSizeAddendChangedEvent.InputTuple,
      MinPositionSizeAddendChangedEvent.OutputTuple,
      MinPositionSizeAddendChangedEvent.OutputObject
    >;

    "NativePartInRewardChanged(uint256)": TypedContractEvent<
      NativePartInRewardChangedEvent.InputTuple,
      NativePartInRewardChangedEvent.OutputTuple,
      NativePartInRewardChangedEvent.OutputObject
    >;
    NativePartInRewardChanged: TypedContractEvent<
      NativePartInRewardChangedEvent.InputTuple,
      NativePartInRewardChangedEvent.OutputTuple,
      NativePartInRewardChangedEvent.OutputObject
    >;

    "OptimisticGasCoefficientChanged(uint256)": TypedContractEvent<
      OptimisticGasCoefficientChangedEvent.InputTuple,
      OptimisticGasCoefficientChangedEvent.OutputTuple,
      OptimisticGasCoefficientChangedEvent.OutputObject
    >;
    OptimisticGasCoefficientChanged: TypedContractEvent<
      OptimisticGasCoefficientChangedEvent.InputTuple,
      OptimisticGasCoefficientChangedEvent.OutputTuple,
      OptimisticGasCoefficientChangedEvent.OutputObject
    >;

    "OracleGasPriceToleranceChanged(uint256)": TypedContractEvent<
      OracleGasPriceToleranceChangedEvent.InputTuple,
      OracleGasPriceToleranceChangedEvent.OutputTuple,
      OracleGasPriceToleranceChangedEvent.OutputObject
    >;
    OracleGasPriceToleranceChanged: TypedContractEvent<
      OracleGasPriceToleranceChangedEvent.InputTuple,
      OracleGasPriceToleranceChangedEvent.OutputTuple,
      OracleGasPriceToleranceChangedEvent.OutputObject
    >;

    "PmxPartInRewardChanged(uint256)": TypedContractEvent<
      PmxPartInRewardChangedEvent.InputTuple,
      PmxPartInRewardChangedEvent.OutputTuple,
      PmxPartInRewardChangedEvent.OutputObject
    >;
    PmxPartInRewardChanged: TypedContractEvent<
      PmxPartInRewardChangedEvent.InputTuple,
      PmxPartInRewardChangedEvent.OutputTuple,
      PmxPartInRewardChangedEvent.OutputObject
    >;

    "PositionSizeCoefficientChanged(uint256)": TypedContractEvent<
      PositionSizeCoefficientChangedEvent.InputTuple,
      PositionSizeCoefficientChangedEvent.OutputTuple,
      PositionSizeCoefficientChangedEvent.OutputObject
    >;
    PositionSizeCoefficientChanged: TypedContractEvent<
      PositionSizeCoefficientChangedEvent.InputTuple,
      PositionSizeCoefficientChangedEvent.OutputTuple,
      PositionSizeCoefficientChangedEvent.OutputObject
    >;
  };
}
