/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface KeeperRewardDistributorStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "additionalGas"
      | "dataLengthRestrictions"
      | "decreasingGasByReason"
      | "defaultMaxGasPrice"
      | "keeperBalance"
      | "maxGasPerPosition"
      | "nativePartInReward"
      | "oracleGasPriceTolerance"
      | "paused"
      | "paymentModel"
      | "pmx"
      | "pmxPartInReward"
      | "positionSizeCoefficient"
      | "positionSizeCoefficientB"
      | "priceOracle"
      | "registry"
      | "supportsInterface"
      | "totalBalance"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "Paused" | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "additionalGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataLengthRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasingGasByReason",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keeperBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPerPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nativePartInReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleGasPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pmxPartInReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionSizeCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionSizeCoefficientB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "additionalGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataLengthRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasingGasByReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativePartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleGasPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pmxPartInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionSizeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionSizeCoefficientB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KeeperRewardDistributorStorage extends BaseContract {
  connect(runner?: ContractRunner | null): KeeperRewardDistributorStorage;
  waitForDeployment(): Promise<this>;

  interface: KeeperRewardDistributorStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  additionalGas: TypedContractMethod<[], [bigint], "view">;

  dataLengthRestrictions: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { maxRoutesLength: bigint; baseLength: bigint }],
    "view"
  >;

  decreasingGasByReason: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  defaultMaxGasPrice: TypedContractMethod<[], [bigint], "view">;

  keeperBalance: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { pmxBalance: bigint; nativeBalance: bigint }],
    "view"
  >;

  maxGasPerPosition: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        baseMaxGas1: bigint;
        baseMaxGas2: bigint;
        multiplier1: bigint;
        multiplier2: bigint;
        inflectionPoint: bigint;
      }
    ],
    "view"
  >;

  nativePartInReward: TypedContractMethod<[], [bigint], "view">;

  oracleGasPriceTolerance: TypedContractMethod<[], [bigint], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  paymentModel: TypedContractMethod<[], [bigint], "view">;

  pmx: TypedContractMethod<[], [string], "view">;

  pmxPartInReward: TypedContractMethod<[], [bigint], "view">;

  positionSizeCoefficient: TypedContractMethod<[], [bigint], "view">;

  positionSizeCoefficientB: TypedContractMethod<[], [bigint], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalBalance: TypedContractMethod<
    [],
    [[bigint, bigint] & { pmxBalance: bigint; nativeBalance: bigint }],
    "view"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "additionalGas"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dataLengthRestrictions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { maxRoutesLength: bigint; baseLength: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreasingGasByReason"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultMaxGasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "keeperBalance"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { pmxBalance: bigint; nativeBalance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxGasPerPosition"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        baseMaxGas1: bigint;
        baseMaxGas2: bigint;
        multiplier1: bigint;
        multiplier2: bigint;
        inflectionPoint: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nativePartInReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleGasPriceTolerance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentModel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pmxPartInReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionSizeCoefficient"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionSizeCoefficientB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalBalance"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { pmxBalance: bigint; nativeBalance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
