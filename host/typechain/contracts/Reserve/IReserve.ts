/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IReserveStorage {
  export type TransferRestrictionsStruct = {
    minAmountToBeLeft: BigNumberish;
    minPercentOfTotalSupplyToBeLeft: BigNumberish;
  };

  export type TransferRestrictionsStructOutput = [
    minAmountToBeLeft: bigint,
    minPercentOfTotalSupplyToBeLeft: bigint
  ] & { minAmountToBeLeft: bigint; minPercentOfTotalSupplyToBeLeft: bigint };
}

export interface IReserveInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "initialize"
      | "pause"
      | "payBonus"
      | "paybackPermanentLoss"
      | "setTransferRestrictions"
      | "transferRestrictions"
      | "transferToTreasury"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BurnAmountCalculated"
      | "TransferFromReserve"
      | "TransferRestrictionsChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payBonus",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paybackPermanentLoss",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferRestrictions",
    values: [AddressLike, IReserveStorage.TransferRestrictionsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRestrictions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToTreasury",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paybackPermanentLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BurnAmountCalculatedEvent {
  export type InputTuple = [burnAmount: BigNumberish];
  export type OutputTuple = [burnAmount: bigint];
  export interface OutputObject {
    burnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferFromReserveEvent {
  export type InputTuple = [
    pToken: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [pToken: string, to: string, amount: bigint];
  export interface OutputObject {
    pToken: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRestrictionsChangedEvent {
  export type InputTuple = [
    pToken: AddressLike,
    newTransferRestrictions: IReserveStorage.TransferRestrictionsStruct
  ];
  export type OutputTuple = [
    pToken: string,
    newTransferRestrictions: IReserveStorage.TransferRestrictionsStructOutput
  ];
  export interface OutputObject {
    pToken: string;
    newTransferRestrictions: IReserveStorage.TransferRestrictionsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IReserve extends BaseContract {
  connect(runner?: ContractRunner | null): IReserve;
  waitForDeployment(): Promise<this>;

  interface: IReserveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initialize: TypedContractMethod<
    [dns: AddressLike, registry: AddressLike],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  payBonus: TypedContractMethod<
    [_bucketName: string, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  paybackPermanentLoss: TypedContractMethod<
    [bucket: AddressLike],
    [void],
    "nonpayable"
  >;

  setTransferRestrictions: TypedContractMethod<
    [
      pToken: AddressLike,
      transferRestrictions: IReserveStorage.TransferRestrictionsStruct
    ],
    [void],
    "nonpayable"
  >;

  transferRestrictions: TypedContractMethod<
    [pToken: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  transferToTreasury: TypedContractMethod<
    [bucket: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [dns: AddressLike, registry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "payBonus"
  ): TypedContractMethod<
    [_bucketName: string, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paybackPermanentLoss"
  ): TypedContractMethod<[bucket: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferRestrictions"
  ): TypedContractMethod<
    [
      pToken: AddressLike,
      transferRestrictions: IReserveStorage.TransferRestrictionsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferRestrictions"
  ): TypedContractMethod<[pToken: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "transferToTreasury"
  ): TypedContractMethod<
    [bucket: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BurnAmountCalculated"
  ): TypedContractEvent<
    BurnAmountCalculatedEvent.InputTuple,
    BurnAmountCalculatedEvent.OutputTuple,
    BurnAmountCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferFromReserve"
  ): TypedContractEvent<
    TransferFromReserveEvent.InputTuple,
    TransferFromReserveEvent.OutputTuple,
    TransferFromReserveEvent.OutputObject
  >;
  getEvent(
    key: "TransferRestrictionsChanged"
  ): TypedContractEvent<
    TransferRestrictionsChangedEvent.InputTuple,
    TransferRestrictionsChangedEvent.OutputTuple,
    TransferRestrictionsChangedEvent.OutputObject
  >;

  filters: {
    "BurnAmountCalculated(uint256)": TypedContractEvent<
      BurnAmountCalculatedEvent.InputTuple,
      BurnAmountCalculatedEvent.OutputTuple,
      BurnAmountCalculatedEvent.OutputObject
    >;
    BurnAmountCalculated: TypedContractEvent<
      BurnAmountCalculatedEvent.InputTuple,
      BurnAmountCalculatedEvent.OutputTuple,
      BurnAmountCalculatedEvent.OutputObject
    >;

    "TransferFromReserve(address,address,uint256)": TypedContractEvent<
      TransferFromReserveEvent.InputTuple,
      TransferFromReserveEvent.OutputTuple,
      TransferFromReserveEvent.OutputObject
    >;
    TransferFromReserve: TypedContractEvent<
      TransferFromReserveEvent.InputTuple,
      TransferFromReserveEvent.OutputTuple,
      TransferFromReserveEvent.OutputObject
    >;

    "TransferRestrictionsChanged(address,tuple)": TypedContractEvent<
      TransferRestrictionsChangedEvent.InputTuple,
      TransferRestrictionsChangedEvent.OutputTuple,
      TransferRestrictionsChangedEvent.OutputObject
    >;
    TransferRestrictionsChanged: TypedContractEvent<
      TransferRestrictionsChangedEvent.InputTuple,
      TransferRestrictionsChangedEvent.OutputTuple,
      TransferRestrictionsChangedEvent.OutputObject
    >;
  };
}
