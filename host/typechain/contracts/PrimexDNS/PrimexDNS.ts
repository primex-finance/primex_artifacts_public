/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPrimexDNSStorage {
  export type BucketDataStruct = {
    bucketAddress: AddressLike;
    currentStatus: BigNumberish;
    delistingDeadline: BigNumberish;
    adminDeadline: BigNumberish;
  };

  export type BucketDataStructOutput = [
    bucketAddress: string,
    currentStatus: bigint,
    delistingDeadline: bigint,
    adminDeadline: bigint
  ] & {
    bucketAddress: string;
    currentStatus: bigint;
    delistingDeadline: bigint;
    adminDeadline: bigint;
  };

  export type DexDataStruct = { routerAddress: AddressLike; isActive: boolean };

  export type DexDataStructOutput = [
    routerAddress: string,
    isActive: boolean
  ] & { routerAddress: string; isActive: boolean };
}

export declare namespace IPrimexDNSStorageV3 {
  export type MinFeeRestrictionsStruct = {
    maxGasAmount: BigNumberish;
    baseLength: BigNumberish;
  };

  export type MinFeeRestrictionsStructOutput = [
    maxGasAmount: bigint,
    baseLength: bigint
  ] & { maxGasAmount: bigint; baseLength: bigint };
}

export declare namespace IPrimexDNSV3 {
  export type FeeRateParamsStruct = {
    feeRateType: BigNumberish;
    tier: BigNumberish;
    feeRate: BigNumberish;
  };

  export type FeeRateParamsStructOutput = [
    feeRateType: bigint,
    tier: bigint,
    feeRate: bigint
  ] & { feeRateType: bigint; tier: bigint; feeRate: bigint };

  export type AverageGasPerActionParamsStruct = {
    tradingOrderType: BigNumberish;
    averageGasPerAction: BigNumberish;
  };

  export type AverageGasPerActionParamsStructOutput = [
    tradingOrderType: bigint,
    averageGasPerAction: bigint
  ] & { tradingOrderType: bigint; averageGasPerAction: bigint };

  export type InitParamsStruct = {
    registry: AddressLike;
    pmx: AddressLike;
    treasury: AddressLike;
    delistingDelay: BigNumberish;
    adminWithdrawalDelay: BigNumberish;
    feeRateParams: IPrimexDNSV3.FeeRateParamsStruct[];
    averageGasPerActionParams: IPrimexDNSV3.AverageGasPerActionParamsStruct[];
    maxProtocolFee: BigNumberish;
    liquidationGasAmount: BigNumberish;
    protocolFeeCoefficient: BigNumberish;
    additionalGasSpent: BigNumberish;
    pmxDiscountMultiplier: BigNumberish;
    gasPriceBuffer: BigNumberish;
    leverageTolerance: BigNumberish;
  };

  export type InitParamsStructOutput = [
    registry: string,
    pmx: string,
    treasury: string,
    delistingDelay: bigint,
    adminWithdrawalDelay: bigint,
    feeRateParams: IPrimexDNSV3.FeeRateParamsStructOutput[],
    averageGasPerActionParams: IPrimexDNSV3.AverageGasPerActionParamsStructOutput[],
    maxProtocolFee: bigint,
    liquidationGasAmount: bigint,
    protocolFeeCoefficient: bigint,
    additionalGasSpent: bigint,
    pmxDiscountMultiplier: bigint,
    gasPriceBuffer: bigint,
    leverageTolerance: bigint
  ] & {
    registry: string;
    pmx: string;
    treasury: string;
    delistingDelay: bigint;
    adminWithdrawalDelay: bigint;
    feeRateParams: IPrimexDNSV3.FeeRateParamsStructOutput[];
    averageGasPerActionParams: IPrimexDNSV3.AverageGasPerActionParamsStructOutput[];
    maxProtocolFee: bigint;
    liquidationGasAmount: bigint;
    protocolFeeCoefficient: bigint;
    additionalGasSpent: bigint;
    pmxDiscountMultiplier: bigint;
    gasPriceBuffer: bigint;
    leverageTolerance: bigint;
  };
}

export interface PrimexDNSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aavePool"
      | "activateBucket"
      | "activateDEX"
      | "addBucket"
      | "addDEX"
      | "additionalGasSpent"
      | "adminWithdrawalDelay"
      | "averageGasPerAction"
      | "buckets"
      | "cmTypeToAddress"
      | "delistingDelay"
      | "deprecateBucket"
      | "dexAdapter"
      | "dexes"
      | "feeRates"
      | "feeRestrictions"
      | "freezeBucket"
      | "freezeDEX"
      | "gasPriceBuffer"
      | "getAllDexes"
      | "getBucketAddress"
      | "getDexAddress"
      | "getL1BaseLengthForTradingOrderType"
      | "getParamsForMinPositionSize"
      | "getParamsForMinProtocolFee"
      | "getPrimexDNSParams"
      | "getProtocolFeeRateByTier"
      | "getProtocolFeeRatesByTier"
      | "initialize"
      | "leverageTolerance"
      | "liquidationGasAmount"
      | "maxProtocolFee"
      | "minFeeRestrictions"
      | "pmx"
      | "pmxDiscountMultiplier"
      | "protocolFeeCoefficient"
      | "protocolFeeRates"
      | "protocolFeeRatesByTier"
      | "registry"
      | "setAavePool"
      | "setAdditionalGasSpent"
      | "setAverageGasPerAction"
      | "setConditionalManager"
      | "setDexAdapter"
      | "setGasPriceBuffer"
      | "setLeverageTolerance"
      | "setLiquidationGasAmount"
      | "setMaxProtocolFee"
      | "setMinFeeRestrictions"
      | "setPMX"
      | "setPmxDiscountMultiplier"
      | "setProtocolFeeCoefficient"
      | "setProtocolFeeRate"
      | "setTiersManager"
      | "supportsInterface"
      | "tiersManager"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AavePoolChanged"
      | "AddNewBucket"
      | "AddNewDex"
      | "BucketActivated"
      | "BucketDeprecated"
      | "BucketFrozen"
      | "ChangeAdditionalGasSpent"
      | "ChangeAverageGasPerAction"
      | "ChangeGasPriceBuffer"
      | "ChangeLeverageTolerance"
      | "ChangeLiquidationGasAmount"
      | "ChangeMaxProtocolFee"
      | "ChangeMinFeeRestrictions"
      | "ChangePmxDiscountMultiplier"
      | "ChangeProtocolFeeCoefficient"
      | "ChangeProtocolFeeRate"
      | "ConditionalManagerChanged"
      | "DexActivated"
      | "DexAdapterChanged"
      | "DexFrozen"
      | "Initialized"
      | "PMXchanged"
      | "TiersManagerchanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "activateDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addBucket",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDEX",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "additionalGasSpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawalDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "averageGasPerAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buckets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cmTypeToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateBucket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dexAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "freezeDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "gasPriceBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getL1BaseLengthForTradingOrderType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsForMinPositionSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsForMinProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimexDNSParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeRateByTier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeRatesByTier",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IPrimexDNSV3.InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "leverageTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationGasAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minFeeRestrictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pmxDiscountMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRatesByTier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAavePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdditionalGasSpent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAverageGasPerAction",
    values: [IPrimexDNSV3.AverageGasPerActionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setConditionalManager",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPriceBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverageTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationGasAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFeeRestrictions",
    values: [BigNumberish, IPrimexDNSStorageV3.MinFeeRestrictionsStruct]
  ): string;
  encodeFunctionData(functionFragment: "setPMX", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setPmxDiscountMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRate",
    values: [IPrimexDNSV3.FeeRateParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTiersManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tiersManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBucket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "additionalGasSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "averageGasPerAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cmTypeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freezeDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL1BaseLengthForTradingOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamsForMinPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamsForMinProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimexDNSParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeRateByTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeRatesByTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leverageTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationGasAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minFeeRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pmxDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRatesByTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdditionalGasSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAverageGasPerAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConditionalManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPriceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationGasAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinFeeRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPMX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPmxDiscountMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTiersManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tiersManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace AavePoolChangedEvent {
  export type InputTuple = [aavePool: AddressLike];
  export type OutputTuple = [aavePool: string];
  export interface OutputObject {
    aavePool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddNewBucketEvent {
  export type InputTuple = [newBucketData: IPrimexDNSStorage.BucketDataStruct];
  export type OutputTuple = [
    newBucketData: IPrimexDNSStorage.BucketDataStructOutput
  ];
  export interface OutputObject {
    newBucketData: IPrimexDNSStorage.BucketDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddNewDexEvent {
  export type InputTuple = [newDexData: IPrimexDNSStorage.DexDataStruct];
  export type OutputTuple = [newDexData: IPrimexDNSStorage.DexDataStructOutput];
  export interface OutputObject {
    newDexData: IPrimexDNSStorage.DexDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketActivatedEvent {
  export type InputTuple = [bucketAddress: AddressLike];
  export type OutputTuple = [bucketAddress: string];
  export interface OutputObject {
    bucketAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketDeprecatedEvent {
  export type InputTuple = [
    bucketAddress: AddressLike,
    delistingTime: BigNumberish
  ];
  export type OutputTuple = [bucketAddress: string, delistingTime: bigint];
  export interface OutputObject {
    bucketAddress: string;
    delistingTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketFrozenEvent {
  export type InputTuple = [bucketAddress: AddressLike];
  export type OutputTuple = [bucketAddress: string];
  export interface OutputObject {
    bucketAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeAdditionalGasSpentEvent {
  export type InputTuple = [additionalGasSpent: BigNumberish];
  export type OutputTuple = [additionalGasSpent: bigint];
  export interface OutputObject {
    additionalGasSpent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeAverageGasPerActionEvent {
  export type InputTuple = [
    tradingOrderType: BigNumberish,
    averageGasPerAction: BigNumberish
  ];
  export type OutputTuple = [
    tradingOrderType: bigint,
    averageGasPerAction: bigint
  ];
  export interface OutputObject {
    tradingOrderType: bigint;
    averageGasPerAction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeGasPriceBufferEvent {
  export type InputTuple = [gasPriceBuffer: BigNumberish];
  export type OutputTuple = [gasPriceBuffer: bigint];
  export interface OutputObject {
    gasPriceBuffer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeLeverageToleranceEvent {
  export type InputTuple = [leverageTolerance: BigNumberish];
  export type OutputTuple = [leverageTolerance: bigint];
  export interface OutputObject {
    leverageTolerance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeLiquidationGasAmountEvent {
  export type InputTuple = [liquidationGasAmount: BigNumberish];
  export type OutputTuple = [liquidationGasAmount: bigint];
  export interface OutputObject {
    liquidationGasAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeMaxProtocolFeeEvent {
  export type InputTuple = [maxProtocolFee: BigNumberish];
  export type OutputTuple = [maxProtocolFee: bigint];
  export interface OutputObject {
    maxProtocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeMinFeeRestrictionsEvent {
  export type InputTuple = [
    callingMethod: BigNumberish,
    minFeeRestrictions: IPrimexDNSStorageV3.MinFeeRestrictionsStruct
  ];
  export type OutputTuple = [
    callingMethod: bigint,
    minFeeRestrictions: IPrimexDNSStorageV3.MinFeeRestrictionsStructOutput
  ];
  export interface OutputObject {
    callingMethod: bigint;
    minFeeRestrictions: IPrimexDNSStorageV3.MinFeeRestrictionsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangePmxDiscountMultiplierEvent {
  export type InputTuple = [pmxDiscountMultiplier: BigNumberish];
  export type OutputTuple = [pmxDiscountMultiplier: bigint];
  export interface OutputObject {
    pmxDiscountMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeProtocolFeeCoefficientEvent {
  export type InputTuple = [protocolFeeCoefficient: BigNumberish];
  export type OutputTuple = [protocolFeeCoefficient: bigint];
  export interface OutputObject {
    protocolFeeCoefficient: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeProtocolFeeRateEvent {
  export type InputTuple = [
    feeRateType: BigNumberish,
    tier: BigNumberish,
    feeRate: BigNumberish
  ];
  export type OutputTuple = [
    feeRateType: bigint,
    tier: bigint,
    feeRate: bigint
  ];
  export interface OutputObject {
    feeRateType: bigint;
    tier: bigint;
    feeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConditionalManagerChangedEvent {
  export type InputTuple = [cmType: BigNumberish, cmAddress: AddressLike];
  export type OutputTuple = [cmType: bigint, cmAddress: string];
  export interface OutputObject {
    cmType: bigint;
    cmAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DexActivatedEvent {
  export type InputTuple = [routerAddress: AddressLike];
  export type OutputTuple = [routerAddress: string];
  export interface OutputObject {
    routerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DexAdapterChangedEvent {
  export type InputTuple = [newAdapterAddress: AddressLike];
  export type OutputTuple = [newAdapterAddress: string];
  export interface OutputObject {
    newAdapterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DexFrozenEvent {
  export type InputTuple = [routerAddress: AddressLike];
  export type OutputTuple = [routerAddress: string];
  export interface OutputObject {
    routerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PMXchangedEvent {
  export type InputTuple = [pmx: AddressLike];
  export type OutputTuple = [pmx: string];
  export interface OutputObject {
    pmx: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TiersManagerchangedEvent {
  export type InputTuple = [tiersManager: AddressLike];
  export type OutputTuple = [tiersManager: string];
  export interface OutputObject {
    tiersManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrimexDNS extends BaseContract {
  connect(runner?: ContractRunner | null): PrimexDNS;
  waitForDeployment(): Promise<this>;

  interface: PrimexDNSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aavePool: TypedContractMethod<[], [string], "view">;

  activateBucket: TypedContractMethod<[_bucket: string], [void], "nonpayable">;

  activateDEX: TypedContractMethod<[_dex: string], [void], "nonpayable">;

  addBucket: TypedContractMethod<
    [_newBucket: AddressLike, _pmxRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addDEX: TypedContractMethod<
    [_name: string, _routerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  additionalGasSpent: TypedContractMethod<[], [bigint], "view">;

  adminWithdrawalDelay: TypedContractMethod<[], [bigint], "view">;

  averageGasPerAction: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  buckets: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        bucketAddress: string;
        currentStatus: bigint;
        delistingDeadline: bigint;
        adminDeadline: bigint;
      }
    ],
    "view"
  >;

  cmTypeToAddress: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  delistingDelay: TypedContractMethod<[], [bigint], "view">;

  deprecateBucket: TypedContractMethod<[_bucket: string], [void], "nonpayable">;

  dexAdapter: TypedContractMethod<[], [string], "view">;

  dexes: TypedContractMethod<
    [arg0: string],
    [[string, boolean] & { routerAddress: string; isActive: boolean }],
    "view"
  >;

  feeRates: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  feeRestrictions: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { minProtocolFee: bigint; maxProtocolFee: bigint }],
    "view"
  >;

  freezeBucket: TypedContractMethod<[_bucket: string], [void], "nonpayable">;

  freezeDEX: TypedContractMethod<[_dex: string], [void], "nonpayable">;

  gasPriceBuffer: TypedContractMethod<[], [bigint], "view">;

  getAllDexes: TypedContractMethod<[], [string[]], "view">;

  getBucketAddress: TypedContractMethod<[_name: string], [string], "view">;

  getDexAddress: TypedContractMethod<[_name: string], [string], "view">;

  getL1BaseLengthForTradingOrderType: TypedContractMethod<
    [_tradingOrderType: BigNumberish],
    [bigint],
    "view"
  >;

  getParamsForMinPositionSize: TypedContractMethod<
    [_tradingOrderType: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getParamsForMinProtocolFee: TypedContractMethod<
    [_callingMethod: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getPrimexDNSParams: TypedContractMethod<
    [],
    [[string, string, string, bigint, bigint]],
    "view"
  >;

  getProtocolFeeRateByTier: TypedContractMethod<
    [_feeRateType: BigNumberish, _tier: BigNumberish],
    [bigint],
    "view"
  >;

  getProtocolFeeRatesByTier: TypedContractMethod<
    [_feeRateType: BigNumberish, _tiers: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [_params: IPrimexDNSV3.InitParamsStruct],
    [void],
    "nonpayable"
  >;

  leverageTolerance: TypedContractMethod<[], [bigint], "view">;

  liquidationGasAmount: TypedContractMethod<[], [bigint], "view">;

  maxProtocolFee: TypedContractMethod<[], [bigint], "view">;

  minFeeRestrictions: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { maxGasAmount: bigint; baseLength: bigint }],
    "view"
  >;

  pmx: TypedContractMethod<[], [string], "view">;

  pmxDiscountMultiplier: TypedContractMethod<[], [bigint], "view">;

  protocolFeeCoefficient: TypedContractMethod<[], [bigint], "view">;

  protocolFeeRates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  protocolFeeRatesByTier: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  setAavePool: TypedContractMethod<
    [_aavePool: AddressLike],
    [void],
    "nonpayable"
  >;

  setAdditionalGasSpent: TypedContractMethod<
    [_additionalGasSpent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAverageGasPerAction: TypedContractMethod<
    [_averageGasPerActionParams: IPrimexDNSV3.AverageGasPerActionParamsStruct],
    [void],
    "nonpayable"
  >;

  setConditionalManager: TypedContractMethod<
    [_cmType: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  setDexAdapter: TypedContractMethod<
    [_newAdapterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setGasPriceBuffer: TypedContractMethod<
    [_gasPriceBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLeverageTolerance: TypedContractMethod<
    [_leverageTolerance: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationGasAmount: TypedContractMethod<
    [_liquidationGasAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxProtocolFee: TypedContractMethod<
    [_maxProtocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinFeeRestrictions: TypedContractMethod<
    [
      _callingMethod: BigNumberish,
      _minFeeRestrictions: IPrimexDNSStorageV3.MinFeeRestrictionsStruct
    ],
    [void],
    "nonpayable"
  >;

  setPMX: TypedContractMethod<[_pmx: AddressLike], [void], "nonpayable">;

  setPmxDiscountMultiplier: TypedContractMethod<
    [_pmxDiscountMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeCoefficient: TypedContractMethod<
    [_protocolFeeCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeRate: TypedContractMethod<
    [_feeRateParams: IPrimexDNSV3.FeeRateParamsStruct[]],
    [void],
    "nonpayable"
  >;

  setTiersManager: TypedContractMethod<
    [_tiersManager: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tiersManager: TypedContractMethod<[], [string], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aavePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateBucket"
  ): TypedContractMethod<[_bucket: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateDEX"
  ): TypedContractMethod<[_dex: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBucket"
  ): TypedContractMethod<
    [_newBucket: AddressLike, _pmxRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addDEX"
  ): TypedContractMethod<
    [_name: string, _routerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "additionalGasSpent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "adminWithdrawalDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "averageGasPerAction"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "buckets"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        bucketAddress: string;
        currentStatus: bigint;
        delistingDeadline: bigint;
        adminDeadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cmTypeToAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "delistingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deprecateBucket"
  ): TypedContractMethod<[_bucket: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dexAdapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dexes"
  ): TypedContractMethod<
    [arg0: string],
    [[string, boolean] & { routerAddress: string; isActive: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeRates"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeRestrictions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { minProtocolFee: bigint; maxProtocolFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "freezeBucket"
  ): TypedContractMethod<[_bucket: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freezeDEX"
  ): TypedContractMethod<[_dex: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gasPriceBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllDexes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBucketAddress"
  ): TypedContractMethod<[_name: string], [string], "view">;
  getFunction(
    nameOrSignature: "getDexAddress"
  ): TypedContractMethod<[_name: string], [string], "view">;
  getFunction(
    nameOrSignature: "getL1BaseLengthForTradingOrderType"
  ): TypedContractMethod<[_tradingOrderType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getParamsForMinPositionSize"
  ): TypedContractMethod<
    [_tradingOrderType: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParamsForMinProtocolFee"
  ): TypedContractMethod<
    [_callingMethod: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrimexDNSParams"
  ): TypedContractMethod<
    [],
    [[string, string, string, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolFeeRateByTier"
  ): TypedContractMethod<
    [_feeRateType: BigNumberish, _tier: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolFeeRatesByTier"
  ): TypedContractMethod<
    [_feeRateType: BigNumberish, _tiers: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_params: IPrimexDNSV3.InitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leverageTolerance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidationGasAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxProtocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minFeeRestrictions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { maxGasAmount: bigint; baseLength: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pmxDiscountMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolFeeCoefficient"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolFeeRates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolFeeRatesByTier"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAavePool"
  ): TypedContractMethod<[_aavePool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdditionalGasSpent"
  ): TypedContractMethod<
    [_additionalGasSpent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAverageGasPerAction"
  ): TypedContractMethod<
    [_averageGasPerActionParams: IPrimexDNSV3.AverageGasPerActionParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConditionalManager"
  ): TypedContractMethod<
    [_cmType: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDexAdapter"
  ): TypedContractMethod<
    [_newAdapterAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGasPriceBuffer"
  ): TypedContractMethod<[_gasPriceBuffer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLeverageTolerance"
  ): TypedContractMethod<
    [_leverageTolerance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationGasAmount"
  ): TypedContractMethod<
    [_liquidationGasAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxProtocolFee"
  ): TypedContractMethod<[_maxProtocolFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinFeeRestrictions"
  ): TypedContractMethod<
    [
      _callingMethod: BigNumberish,
      _minFeeRestrictions: IPrimexDNSStorageV3.MinFeeRestrictionsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPMX"
  ): TypedContractMethod<[_pmx: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPmxDiscountMultiplier"
  ): TypedContractMethod<
    [_pmxDiscountMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolFeeCoefficient"
  ): TypedContractMethod<
    [_protocolFeeCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolFeeRate"
  ): TypedContractMethod<
    [_feeRateParams: IPrimexDNSV3.FeeRateParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTiersManager"
  ): TypedContractMethod<[_tiersManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tiersManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AavePoolChanged"
  ): TypedContractEvent<
    AavePoolChangedEvent.InputTuple,
    AavePoolChangedEvent.OutputTuple,
    AavePoolChangedEvent.OutputObject
  >;
  getEvent(
    key: "AddNewBucket"
  ): TypedContractEvent<
    AddNewBucketEvent.InputTuple,
    AddNewBucketEvent.OutputTuple,
    AddNewBucketEvent.OutputObject
  >;
  getEvent(
    key: "AddNewDex"
  ): TypedContractEvent<
    AddNewDexEvent.InputTuple,
    AddNewDexEvent.OutputTuple,
    AddNewDexEvent.OutputObject
  >;
  getEvent(
    key: "BucketActivated"
  ): TypedContractEvent<
    BucketActivatedEvent.InputTuple,
    BucketActivatedEvent.OutputTuple,
    BucketActivatedEvent.OutputObject
  >;
  getEvent(
    key: "BucketDeprecated"
  ): TypedContractEvent<
    BucketDeprecatedEvent.InputTuple,
    BucketDeprecatedEvent.OutputTuple,
    BucketDeprecatedEvent.OutputObject
  >;
  getEvent(
    key: "BucketFrozen"
  ): TypedContractEvent<
    BucketFrozenEvent.InputTuple,
    BucketFrozenEvent.OutputTuple,
    BucketFrozenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeAdditionalGasSpent"
  ): TypedContractEvent<
    ChangeAdditionalGasSpentEvent.InputTuple,
    ChangeAdditionalGasSpentEvent.OutputTuple,
    ChangeAdditionalGasSpentEvent.OutputObject
  >;
  getEvent(
    key: "ChangeAverageGasPerAction"
  ): TypedContractEvent<
    ChangeAverageGasPerActionEvent.InputTuple,
    ChangeAverageGasPerActionEvent.OutputTuple,
    ChangeAverageGasPerActionEvent.OutputObject
  >;
  getEvent(
    key: "ChangeGasPriceBuffer"
  ): TypedContractEvent<
    ChangeGasPriceBufferEvent.InputTuple,
    ChangeGasPriceBufferEvent.OutputTuple,
    ChangeGasPriceBufferEvent.OutputObject
  >;
  getEvent(
    key: "ChangeLeverageTolerance"
  ): TypedContractEvent<
    ChangeLeverageToleranceEvent.InputTuple,
    ChangeLeverageToleranceEvent.OutputTuple,
    ChangeLeverageToleranceEvent.OutputObject
  >;
  getEvent(
    key: "ChangeLiquidationGasAmount"
  ): TypedContractEvent<
    ChangeLiquidationGasAmountEvent.InputTuple,
    ChangeLiquidationGasAmountEvent.OutputTuple,
    ChangeLiquidationGasAmountEvent.OutputObject
  >;
  getEvent(
    key: "ChangeMaxProtocolFee"
  ): TypedContractEvent<
    ChangeMaxProtocolFeeEvent.InputTuple,
    ChangeMaxProtocolFeeEvent.OutputTuple,
    ChangeMaxProtocolFeeEvent.OutputObject
  >;
  getEvent(
    key: "ChangeMinFeeRestrictions"
  ): TypedContractEvent<
    ChangeMinFeeRestrictionsEvent.InputTuple,
    ChangeMinFeeRestrictionsEvent.OutputTuple,
    ChangeMinFeeRestrictionsEvent.OutputObject
  >;
  getEvent(
    key: "ChangePmxDiscountMultiplier"
  ): TypedContractEvent<
    ChangePmxDiscountMultiplierEvent.InputTuple,
    ChangePmxDiscountMultiplierEvent.OutputTuple,
    ChangePmxDiscountMultiplierEvent.OutputObject
  >;
  getEvent(
    key: "ChangeProtocolFeeCoefficient"
  ): TypedContractEvent<
    ChangeProtocolFeeCoefficientEvent.InputTuple,
    ChangeProtocolFeeCoefficientEvent.OutputTuple,
    ChangeProtocolFeeCoefficientEvent.OutputObject
  >;
  getEvent(
    key: "ChangeProtocolFeeRate"
  ): TypedContractEvent<
    ChangeProtocolFeeRateEvent.InputTuple,
    ChangeProtocolFeeRateEvent.OutputTuple,
    ChangeProtocolFeeRateEvent.OutputObject
  >;
  getEvent(
    key: "ConditionalManagerChanged"
  ): TypedContractEvent<
    ConditionalManagerChangedEvent.InputTuple,
    ConditionalManagerChangedEvent.OutputTuple,
    ConditionalManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "DexActivated"
  ): TypedContractEvent<
    DexActivatedEvent.InputTuple,
    DexActivatedEvent.OutputTuple,
    DexActivatedEvent.OutputObject
  >;
  getEvent(
    key: "DexAdapterChanged"
  ): TypedContractEvent<
    DexAdapterChangedEvent.InputTuple,
    DexAdapterChangedEvent.OutputTuple,
    DexAdapterChangedEvent.OutputObject
  >;
  getEvent(
    key: "DexFrozen"
  ): TypedContractEvent<
    DexFrozenEvent.InputTuple,
    DexFrozenEvent.OutputTuple,
    DexFrozenEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PMXchanged"
  ): TypedContractEvent<
    PMXchangedEvent.InputTuple,
    PMXchangedEvent.OutputTuple,
    PMXchangedEvent.OutputObject
  >;
  getEvent(
    key: "TiersManagerchanged"
  ): TypedContractEvent<
    TiersManagerchangedEvent.InputTuple,
    TiersManagerchangedEvent.OutputTuple,
    TiersManagerchangedEvent.OutputObject
  >;

  filters: {
    "AavePoolChanged(address)": TypedContractEvent<
      AavePoolChangedEvent.InputTuple,
      AavePoolChangedEvent.OutputTuple,
      AavePoolChangedEvent.OutputObject
    >;
    AavePoolChanged: TypedContractEvent<
      AavePoolChangedEvent.InputTuple,
      AavePoolChangedEvent.OutputTuple,
      AavePoolChangedEvent.OutputObject
    >;

    "AddNewBucket(tuple)": TypedContractEvent<
      AddNewBucketEvent.InputTuple,
      AddNewBucketEvent.OutputTuple,
      AddNewBucketEvent.OutputObject
    >;
    AddNewBucket: TypedContractEvent<
      AddNewBucketEvent.InputTuple,
      AddNewBucketEvent.OutputTuple,
      AddNewBucketEvent.OutputObject
    >;

    "AddNewDex(tuple)": TypedContractEvent<
      AddNewDexEvent.InputTuple,
      AddNewDexEvent.OutputTuple,
      AddNewDexEvent.OutputObject
    >;
    AddNewDex: TypedContractEvent<
      AddNewDexEvent.InputTuple,
      AddNewDexEvent.OutputTuple,
      AddNewDexEvent.OutputObject
    >;

    "BucketActivated(address)": TypedContractEvent<
      BucketActivatedEvent.InputTuple,
      BucketActivatedEvent.OutputTuple,
      BucketActivatedEvent.OutputObject
    >;
    BucketActivated: TypedContractEvent<
      BucketActivatedEvent.InputTuple,
      BucketActivatedEvent.OutputTuple,
      BucketActivatedEvent.OutputObject
    >;

    "BucketDeprecated(address,uint256)": TypedContractEvent<
      BucketDeprecatedEvent.InputTuple,
      BucketDeprecatedEvent.OutputTuple,
      BucketDeprecatedEvent.OutputObject
    >;
    BucketDeprecated: TypedContractEvent<
      BucketDeprecatedEvent.InputTuple,
      BucketDeprecatedEvent.OutputTuple,
      BucketDeprecatedEvent.OutputObject
    >;

    "BucketFrozen(address)": TypedContractEvent<
      BucketFrozenEvent.InputTuple,
      BucketFrozenEvent.OutputTuple,
      BucketFrozenEvent.OutputObject
    >;
    BucketFrozen: TypedContractEvent<
      BucketFrozenEvent.InputTuple,
      BucketFrozenEvent.OutputTuple,
      BucketFrozenEvent.OutputObject
    >;

    "ChangeAdditionalGasSpent(uint256)": TypedContractEvent<
      ChangeAdditionalGasSpentEvent.InputTuple,
      ChangeAdditionalGasSpentEvent.OutputTuple,
      ChangeAdditionalGasSpentEvent.OutputObject
    >;
    ChangeAdditionalGasSpent: TypedContractEvent<
      ChangeAdditionalGasSpentEvent.InputTuple,
      ChangeAdditionalGasSpentEvent.OutputTuple,
      ChangeAdditionalGasSpentEvent.OutputObject
    >;

    "ChangeAverageGasPerAction(uint8,uint256)": TypedContractEvent<
      ChangeAverageGasPerActionEvent.InputTuple,
      ChangeAverageGasPerActionEvent.OutputTuple,
      ChangeAverageGasPerActionEvent.OutputObject
    >;
    ChangeAverageGasPerAction: TypedContractEvent<
      ChangeAverageGasPerActionEvent.InputTuple,
      ChangeAverageGasPerActionEvent.OutputTuple,
      ChangeAverageGasPerActionEvent.OutputObject
    >;

    "ChangeGasPriceBuffer(uint256)": TypedContractEvent<
      ChangeGasPriceBufferEvent.InputTuple,
      ChangeGasPriceBufferEvent.OutputTuple,
      ChangeGasPriceBufferEvent.OutputObject
    >;
    ChangeGasPriceBuffer: TypedContractEvent<
      ChangeGasPriceBufferEvent.InputTuple,
      ChangeGasPriceBufferEvent.OutputTuple,
      ChangeGasPriceBufferEvent.OutputObject
    >;

    "ChangeLeverageTolerance(uint256)": TypedContractEvent<
      ChangeLeverageToleranceEvent.InputTuple,
      ChangeLeverageToleranceEvent.OutputTuple,
      ChangeLeverageToleranceEvent.OutputObject
    >;
    ChangeLeverageTolerance: TypedContractEvent<
      ChangeLeverageToleranceEvent.InputTuple,
      ChangeLeverageToleranceEvent.OutputTuple,
      ChangeLeverageToleranceEvent.OutputObject
    >;

    "ChangeLiquidationGasAmount(uint256)": TypedContractEvent<
      ChangeLiquidationGasAmountEvent.InputTuple,
      ChangeLiquidationGasAmountEvent.OutputTuple,
      ChangeLiquidationGasAmountEvent.OutputObject
    >;
    ChangeLiquidationGasAmount: TypedContractEvent<
      ChangeLiquidationGasAmountEvent.InputTuple,
      ChangeLiquidationGasAmountEvent.OutputTuple,
      ChangeLiquidationGasAmountEvent.OutputObject
    >;

    "ChangeMaxProtocolFee(uint256)": TypedContractEvent<
      ChangeMaxProtocolFeeEvent.InputTuple,
      ChangeMaxProtocolFeeEvent.OutputTuple,
      ChangeMaxProtocolFeeEvent.OutputObject
    >;
    ChangeMaxProtocolFee: TypedContractEvent<
      ChangeMaxProtocolFeeEvent.InputTuple,
      ChangeMaxProtocolFeeEvent.OutputTuple,
      ChangeMaxProtocolFeeEvent.OutputObject
    >;

    "ChangeMinFeeRestrictions(uint8,tuple)": TypedContractEvent<
      ChangeMinFeeRestrictionsEvent.InputTuple,
      ChangeMinFeeRestrictionsEvent.OutputTuple,
      ChangeMinFeeRestrictionsEvent.OutputObject
    >;
    ChangeMinFeeRestrictions: TypedContractEvent<
      ChangeMinFeeRestrictionsEvent.InputTuple,
      ChangeMinFeeRestrictionsEvent.OutputTuple,
      ChangeMinFeeRestrictionsEvent.OutputObject
    >;

    "ChangePmxDiscountMultiplier(uint256)": TypedContractEvent<
      ChangePmxDiscountMultiplierEvent.InputTuple,
      ChangePmxDiscountMultiplierEvent.OutputTuple,
      ChangePmxDiscountMultiplierEvent.OutputObject
    >;
    ChangePmxDiscountMultiplier: TypedContractEvent<
      ChangePmxDiscountMultiplierEvent.InputTuple,
      ChangePmxDiscountMultiplierEvent.OutputTuple,
      ChangePmxDiscountMultiplierEvent.OutputObject
    >;

    "ChangeProtocolFeeCoefficient(uint256)": TypedContractEvent<
      ChangeProtocolFeeCoefficientEvent.InputTuple,
      ChangeProtocolFeeCoefficientEvent.OutputTuple,
      ChangeProtocolFeeCoefficientEvent.OutputObject
    >;
    ChangeProtocolFeeCoefficient: TypedContractEvent<
      ChangeProtocolFeeCoefficientEvent.InputTuple,
      ChangeProtocolFeeCoefficientEvent.OutputTuple,
      ChangeProtocolFeeCoefficientEvent.OutputObject
    >;

    "ChangeProtocolFeeRate(uint8,uint256,uint256)": TypedContractEvent<
      ChangeProtocolFeeRateEvent.InputTuple,
      ChangeProtocolFeeRateEvent.OutputTuple,
      ChangeProtocolFeeRateEvent.OutputObject
    >;
    ChangeProtocolFeeRate: TypedContractEvent<
      ChangeProtocolFeeRateEvent.InputTuple,
      ChangeProtocolFeeRateEvent.OutputTuple,
      ChangeProtocolFeeRateEvent.OutputObject
    >;

    "ConditionalManagerChanged(uint256,address)": TypedContractEvent<
      ConditionalManagerChangedEvent.InputTuple,
      ConditionalManagerChangedEvent.OutputTuple,
      ConditionalManagerChangedEvent.OutputObject
    >;
    ConditionalManagerChanged: TypedContractEvent<
      ConditionalManagerChangedEvent.InputTuple,
      ConditionalManagerChangedEvent.OutputTuple,
      ConditionalManagerChangedEvent.OutputObject
    >;

    "DexActivated(address)": TypedContractEvent<
      DexActivatedEvent.InputTuple,
      DexActivatedEvent.OutputTuple,
      DexActivatedEvent.OutputObject
    >;
    DexActivated: TypedContractEvent<
      DexActivatedEvent.InputTuple,
      DexActivatedEvent.OutputTuple,
      DexActivatedEvent.OutputObject
    >;

    "DexAdapterChanged(address)": TypedContractEvent<
      DexAdapterChangedEvent.InputTuple,
      DexAdapterChangedEvent.OutputTuple,
      DexAdapterChangedEvent.OutputObject
    >;
    DexAdapterChanged: TypedContractEvent<
      DexAdapterChangedEvent.InputTuple,
      DexAdapterChangedEvent.OutputTuple,
      DexAdapterChangedEvent.OutputObject
    >;

    "DexFrozen(address)": TypedContractEvent<
      DexFrozenEvent.InputTuple,
      DexFrozenEvent.OutputTuple,
      DexFrozenEvent.OutputObject
    >;
    DexFrozen: TypedContractEvent<
      DexFrozenEvent.InputTuple,
      DexFrozenEvent.OutputTuple,
      DexFrozenEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PMXchanged(address)": TypedContractEvent<
      PMXchangedEvent.InputTuple,
      PMXchangedEvent.OutputTuple,
      PMXchangedEvent.OutputObject
    >;
    PMXchanged: TypedContractEvent<
      PMXchangedEvent.InputTuple,
      PMXchangedEvent.OutputTuple,
      PMXchangedEvent.OutputObject
    >;

    "TiersManagerchanged(address)": TypedContractEvent<
      TiersManagerchangedEvent.InputTuple,
      TiersManagerchangedEvent.OutputTuple,
      TiersManagerchangedEvent.OutputObject
    >;
    TiersManagerchanged: TypedContractEvent<
      TiersManagerchangedEvent.InputTuple,
      TiersManagerchangedEvent.OutputTuple,
      TiersManagerchangedEvent.OutputObject
    >;
  };
}
