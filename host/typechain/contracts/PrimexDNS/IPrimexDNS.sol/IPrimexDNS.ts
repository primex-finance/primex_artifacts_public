/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPrimexDNSStorage {
  export type BucketDataStruct = {
    bucketAddress: AddressLike;
    currentStatus: BigNumberish;
    delistingDeadline: BigNumberish;
    adminDeadline: BigNumberish;
  };

  export type BucketDataStructOutput = [
    bucketAddress: string,
    currentStatus: bigint,
    delistingDeadline: bigint,
    adminDeadline: bigint
  ] & {
    bucketAddress: string;
    currentStatus: bigint;
    delistingDeadline: bigint;
    adminDeadline: bigint;
  };

  export type DexDataStruct = { routerAddress: AddressLike; isActive: boolean };

  export type DexDataStructOutput = [
    routerAddress: string,
    isActive: boolean
  ] & { routerAddress: string; isActive: boolean };
}

export declare namespace IPrimexDNS {
  export type FeeRateParamsStruct = {
    orderType: BigNumberish;
    feeToken: AddressLike;
    rate: BigNumberish;
  };

  export type FeeRateParamsStructOutput = [
    orderType: bigint,
    feeToken: string,
    rate: bigint
  ] & { orderType: bigint; feeToken: string; rate: bigint };
}

export interface IPrimexDNSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aavePool"
      | "activateBucket"
      | "activateDEX"
      | "addBucket"
      | "addDEX"
      | "adminWithdrawalDelay"
      | "buckets"
      | "cmTypeToAddress"
      | "delistingDelay"
      | "deprecateBucket"
      | "dexAdapter"
      | "dexes"
      | "feeRates"
      | "freezeBucket"
      | "freezeDEX"
      | "getAllDexes"
      | "getBucketAddress"
      | "getDexAddress"
      | "initialize"
      | "pmx"
      | "registry"
      | "setAavePool"
      | "setConditionalManager"
      | "setDexAdapter"
      | "setFeeRate"
      | "setPMX"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AavePoolChanged"
      | "AddNewBucket"
      | "AddNewDex"
      | "BucketActivated"
      | "BucketDeprecated"
      | "BucketFrozen"
      | "ChangeFeeRate"
      | "ConditionalManagerChanged"
      | "DexActivated"
      | "DexAdapterChanged"
      | "DexFrozen"
      | "PMXchanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "activateDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addBucket",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDEX",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawalDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buckets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cmTypeToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateBucket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dexAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeBucket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "freezeDEX", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllDexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      IPrimexDNS.FeeRateParamsStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAavePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConditionalManager",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRate",
    values: [IPrimexDNS.FeeRateParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "setPMX", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBucket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cmTypeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freezeDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConditionalManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPMX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace AavePoolChangedEvent {
  export type InputTuple = [aavePool: AddressLike];
  export type OutputTuple = [aavePool: string];
  export interface OutputObject {
    aavePool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddNewBucketEvent {
  export type InputTuple = [newBucketData: IPrimexDNSStorage.BucketDataStruct];
  export type OutputTuple = [
    newBucketData: IPrimexDNSStorage.BucketDataStructOutput
  ];
  export interface OutputObject {
    newBucketData: IPrimexDNSStorage.BucketDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddNewDexEvent {
  export type InputTuple = [newDexData: IPrimexDNSStorage.DexDataStruct];
  export type OutputTuple = [newDexData: IPrimexDNSStorage.DexDataStructOutput];
  export interface OutputObject {
    newDexData: IPrimexDNSStorage.DexDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketActivatedEvent {
  export type InputTuple = [bucketAddress: AddressLike];
  export type OutputTuple = [bucketAddress: string];
  export interface OutputObject {
    bucketAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketDeprecatedEvent {
  export type InputTuple = [
    bucketAddress: AddressLike,
    delistingTime: BigNumberish
  ];
  export type OutputTuple = [bucketAddress: string, delistingTime: bigint];
  export interface OutputObject {
    bucketAddress: string;
    delistingTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketFrozenEvent {
  export type InputTuple = [bucketAddress: AddressLike];
  export type OutputTuple = [bucketAddress: string];
  export interface OutputObject {
    bucketAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeFeeRateEvent {
  export type InputTuple = [
    orderType: BigNumberish,
    token: AddressLike,
    rate: BigNumberish
  ];
  export type OutputTuple = [orderType: bigint, token: string, rate: bigint];
  export interface OutputObject {
    orderType: bigint;
    token: string;
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConditionalManagerChangedEvent {
  export type InputTuple = [cmType: BigNumberish, cmAddress: AddressLike];
  export type OutputTuple = [cmType: bigint, cmAddress: string];
  export interface OutputObject {
    cmType: bigint;
    cmAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DexActivatedEvent {
  export type InputTuple = [routerAddress: AddressLike];
  export type OutputTuple = [routerAddress: string];
  export interface OutputObject {
    routerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DexAdapterChangedEvent {
  export type InputTuple = [newAdapterAddress: AddressLike];
  export type OutputTuple = [newAdapterAddress: string];
  export interface OutputObject {
    newAdapterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DexFrozenEvent {
  export type InputTuple = [routerAddress: AddressLike];
  export type OutputTuple = [routerAddress: string];
  export interface OutputObject {
    routerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PMXchangedEvent {
  export type InputTuple = [pmx: AddressLike];
  export type OutputTuple = [pmx: string];
  export interface OutputObject {
    pmx: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPrimexDNS extends BaseContract {
  connect(runner?: ContractRunner | null): IPrimexDNS;
  waitForDeployment(): Promise<this>;

  interface: IPrimexDNSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aavePool: TypedContractMethod<[], [string], "view">;

  activateBucket: TypedContractMethod<[_bucket: string], [void], "nonpayable">;

  activateDEX: TypedContractMethod<[_dex: string], [void], "nonpayable">;

  addBucket: TypedContractMethod<
    [_newBucket: AddressLike, _pmxRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addDEX: TypedContractMethod<
    [_name: string, _routerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  adminWithdrawalDelay: TypedContractMethod<[], [bigint], "view">;

  buckets: TypedContractMethod<
    [arg0: string],
    [[string, bigint, bigint, bigint]],
    "view"
  >;

  cmTypeToAddress: TypedContractMethod<
    [cmType: BigNumberish],
    [string],
    "view"
  >;

  delistingDelay: TypedContractMethod<[], [bigint], "view">;

  deprecateBucket: TypedContractMethod<[_bucket: string], [void], "nonpayable">;

  dexAdapter: TypedContractMethod<[], [string], "view">;

  dexes: TypedContractMethod<[arg0: string], [[string, boolean]], "view">;

  feeRates: TypedContractMethod<
    [_orderType: BigNumberish, _token: AddressLike],
    [bigint],
    "view"
  >;

  freezeBucket: TypedContractMethod<[_bucket: string], [void], "nonpayable">;

  freezeDEX: TypedContractMethod<[_dex: string], [void], "nonpayable">;

  getAllDexes: TypedContractMethod<[], [string[]], "view">;

  getBucketAddress: TypedContractMethod<[_name: string], [string], "view">;

  getDexAddress: TypedContractMethod<[_name: string], [string], "view">;

  initialize: TypedContractMethod<
    [
      _registry: AddressLike,
      _pmx: AddressLike,
      _treasury: AddressLike,
      _delistingDelay: BigNumberish,
      _adminWithdrawalDelay: BigNumberish,
      _feeRateParams: IPrimexDNS.FeeRateParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;

  pmx: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  setAavePool: TypedContractMethod<
    [_aavePool: AddressLike],
    [void],
    "nonpayable"
  >;

  setConditionalManager: TypedContractMethod<
    [_cmType: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  setDexAdapter: TypedContractMethod<
    [newAdapterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeRate: TypedContractMethod<
    [_feeRateParams: IPrimexDNS.FeeRateParamsStruct],
    [void],
    "nonpayable"
  >;

  setPMX: TypedContractMethod<[_pmx: AddressLike], [void], "nonpayable">;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aavePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateBucket"
  ): TypedContractMethod<[_bucket: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateDEX"
  ): TypedContractMethod<[_dex: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBucket"
  ): TypedContractMethod<
    [_newBucket: AddressLike, _pmxRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addDEX"
  ): TypedContractMethod<
    [_name: string, _routerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminWithdrawalDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buckets"
  ): TypedContractMethod<
    [arg0: string],
    [[string, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "cmTypeToAddress"
  ): TypedContractMethod<[cmType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "delistingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deprecateBucket"
  ): TypedContractMethod<[_bucket: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dexAdapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dexes"
  ): TypedContractMethod<[arg0: string], [[string, boolean]], "view">;
  getFunction(
    nameOrSignature: "feeRates"
  ): TypedContractMethod<
    [_orderType: BigNumberish, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "freezeBucket"
  ): TypedContractMethod<[_bucket: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freezeDEX"
  ): TypedContractMethod<[_dex: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllDexes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBucketAddress"
  ): TypedContractMethod<[_name: string], [string], "view">;
  getFunction(
    nameOrSignature: "getDexAddress"
  ): TypedContractMethod<[_name: string], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _registry: AddressLike,
      _pmx: AddressLike,
      _treasury: AddressLike,
      _delistingDelay: BigNumberish,
      _adminWithdrawalDelay: BigNumberish,
      _feeRateParams: IPrimexDNS.FeeRateParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAavePool"
  ): TypedContractMethod<[_aavePool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConditionalManager"
  ): TypedContractMethod<
    [_cmType: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDexAdapter"
  ): TypedContractMethod<
    [newAdapterAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeRate"
  ): TypedContractMethod<
    [_feeRateParams: IPrimexDNS.FeeRateParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPMX"
  ): TypedContractMethod<[_pmx: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AavePoolChanged"
  ): TypedContractEvent<
    AavePoolChangedEvent.InputTuple,
    AavePoolChangedEvent.OutputTuple,
    AavePoolChangedEvent.OutputObject
  >;
  getEvent(
    key: "AddNewBucket"
  ): TypedContractEvent<
    AddNewBucketEvent.InputTuple,
    AddNewBucketEvent.OutputTuple,
    AddNewBucketEvent.OutputObject
  >;
  getEvent(
    key: "AddNewDex"
  ): TypedContractEvent<
    AddNewDexEvent.InputTuple,
    AddNewDexEvent.OutputTuple,
    AddNewDexEvent.OutputObject
  >;
  getEvent(
    key: "BucketActivated"
  ): TypedContractEvent<
    BucketActivatedEvent.InputTuple,
    BucketActivatedEvent.OutputTuple,
    BucketActivatedEvent.OutputObject
  >;
  getEvent(
    key: "BucketDeprecated"
  ): TypedContractEvent<
    BucketDeprecatedEvent.InputTuple,
    BucketDeprecatedEvent.OutputTuple,
    BucketDeprecatedEvent.OutputObject
  >;
  getEvent(
    key: "BucketFrozen"
  ): TypedContractEvent<
    BucketFrozenEvent.InputTuple,
    BucketFrozenEvent.OutputTuple,
    BucketFrozenEvent.OutputObject
  >;
  getEvent(
    key: "ChangeFeeRate"
  ): TypedContractEvent<
    ChangeFeeRateEvent.InputTuple,
    ChangeFeeRateEvent.OutputTuple,
    ChangeFeeRateEvent.OutputObject
  >;
  getEvent(
    key: "ConditionalManagerChanged"
  ): TypedContractEvent<
    ConditionalManagerChangedEvent.InputTuple,
    ConditionalManagerChangedEvent.OutputTuple,
    ConditionalManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "DexActivated"
  ): TypedContractEvent<
    DexActivatedEvent.InputTuple,
    DexActivatedEvent.OutputTuple,
    DexActivatedEvent.OutputObject
  >;
  getEvent(
    key: "DexAdapterChanged"
  ): TypedContractEvent<
    DexAdapterChangedEvent.InputTuple,
    DexAdapterChangedEvent.OutputTuple,
    DexAdapterChangedEvent.OutputObject
  >;
  getEvent(
    key: "DexFrozen"
  ): TypedContractEvent<
    DexFrozenEvent.InputTuple,
    DexFrozenEvent.OutputTuple,
    DexFrozenEvent.OutputObject
  >;
  getEvent(
    key: "PMXchanged"
  ): TypedContractEvent<
    PMXchangedEvent.InputTuple,
    PMXchangedEvent.OutputTuple,
    PMXchangedEvent.OutputObject
  >;

  filters: {
    "AavePoolChanged(address)": TypedContractEvent<
      AavePoolChangedEvent.InputTuple,
      AavePoolChangedEvent.OutputTuple,
      AavePoolChangedEvent.OutputObject
    >;
    AavePoolChanged: TypedContractEvent<
      AavePoolChangedEvent.InputTuple,
      AavePoolChangedEvent.OutputTuple,
      AavePoolChangedEvent.OutputObject
    >;

    "AddNewBucket(tuple)": TypedContractEvent<
      AddNewBucketEvent.InputTuple,
      AddNewBucketEvent.OutputTuple,
      AddNewBucketEvent.OutputObject
    >;
    AddNewBucket: TypedContractEvent<
      AddNewBucketEvent.InputTuple,
      AddNewBucketEvent.OutputTuple,
      AddNewBucketEvent.OutputObject
    >;

    "AddNewDex(tuple)": TypedContractEvent<
      AddNewDexEvent.InputTuple,
      AddNewDexEvent.OutputTuple,
      AddNewDexEvent.OutputObject
    >;
    AddNewDex: TypedContractEvent<
      AddNewDexEvent.InputTuple,
      AddNewDexEvent.OutputTuple,
      AddNewDexEvent.OutputObject
    >;

    "BucketActivated(address)": TypedContractEvent<
      BucketActivatedEvent.InputTuple,
      BucketActivatedEvent.OutputTuple,
      BucketActivatedEvent.OutputObject
    >;
    BucketActivated: TypedContractEvent<
      BucketActivatedEvent.InputTuple,
      BucketActivatedEvent.OutputTuple,
      BucketActivatedEvent.OutputObject
    >;

    "BucketDeprecated(address,uint256)": TypedContractEvent<
      BucketDeprecatedEvent.InputTuple,
      BucketDeprecatedEvent.OutputTuple,
      BucketDeprecatedEvent.OutputObject
    >;
    BucketDeprecated: TypedContractEvent<
      BucketDeprecatedEvent.InputTuple,
      BucketDeprecatedEvent.OutputTuple,
      BucketDeprecatedEvent.OutputObject
    >;

    "BucketFrozen(address)": TypedContractEvent<
      BucketFrozenEvent.InputTuple,
      BucketFrozenEvent.OutputTuple,
      BucketFrozenEvent.OutputObject
    >;
    BucketFrozen: TypedContractEvent<
      BucketFrozenEvent.InputTuple,
      BucketFrozenEvent.OutputTuple,
      BucketFrozenEvent.OutputObject
    >;

    "ChangeFeeRate(uint8,address,uint256)": TypedContractEvent<
      ChangeFeeRateEvent.InputTuple,
      ChangeFeeRateEvent.OutputTuple,
      ChangeFeeRateEvent.OutputObject
    >;
    ChangeFeeRate: TypedContractEvent<
      ChangeFeeRateEvent.InputTuple,
      ChangeFeeRateEvent.OutputTuple,
      ChangeFeeRateEvent.OutputObject
    >;

    "ConditionalManagerChanged(uint256,address)": TypedContractEvent<
      ConditionalManagerChangedEvent.InputTuple,
      ConditionalManagerChangedEvent.OutputTuple,
      ConditionalManagerChangedEvent.OutputObject
    >;
    ConditionalManagerChanged: TypedContractEvent<
      ConditionalManagerChangedEvent.InputTuple,
      ConditionalManagerChangedEvent.OutputTuple,
      ConditionalManagerChangedEvent.OutputObject
    >;

    "DexActivated(address)": TypedContractEvent<
      DexActivatedEvent.InputTuple,
      DexActivatedEvent.OutputTuple,
      DexActivatedEvent.OutputObject
    >;
    DexActivated: TypedContractEvent<
      DexActivatedEvent.InputTuple,
      DexActivatedEvent.OutputTuple,
      DexActivatedEvent.OutputObject
    >;

    "DexAdapterChanged(address)": TypedContractEvent<
      DexAdapterChangedEvent.InputTuple,
      DexAdapterChangedEvent.OutputTuple,
      DexAdapterChangedEvent.OutputObject
    >;
    DexAdapterChanged: TypedContractEvent<
      DexAdapterChangedEvent.InputTuple,
      DexAdapterChangedEvent.OutputTuple,
      DexAdapterChangedEvent.OutputObject
    >;

    "DexFrozen(address)": TypedContractEvent<
      DexFrozenEvent.InputTuple,
      DexFrozenEvent.OutputTuple,
      DexFrozenEvent.OutputObject
    >;
    DexFrozen: TypedContractEvent<
      DexFrozenEvent.InputTuple,
      DexFrozenEvent.OutputTuple,
      DexFrozenEvent.OutputObject
    >;

    "PMXchanged(address)": TypedContractEvent<
      PMXchangedEvent.InputTuple,
      PMXchangedEvent.OutputTuple,
      PMXchangedEvent.OutputObject
    >;
    PMXchanged: TypedContractEvent<
      PMXchangedEvent.InputTuple,
      PMXchangedEvent.OutputTuple,
      PMXchangedEvent.OutputObject
    >;
  };
}
