/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PositionLibrary {
  export type PositionStruct = {
    id: BigNumberish;
    scaledDebtAmount: BigNumberish;
    bucket: AddressLike;
    soldAsset: AddressLike;
    depositAmountInSoldAsset: BigNumberish;
    positionAsset: AddressLike;
    positionAmount: BigNumberish;
    trader: AddressLike;
    openBorrowIndex: BigNumberish;
    createdAt: BigNumberish;
    updatedConditionsAt: BigNumberish;
    extraParams: BytesLike;
  };

  export type PositionStructOutput = [
    id: bigint,
    scaledDebtAmount: bigint,
    bucket: string,
    soldAsset: string,
    depositAmountInSoldAsset: bigint,
    positionAsset: string,
    positionAmount: bigint,
    trader: string,
    openBorrowIndex: bigint,
    createdAt: bigint,
    updatedConditionsAt: bigint,
    extraParams: string
  ] & {
    id: bigint;
    scaledDebtAmount: bigint;
    bucket: string;
    soldAsset: string;
    depositAmountInSoldAsset: bigint;
    positionAsset: string;
    positionAmount: bigint;
    trader: string;
    openBorrowIndex: bigint;
    createdAt: bigint;
    updatedConditionsAt: bigint;
    extraParams: string;
  };
}

export interface TakeProfitStopLossCCMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canBeClosedAfterSwap"
      | "getTakeProfitStopLossPrices"
      | "initialize"
      | "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)"
      | "isStopLossReached(bytes,uint256)"
      | "isTakeProfitReached"
      | "priceOracle"
      | "primexDNS"
      | "registry"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "canBeClosedAfterSwap",
    values: [
      PositionLibrary.PositionStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakeProfitStopLossPrices",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)",
    values: [PositionLibrary.PositionStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStopLossReached(bytes,uint256)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTakeProfitReached",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "canBeClosedAfterSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakeProfitStopLossPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStopLossReached(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTakeProfitReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TakeProfitStopLossCCM extends BaseContract {
  connect(runner?: ContractRunner | null): TakeProfitStopLossCCM;
  waitForDeployment(): Promise<this>;

  interface: TakeProfitStopLossCCMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canBeClosedAfterSwap: TypedContractMethod<
    [
      _position: PositionLibrary.PositionStruct,
      _params: BytesLike,
      arg2: BytesLike,
      _closeAmount: BigNumberish,
      _borowedAssetAmount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike
    ],
    [boolean],
    "payable"
  >;

  getTakeProfitStopLossPrices: TypedContractMethod<
    [_params: BytesLike],
    [[bigint, bigint]],
    "view"
  >;

  initialize: TypedContractMethod<
    [_primexDNS: AddressLike, _priceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)": TypedContractMethod<
    [
      _position: PositionLibrary.PositionStruct,
      _stopLossPrice: BigNumberish,
      _positionSoldAssetOracleData: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  "isStopLossReached(bytes,uint256)": TypedContractMethod<
    [_params: BytesLike, oracleExchangeRate: BigNumberish],
    [boolean],
    "view"
  >;

  isTakeProfitReached: TypedContractMethod<
    [_params: BytesLike, exchangeRate: BigNumberish],
    [boolean],
    "view"
  >;

  priceOracle: TypedContractMethod<[], [string], "view">;

  primexDNS: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canBeClosedAfterSwap"
  ): TypedContractMethod<
    [
      _position: PositionLibrary.PositionStruct,
      _params: BytesLike,
      arg2: BytesLike,
      _closeAmount: BigNumberish,
      _borowedAssetAmount: BigNumberish,
      _positionSoldAssetOracleData: BytesLike
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTakeProfitStopLossPrices"
  ): TypedContractMethod<[_params: BytesLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_primexDNS: AddressLike, _priceOracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isStopLossReached((uint256,uint256,address,address,uint256,address,uint256,address,uint256,uint256,uint256,bytes),uint256,bytes)"
  ): TypedContractMethod<
    [
      _position: PositionLibrary.PositionStruct,
      _stopLossPrice: BigNumberish,
      _positionSoldAssetOracleData: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isStopLossReached(bytes,uint256)"
  ): TypedContractMethod<
    [_params: BytesLike, oracleExchangeRate: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTakeProfitReached"
  ): TypedContractMethod<
    [_params: BytesLike, exchangeRate: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primexDNS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
