/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPriceFeedUpdaterTestService {
  export type PriceFeedStruct = {
    token0: AddressLike;
    token1: AddressLike;
    priceFeed: AddressLike;
  };

  export type PriceFeedStructOutput = [
    token0: string,
    token1: string,
    priceFeed: string
  ] & { token0: string; token1: string; priceFeed: string };

  export type PriceFeedStatusStruct = {
    isNeedUpdate: boolean;
    priceFeed: AddressLike;
    lastAverageDexPrice: BigNumberish;
  };

  export type PriceFeedStatusStructOutput = [
    isNeedUpdate: boolean,
    priceFeed: string,
    lastAverageDexPrice: bigint
  ] & { isNeedUpdate: boolean; priceFeed: string; lastAverageDexPrice: bigint };
}

export interface IPriceFeedUpdaterTestServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRouter"
      | "checkArrayPriceFeed"
      | "checkPriceFeed"
      | "deleteRouter"
      | "getRouters"
      | "setDivider"
      | "updateArrayPriceFeed"
      | "updatePriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkArrayPriceFeed",
    values: [IPriceFeedUpdaterTestService.PriceFeedStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPriceFeed",
    values: [IPriceFeedUpdaterTestService.PriceFeedStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRouter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDivider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArrayPriceFeed",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkArrayPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDivider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateArrayPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
}

export interface IPriceFeedUpdaterTestService extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceFeedUpdaterTestService;
  waitForDeployment(): Promise<this>;

  interface: IPriceFeedUpdaterTestServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRouter: TypedContractMethod<
    [_newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  checkArrayPriceFeed: TypedContractMethod<
    [_priceFeeds: IPriceFeedUpdaterTestService.PriceFeedStruct[]],
    [IPriceFeedUpdaterTestService.PriceFeedStatusStructOutput[]],
    "nonpayable"
  >;

  checkPriceFeed: TypedContractMethod<
    [_priceFeed: IPriceFeedUpdaterTestService.PriceFeedStruct],
    [IPriceFeedUpdaterTestService.PriceFeedStatusStructOutput],
    "nonpayable"
  >;

  deleteRouter: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getRouters: TypedContractMethod<[], [string[]], "view">;

  setDivider: TypedContractMethod<
    [_multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateArrayPriceFeed: TypedContractMethod<
    [_priceFeeds: AddressLike[], _newAnswers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  updatePriceFeed: TypedContractMethod<
    [_priceFeed: AddressLike, _newAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRouter"
  ): TypedContractMethod<[_newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkArrayPriceFeed"
  ): TypedContractMethod<
    [_priceFeeds: IPriceFeedUpdaterTestService.PriceFeedStruct[]],
    [IPriceFeedUpdaterTestService.PriceFeedStatusStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkPriceFeed"
  ): TypedContractMethod<
    [_priceFeed: IPriceFeedUpdaterTestService.PriceFeedStruct],
    [IPriceFeedUpdaterTestService.PriceFeedStatusStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteRouter"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRouters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "setDivider"
  ): TypedContractMethod<[_multiplier: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateArrayPriceFeed"
  ): TypedContractMethod<
    [_priceFeeds: AddressLike[], _newAnswers: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<
    [_priceFeed: AddressLike, _newAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
