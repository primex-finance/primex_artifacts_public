/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IWhitelistInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAddressToWhitelist"
      | "addAddressesToWhitelist"
      | "initialize"
      | "isWhitelisted"
      | "registry"
      | "removeAddressFromWhitelist"
      | "removeAddressesFromWhitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "WhitelistedAddressAdded"
      | "WhitelistedAddressRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAddressToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressesToWhitelist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAddressFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddressesFromWhitelist",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAddressToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressesToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressesFromWhitelist",
    data: BytesLike
  ): Result;
}

export namespace WhitelistedAddressAddedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedAddressRemovedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWhitelist extends BaseContract {
  connect(runner?: ContractRunner | null): IWhitelist;
  waitForDeployment(): Promise<this>;

  interface: IWhitelistInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAddressToWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  addAddressesToWhitelist: TypedContractMethod<
    [_addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_registry: AddressLike],
    [void],
    "nonpayable"
  >;

  isWhitelisted: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  removeAddressFromWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAddressesFromWhitelist: TypedContractMethod<
    [_addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAddressToWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAddressesToWhitelist"
  ): TypedContractMethod<[_addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAddressFromWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAddressesFromWhitelist"
  ): TypedContractMethod<[_addresses: AddressLike[]], [void], "nonpayable">;

  getEvent(
    key: "WhitelistedAddressAdded"
  ): TypedContractEvent<
    WhitelistedAddressAddedEvent.InputTuple,
    WhitelistedAddressAddedEvent.OutputTuple,
    WhitelistedAddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedAddressRemoved"
  ): TypedContractEvent<
    WhitelistedAddressRemovedEvent.InputTuple,
    WhitelistedAddressRemovedEvent.OutputTuple,
    WhitelistedAddressRemovedEvent.OutputObject
  >;

  filters: {
    "WhitelistedAddressAdded(address)": TypedContractEvent<
      WhitelistedAddressAddedEvent.InputTuple,
      WhitelistedAddressAddedEvent.OutputTuple,
      WhitelistedAddressAddedEvent.OutputObject
    >;
    WhitelistedAddressAdded: TypedContractEvent<
      WhitelistedAddressAddedEvent.InputTuple,
      WhitelistedAddressAddedEvent.OutputTuple,
      WhitelistedAddressAddedEvent.OutputObject
    >;

    "WhitelistedAddressRemoved(address)": TypedContractEvent<
      WhitelistedAddressRemovedEvent.InputTuple,
      WhitelistedAddressRemovedEvent.OutputTuple,
      WhitelistedAddressRemovedEvent.OutputObject
    >;
    WhitelistedAddressRemoved: TypedContractEvent<
      WhitelistedAddressRemovedEvent.InputTuple,
      WhitelistedAddressRemovedEvent.OutputTuple,
      WhitelistedAddressRemovedEvent.OutputObject
    >;
  };
}
