/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ICurveRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "exchange"
      | "exchange_with_best_rate"
      | "get_best_rate"
      | "get_exchange_amount"
      | "get_input_amount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exchange",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_with_best_rate",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_best_rate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_exchange_amount",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_input_amount",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchange_with_best_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_best_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_exchange_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_input_amount",
    data: BytesLike
  ): Result;
}

export interface ICurveRouter extends BaseContract {
  connect(runner?: ContractRunner | null): ICurveRouter;
  waitForDeployment(): Promise<this>;

  interface: ICurveRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exchange: TypedContractMethod<
    [
      _pool: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _expected: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  exchange_with_best_rate: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _expected: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  get_best_rate: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  get_exchange_amount: TypedContractMethod<
    [
      _pool: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  get_input_amount: TypedContractMethod<
    [
      _pool: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exchange"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _expected: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchange_with_best_rate"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _expected: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get_best_rate"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [[string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_exchange_amount"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_input_amount"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  filters: {};
}
