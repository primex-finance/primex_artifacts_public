/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPrimexLensPart2 {
  export type CheckRewardParamsStruct = {
    bucket: AddressLike;
    amount: BigNumberish;
    duration: BigNumberish;
    rewardToken: AddressLike;
    pullOracleData: BytesLike[][];
    pullOracleTypes: BigNumberish[];
    borrowedRewardAssetOracleData: BytesLike;
  };

  export type CheckRewardParamsStructOutput = [
    bucket: string,
    amount: bigint,
    duration: bigint,
    rewardToken: string,
    pullOracleData: string[][],
    pullOracleTypes: bigint[],
    borrowedRewardAssetOracleData: string
  ] & {
    bucket: string;
    amount: bigint;
    duration: bigint;
    rewardToken: string;
    pullOracleData: string[][];
    pullOracleTypes: bigint[];
    borrowedRewardAssetOracleData: string;
  };
}

export interface IPrimexLensPart2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEstimatedMinProtocolFeeLiquidation"
      | "hasEnoughRewardsInDepositManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEstimatedMinProtocolFeeLiquidation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEnoughRewardsInDepositManager",
    values: [IPrimexLensPart2.CheckRewardParamsStruct, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEstimatedMinProtocolFeeLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEnoughRewardsInDepositManager",
    data: BytesLike
  ): Result;
}

export interface IPrimexLensPart2 extends BaseContract {
  connect(runner?: ContractRunner | null): IPrimexLensPart2;
  waitForDeployment(): Promise<this>;

  interface: IPrimexLensPart2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEstimatedMinProtocolFeeLiquidation: TypedContractMethod<
    [_pm: AddressLike],
    [bigint],
    "view"
  >;

  hasEnoughRewardsInDepositManager: TypedContractMethod<
    [
      _params: IPrimexLensPart2.CheckRewardParamsStruct,
      _depositManager: AddressLike,
      priceOracle: AddressLike
    ],
    [
      [boolean, bigint, bigint] & {
        isEnough: boolean;
        remainingReward: bigint;
        maxDepositAmount: bigint;
      }
    ],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEstimatedMinProtocolFeeLiquidation"
  ): TypedContractMethod<[_pm: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasEnoughRewardsInDepositManager"
  ): TypedContractMethod<
    [
      _params: IPrimexLensPart2.CheckRewardParamsStruct,
      _depositManager: AddressLike,
      priceOracle: AddressLike
    ],
    [
      [boolean, bigint, bigint] & {
        isEnough: boolean;
        remainingReward: bigint;
        maxDepositAmount: bigint;
      }
    ],
    "payable"
  >;

  filters: {};
}
