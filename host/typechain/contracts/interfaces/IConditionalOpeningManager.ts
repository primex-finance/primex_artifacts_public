/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LimitOrderLibrary {
  export type LimitOrderStruct = {
    bucket: AddressLike;
    positionAsset: AddressLike;
    depositAsset: AddressLike;
    depositAmount: BigNumberish;
    feeToken: AddressLike;
    protocolFee: BigNumberish;
    trader: AddressLike;
    deadline: BigNumberish;
    id: BigNumberish;
    leverage: BigNumberish;
    shouldOpenPosition: boolean;
    createdAt: BigNumberish;
    updatedConditionsAt: BigNumberish;
    extraParams: BytesLike;
  };

  export type LimitOrderStructOutput = [
    bucket: string,
    positionAsset: string,
    depositAsset: string,
    depositAmount: bigint,
    feeToken: string,
    protocolFee: bigint,
    trader: string,
    deadline: bigint,
    id: bigint,
    leverage: bigint,
    shouldOpenPosition: boolean,
    createdAt: bigint,
    updatedConditionsAt: bigint,
    extraParams: string
  ] & {
    bucket: string;
    positionAsset: string;
    depositAsset: string;
    depositAmount: bigint;
    feeToken: string;
    protocolFee: bigint;
    trader: string;
    deadline: bigint;
    id: bigint;
    leverage: bigint;
    shouldOpenPosition: boolean;
    createdAt: bigint;
    updatedConditionsAt: bigint;
    extraParams: string;
  };
}

export interface IConditionalOpeningManagerInterface extends Interface {
  getFunction(nameOrSignature: "canBeFilledAfterSwap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canBeFilledAfterSwap",
    values: [
      LimitOrderLibrary.LimitOrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "canBeFilledAfterSwap",
    data: BytesLike
  ): Result;
}

export interface IConditionalOpeningManager extends BaseContract {
  connect(runner?: ContractRunner | null): IConditionalOpeningManager;
  waitForDeployment(): Promise<this>;

  interface: IConditionalOpeningManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canBeFilledAfterSwap: TypedContractMethod<
    [
      _order: LimitOrderLibrary.LimitOrderStruct,
      _params: BytesLike,
      _additionalParams: BytesLike,
      _exchangeRate: BigNumberish
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canBeFilledAfterSwap"
  ): TypedContractMethod<
    [
      _order: LimitOrderLibrary.LimitOrderStruct,
      _params: BytesLike,
      _additionalParams: BytesLike,
      _exchangeRate: BigNumberish
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
