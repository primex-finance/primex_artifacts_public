/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PrimexPricingLibrary {
  export type PathStruct = {
    dexName: string;
    shares: BigNumberish;
    payload: BytesLike;
  };

  export type PathStructOutput = [
    dexName: string,
    shares: bigint,
    payload: string
  ] & { dexName: string; shares: bigint; payload: string };

  export type RouteStruct = {
    to: AddressLike;
    paths: PrimexPricingLibrary.PathStruct[];
  };

  export type RouteStructOutput = [
    to: string,
    paths: PrimexPricingLibrary.PathStructOutput[]
  ] & { to: string; paths: PrimexPricingLibrary.PathStructOutput[] };

  export type MegaRouteStruct = {
    shares: BigNumberish;
    routes: PrimexPricingLibrary.RouteStruct[];
  };

  export type MegaRouteStructOutput = [
    shares: bigint,
    routes: PrimexPricingLibrary.RouteStructOutput[]
  ] & { shares: bigint; routes: PrimexPricingLibrary.RouteStructOutput[] };

  export type MegaSwapParamsStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    amountTokenA: BigNumberish;
    megaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
    receiver: AddressLike;
    deadline: BigNumberish;
  };

  export type MegaSwapParamsStructOutput = [
    tokenA: string,
    tokenB: string,
    amountTokenA: bigint,
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[],
    receiver: string,
    deadline: bigint
  ] & {
    tokenA: string;
    tokenB: string;
    amountTokenA: bigint;
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
    receiver: string;
    deadline: bigint;
  };
}

export declare namespace IDexAdapter {
  export type AmountParamsStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    amount: BigNumberish;
    megaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
  };

  export type AmountParamsStructOutput = [
    tokenA: string,
    tokenB: string,
    amount: bigint,
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[]
  ] & {
    tokenA: string;
    tokenB: string;
    amount: bigint;
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
  };

  export type GetAmountsParamsStruct = {
    encodedPath: BytesLike;
    amount: BigNumberish;
    dexRouter: AddressLike;
  };

  export type GetAmountsParamsStructOutput = [
    encodedPath: string,
    amount: bigint,
    dexRouter: string
  ] & { encodedPath: string; amount: bigint; dexRouter: string };

  export type SwapParamsStruct = {
    encodedPath: BytesLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    amountOutMin: BigNumberish;
    to: AddressLike;
    deadline: BigNumberish;
    dexRouter: AddressLike;
  };

  export type SwapParamsStructOutput = [
    encodedPath: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOutMin: bigint,
    to: string,
    deadline: bigint,
    dexRouter: string
  ] & {
    encodedPath: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOutMin: bigint;
    to: string;
    deadline: bigint;
    dexRouter: string;
  };
}

export interface IDexAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dexType"
      | "getAmountInByMegaRoutes"
      | "getAmountOutByMegaRoutes"
      | "getAmountsIn"
      | "getAmountsInByPaths"
      | "getAmountsInByRoutes"
      | "getAmountsOut"
      | "getAmountsOutByPaths"
      | "getAmountsOutByRoutes"
      | "getGas"
      | "initialize"
      | "performMegaRoutesSwap"
      | "performPathsSwap"
      | "performRoutesSwap"
      | "quoters"
      | "registry"
      | "setDexType"
      | "setQuoter"
      | "swapExactTokensForTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DexTypeChanged" | "QuoterChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dexType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountInByMegaRoutes",
    values: [IDexAdapter.AmountParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOutByMegaRoutes",
    values: [IDexAdapter.AmountParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [IDexAdapter.GetAmountsParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsInByPaths",
    values: [BigNumberish, PrimexPricingLibrary.PathStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsInByRoutes",
    values: [BigNumberish, PrimexPricingLibrary.RouteStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [IDexAdapter.GetAmountsParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOutByPaths",
    values: [BigNumberish, PrimexPricingLibrary.PathStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOutByRoutes",
    values: [BigNumberish, PrimexPricingLibrary.RouteStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "getGas", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performMegaRoutesSwap",
    values: [PrimexPricingLibrary.MegaSwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "performPathsSwap",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      PrimexPricingLibrary.PathStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "performRoutesSwap",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      PrimexPricingLibrary.RouteStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDexType",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuoter",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [IDexAdapter.SwapParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "dexType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountInByMegaRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutByMegaRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsInByPaths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsInByRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOutByPaths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOutByRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performMegaRoutesSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performPathsSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performRoutesSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDexType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setQuoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
}

export namespace DexTypeChangedEvent {
  export type InputTuple = [dexRouter: AddressLike, dexType: BigNumberish];
  export type OutputTuple = [dexRouter: string, dexType: bigint];
  export interface OutputObject {
    dexRouter: string;
    dexType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuoterChangedEvent {
  export type InputTuple = [dexRouter: AddressLike, quoter: AddressLike];
  export type OutputTuple = [dexRouter: string, quoter: string];
  export interface OutputObject {
    dexRouter: string;
    quoter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDexAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): IDexAdapter;
  waitForDeployment(): Promise<this>;

  interface: IDexAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dexType: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getAmountInByMegaRoutes: TypedContractMethod<
    [_params: IDexAdapter.AmountParamsStruct],
    [bigint],
    "nonpayable"
  >;

  getAmountOutByMegaRoutes: TypedContractMethod<
    [_params: IDexAdapter.AmountParamsStruct],
    [bigint],
    "nonpayable"
  >;

  getAmountsIn: TypedContractMethod<
    [_params: IDexAdapter.GetAmountsParamsStruct],
    [[bigint, bigint, bigint]],
    "nonpayable"
  >;

  getAmountsInByPaths: TypedContractMethod<
    [amountOut: BigNumberish, paths: PrimexPricingLibrary.PathStruct[]],
    [bigint],
    "nonpayable"
  >;

  getAmountsInByRoutes: TypedContractMethod<
    [amountOut: BigNumberish, routes: PrimexPricingLibrary.RouteStruct[]],
    [bigint],
    "nonpayable"
  >;

  getAmountsOut: TypedContractMethod<
    [_params: IDexAdapter.GetAmountsParamsStruct],
    [[bigint, bigint, bigint]],
    "nonpayable"
  >;

  getAmountsOutByPaths: TypedContractMethod<
    [amountIn: BigNumberish, paths: PrimexPricingLibrary.PathStruct[]],
    [bigint],
    "nonpayable"
  >;

  getAmountsOutByRoutes: TypedContractMethod<
    [amountIn: BigNumberish, routes: PrimexPricingLibrary.RouteStruct[]],
    [bigint],
    "nonpayable"
  >;

  getGas: TypedContractMethod<[dexRouter: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [_primexDNS: AddressLike],
    [void],
    "nonpayable"
  >;

  performMegaRoutesSwap: TypedContractMethod<
    [_params: PrimexPricingLibrary.MegaSwapParamsStruct],
    [bigint],
    "payable"
  >;

  performPathsSwap: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      receiver: AddressLike,
      paths: PrimexPricingLibrary.PathStruct[]
    ],
    [bigint],
    "payable"
  >;

  performRoutesSwap: TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountIn: BigNumberish,
      receiver: AddressLike,
      routes: PrimexPricingLibrary.RouteStruct[]
    ],
    [bigint],
    "payable"
  >;

  quoters: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  setDexType: TypedContractMethod<
    [_dexRouter: AddressLike, _dexType: BigNumberish],
    [void],
    "nonpayable"
  >;

  setQuoter: TypedContractMethod<
    [_dexRouter: AddressLike, _quoter: AddressLike],
    [void],
    "nonpayable"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [_params: IDexAdapter.SwapParamsStruct],
    [[bigint, bigint, bigint]],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dexType"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAmountInByMegaRoutes"
  ): TypedContractMethod<
    [_params: IDexAdapter.AmountParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountOutByMegaRoutes"
  ): TypedContractMethod<
    [_params: IDexAdapter.AmountParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountsIn"
  ): TypedContractMethod<
    [_params: IDexAdapter.GetAmountsParamsStruct],
    [[bigint, bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountsInByPaths"
  ): TypedContractMethod<
    [amountOut: BigNumberish, paths: PrimexPricingLibrary.PathStruct[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountsInByRoutes"
  ): TypedContractMethod<
    [amountOut: BigNumberish, routes: PrimexPricingLibrary.RouteStruct[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountsOut"
  ): TypedContractMethod<
    [_params: IDexAdapter.GetAmountsParamsStruct],
    [[bigint, bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountsOutByPaths"
  ): TypedContractMethod<
    [amountIn: BigNumberish, paths: PrimexPricingLibrary.PathStruct[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountsOutByRoutes"
  ): TypedContractMethod<
    [amountIn: BigNumberish, routes: PrimexPricingLibrary.RouteStruct[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGas"
  ): TypedContractMethod<[dexRouter: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_primexDNS: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "performMegaRoutesSwap"
  ): TypedContractMethod<
    [_params: PrimexPricingLibrary.MegaSwapParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "performPathsSwap"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      receiver: AddressLike,
      paths: PrimexPricingLibrary.PathStruct[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "performRoutesSwap"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountIn: BigNumberish,
      receiver: AddressLike,
      routes: PrimexPricingLibrary.RouteStruct[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "quoters"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDexType"
  ): TypedContractMethod<
    [_dexRouter: AddressLike, _dexType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setQuoter"
  ): TypedContractMethod<
    [_dexRouter: AddressLike, _quoter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [_params: IDexAdapter.SwapParamsStruct],
    [[bigint, bigint, bigint]],
    "payable"
  >;

  getEvent(
    key: "DexTypeChanged"
  ): TypedContractEvent<
    DexTypeChangedEvent.InputTuple,
    DexTypeChangedEvent.OutputTuple,
    DexTypeChangedEvent.OutputObject
  >;
  getEvent(
    key: "QuoterChanged"
  ): TypedContractEvent<
    QuoterChangedEvent.InputTuple,
    QuoterChangedEvent.OutputTuple,
    QuoterChangedEvent.OutputObject
  >;

  filters: {
    "DexTypeChanged(address,uint256)": TypedContractEvent<
      DexTypeChangedEvent.InputTuple,
      DexTypeChangedEvent.OutputTuple,
      DexTypeChangedEvent.OutputObject
    >;
    DexTypeChanged: TypedContractEvent<
      DexTypeChangedEvent.InputTuple,
      DexTypeChangedEvent.OutputTuple,
      DexTypeChangedEvent.OutputObject
    >;

    "QuoterChanged(address,address)": TypedContractEvent<
      QuoterChangedEvent.InputTuple,
      QuoterChangedEvent.OutputTuple,
      QuoterChangedEvent.OutputObject
    >;
    QuoterChanged: TypedContractEvent<
      QuoterChangedEvent.InputTuple,
      QuoterChangedEvent.OutputTuple,
      QuoterChangedEvent.OutputObject
    >;
  };
}
