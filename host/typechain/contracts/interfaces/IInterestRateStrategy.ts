/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IInterestRateStrategy {
  export type BarCalculationParamsStruct = {
    urOptimal: BigNumberish;
    k0: BigNumberish;
    k1: BigNumberish;
    b0: BigNumberish;
    b1: BigNumberish;
  };

  export type BarCalculationParamsStructOutput = [
    urOptimal: bigint,
    k0: bigint,
    k1: bigint,
    b0: bigint,
    b1: bigint
  ] & { urOptimal: bigint; k0: bigint; k1: bigint; b0: bigint; b1: bigint };
}

export interface IInterestRateStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateInterestRates"
      | "getBarCalculationParams"
      | "setBarCalculationParams"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BarCalculationParamsChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateInterestRates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBarCalculationParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBarCalculationParams",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateInterestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBarCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBarCalculationParams",
    data: BytesLike
  ): Result;
}

export namespace BarCalculationParamsChangedEvent {
  export type InputTuple = [
    bucket: AddressLike,
    urOptimal: BigNumberish,
    k0: BigNumberish,
    k1: BigNumberish,
    b0: BigNumberish,
    b1: BigNumberish
  ];
  export type OutputTuple = [
    bucket: string,
    urOptimal: bigint,
    k0: bigint,
    k1: bigint,
    b0: bigint,
    b1: bigint
  ];
  export interface OutputObject {
    bucket: string;
    urOptimal: bigint;
    k0: bigint;
    k1: bigint;
    b0: bigint;
    b1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInterestRateStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): IInterestRateStrategy;
  waitForDeployment(): Promise<this>;

  interface: IInterestRateStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateInterestRates: TypedContractMethod<
    [ur: BigNumberish, reserveRate: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;

  getBarCalculationParams: TypedContractMethod<
    [_address: AddressLike],
    [IInterestRateStrategy.BarCalculationParamsStructOutput],
    "view"
  >;

  setBarCalculationParams: TypedContractMethod<
    [_params: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateInterestRates"
  ): TypedContractMethod<
    [ur: BigNumberish, reserveRate: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBarCalculationParams"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IInterestRateStrategy.BarCalculationParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setBarCalculationParams"
  ): TypedContractMethod<[_params: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "BarCalculationParamsChanged"
  ): TypedContractEvent<
    BarCalculationParamsChangedEvent.InputTuple,
    BarCalculationParamsChangedEvent.OutputTuple,
    BarCalculationParamsChangedEvent.OutputObject
  >;

  filters: {
    "BarCalculationParamsChanged(address,uint256,uint256,uint256,uint256,int256)": TypedContractEvent<
      BarCalculationParamsChangedEvent.InputTuple,
      BarCalculationParamsChangedEvent.OutputTuple,
      BarCalculationParamsChangedEvent.OutputObject
    >;
    BarCalculationParamsChanged: TypedContractEvent<
      BarCalculationParamsChangedEvent.InputTuple,
      BarCalculationParamsChangedEvent.OutputTuple,
      BarCalculationParamsChangedEvent.OutputObject
    >;
  };
}
