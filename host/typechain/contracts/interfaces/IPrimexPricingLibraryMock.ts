/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PrimexPricingLibrary {
  export type PathStruct = {
    dexName: string;
    shares: BigNumberish;
    payload: BytesLike;
  };

  export type PathStructOutput = [
    dexName: string,
    shares: bigint,
    payload: string
  ] & { dexName: string; shares: bigint; payload: string };

  export type RouteStruct = {
    to: AddressLike;
    paths: PrimexPricingLibrary.PathStruct[];
  };

  export type RouteStructOutput = [
    to: string,
    paths: PrimexPricingLibrary.PathStructOutput[]
  ] & { to: string; paths: PrimexPricingLibrary.PathStructOutput[] };

  export type MegaRouteStruct = {
    shares: BigNumberish;
    routes: PrimexPricingLibrary.RouteStruct[];
  };

  export type MegaRouteStructOutput = [
    shares: bigint,
    routes: PrimexPricingLibrary.RouteStructOutput[]
  ] & { shares: bigint; routes: PrimexPricingLibrary.RouteStructOutput[] };

  export type MegaSwapParamsStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    amountTokenA: BigNumberish;
    megaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
    receiver: AddressLike;
    deadline: BigNumberish;
  };

  export type MegaSwapParamsStructOutput = [
    tokenA: string,
    tokenB: string,
    amountTokenA: bigint,
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[],
    receiver: string,
    deadline: bigint
  ] & {
    tokenA: string;
    tokenB: string;
    amountTokenA: bigint;
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
    receiver: string;
    deadline: bigint;
  };
}

export declare namespace IDexAdapter {
  export type AmountParamsStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    amount: BigNumberish;
    megaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
  };

  export type AmountParamsStructOutput = [
    tokenA: string,
    tokenB: string,
    amount: bigint,
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[]
  ] & {
    tokenA: string;
    tokenB: string;
    amount: bigint;
    megaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
  };
}

export interface IPrimexPricingLibraryMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDepositAmountInBorrowed"
      | "getLiquidationPrice"
      | "getLiquidationPriceByOrder"
      | "getOracleAmountsOut"
      | "megaSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDepositAmountInBorrowed",
    values: [
      IDexAdapter.AmountParamsStruct,
      boolean,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPrice",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPriceByOrder",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleAmountsOut",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "megaSwap",
    values: [
      PrimexPricingLibrary.MegaSwapParamsStruct,
      BigNumberish,
      AddressLike,
      AddressLike,
      boolean,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDepositAmountInBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPriceByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "megaSwap", data: BytesLike): Result;
}

export interface IPrimexPricingLibraryMock extends BaseContract {
  connect(runner?: ContractRunner | null): IPrimexPricingLibraryMock;
  waitForDeployment(): Promise<this>;

  interface: IPrimexPricingLibraryMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDepositAmountInBorrowed: TypedContractMethod<
    [
      _params: IDexAdapter.AmountParamsStruct,
      _isThirdAsset: boolean,
      _dexAdapter: AddressLike,
      _priceOracle: AddressLike,
      _oracleData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getLiquidationPrice: TypedContractMethod<
    [
      _bucket: AddressLike,
      _positionAsset: AddressLike,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: AddressLike
    ],
    [bigint],
    "view"
  >;

  getLiquidationPriceByOrder: TypedContractMethod<
    [
      _bucket: AddressLike,
      _positionAsset: AddressLike,
      _limitPrice: BigNumberish,
      _leverage: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getOracleAmountsOut: TypedContractMethod<
    [
      _tokenA: AddressLike,
      _tokenB: AddressLike,
      _amountAssetA: BigNumberish,
      _priceOracle: AddressLike,
      _oracleData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  megaSwap: TypedContractMethod<
    [
      _params: PrimexPricingLibrary.MegaSwapParamsStruct,
      _maximumOracleTolerableLimit: BigNumberish,
      _dexAdapter: AddressLike,
      _priceOracle: AddressLike,
      _needOracleTolerableLimitCheck: boolean,
      _oracleData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDepositAmountInBorrowed"
  ): TypedContractMethod<
    [
      _params: IDexAdapter.AmountParamsStruct,
      _isThirdAsset: boolean,
      _dexAdapter: AddressLike,
      _priceOracle: AddressLike,
      _oracleData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLiquidationPrice"
  ): TypedContractMethod<
    [
      _bucket: AddressLike,
      _positionAsset: AddressLike,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationPriceByOrder"
  ): TypedContractMethod<
    [
      _bucket: AddressLike,
      _positionAsset: AddressLike,
      _limitPrice: BigNumberish,
      _leverage: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOracleAmountsOut"
  ): TypedContractMethod<
    [
      _tokenA: AddressLike,
      _tokenB: AddressLike,
      _amountAssetA: BigNumberish,
      _priceOracle: AddressLike,
      _oracleData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "megaSwap"
  ): TypedContractMethod<
    [
      _params: PrimexPricingLibrary.MegaSwapParamsStruct,
      _maximumOracleTolerableLimit: BigNumberish,
      _dexAdapter: AddressLike,
      _priceOracle: AddressLike,
      _needOracleTolerableLimitCheck: boolean,
      _oracleData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
