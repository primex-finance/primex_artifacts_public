/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PositionLibrary {
  export type PositionStruct = {
    id: BigNumberish;
    scaledDebtAmount: BigNumberish;
    bucket: AddressLike;
    soldAsset: AddressLike;
    depositAmountInSoldAsset: BigNumberish;
    positionAsset: AddressLike;
    positionAmount: BigNumberish;
    trader: AddressLike;
    openBorrowIndex: BigNumberish;
    createdAt: BigNumberish;
    updatedConditionsAt: BigNumberish;
    extraParams: BytesLike;
  };

  export type PositionStructOutput = [
    id: bigint,
    scaledDebtAmount: bigint,
    bucket: string,
    soldAsset: string,
    depositAmountInSoldAsset: bigint,
    positionAsset: string,
    positionAmount: bigint,
    trader: string,
    openBorrowIndex: bigint,
    createdAt: bigint,
    updatedConditionsAt: bigint,
    extraParams: string
  ] & {
    id: bigint;
    scaledDebtAmount: bigint;
    bucket: string;
    soldAsset: string;
    depositAmountInSoldAsset: bigint;
    positionAsset: string;
    positionAmount: bigint;
    trader: string;
    openBorrowIndex: bigint;
    createdAt: bigint;
    updatedConditionsAt: bigint;
    extraParams: string;
  };
}

export interface PositionLibraryInterface extends Interface {
  getFunction(
    nameOrSignature: "decodeFeeTokenAddress" | "getDebt" | "health"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClosePosition" | "PaidProtocolFee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decodeFeeTokenAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebt",
    values: [PositionLibrary.PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "health",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeFeeTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
}

export namespace ClosePositionEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    closedBy: AddressLike,
    bucketAddress: AddressLike,
    soldAsset: AddressLike,
    positionAsset: AddressLike,
    decreasePositionAmount: BigNumberish,
    profit: BigNumberish,
    positionDebt: BigNumberish,
    amountOut: BigNumberish,
    reason: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    closedBy: string,
    bucketAddress: string,
    soldAsset: string,
    positionAsset: string,
    decreasePositionAmount: bigint,
    profit: bigint,
    positionDebt: bigint,
    amountOut: bigint,
    reason: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    closedBy: string;
    bucketAddress: string;
    soldAsset: string;
    positionAsset: string;
    decreasePositionAmount: bigint;
    profit: bigint;
    positionDebt: bigint;
    amountOut: bigint;
    reason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaidProtocolFeeEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    paymentAsset: AddressLike,
    feeRateType: BigNumberish,
    feeInPaymentAsset: BigNumberish,
    feeInPmx: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    paymentAsset: string,
    feeRateType: bigint,
    feeInPaymentAsset: bigint,
    feeInPmx: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    paymentAsset: string;
    feeRateType: bigint;
    feeInPaymentAsset: bigint;
    feeInPmx: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionLibrary extends BaseContract {
  connect(runner?: ContractRunner | null): PositionLibrary;
  waitForDeployment(): Promise<this>;

  interface: PositionLibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeFeeTokenAddress: TypedContractMethod<
    [data: BytesLike],
    [string],
    "view"
  >;

  getDebt: TypedContractMethod<
    [position: PositionLibrary.PositionStruct],
    [bigint],
    "view"
  >;

  health: TypedContractMethod<
    [
      positionAmountInBorrowedAsset: BigNumberish,
      pairPriceDrop: BigNumberish,
      securityBuffer: BigNumberish,
      oracleTolerableLimit: BigNumberish,
      positionDebt: BigNumberish,
      feeBuffer: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeFeeTokenAddress"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDebt"
  ): TypedContractMethod<
    [position: PositionLibrary.PositionStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "health"
  ): TypedContractMethod<
    [
      positionAmountInBorrowedAsset: BigNumberish,
      pairPriceDrop: BigNumberish,
      securityBuffer: BigNumberish,
      oracleTolerableLimit: BigNumberish,
      positionDebt: BigNumberish,
      feeBuffer: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ClosePosition"
  ): TypedContractEvent<
    ClosePositionEvent.InputTuple,
    ClosePositionEvent.OutputTuple,
    ClosePositionEvent.OutputObject
  >;
  getEvent(
    key: "PaidProtocolFee"
  ): TypedContractEvent<
    PaidProtocolFeeEvent.InputTuple,
    PaidProtocolFeeEvent.OutputTuple,
    PaidProtocolFeeEvent.OutputObject
  >;

  filters: {
    "ClosePosition(uint256,address,address,address,address,address,uint256,int256,uint256,uint256,uint8)": TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;
    ClosePosition: TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;

    "PaidProtocolFee(uint256,address,address,uint8,uint256,uint256)": TypedContractEvent<
      PaidProtocolFeeEvent.InputTuple,
      PaidProtocolFeeEvent.OutputTuple,
      PaidProtocolFeeEvent.OutputObject
    >;
    PaidProtocolFee: TypedContractEvent<
      PaidProtocolFeeEvent.InputTuple,
      PaidProtocolFeeEvent.OutputTuple,
      PaidProtocolFeeEvent.OutputObject
    >;
  };
}
