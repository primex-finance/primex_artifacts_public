/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PrimexPricingLibraryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodePath"
      | "encodePath"
      | "getLiquidationPrice"
      | "minPositionSize"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;

  encodeFunctionData(
    functionFragment: "decodePath",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodePath",
    values: [AddressLike[], AddressLike, BytesLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPrice",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "decodePath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodePath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    withdrawer: AddressLike,
    borrowAssetReceiver: AddressLike,
    borrowedAsset: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    withdrawer: string,
    borrowAssetReceiver: string,
    borrowedAsset: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    withdrawer: string;
    borrowAssetReceiver: string;
    borrowedAsset: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrimexPricingLibrary extends BaseContract {
  connect(runner?: ContractRunner | null): PrimexPricingLibrary;
  waitForDeployment(): Promise<this>;

  interface: PrimexPricingLibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodePath: TypedContractMethod<
    [encodedPath: BytesLike, dexRouter: AddressLike, dexAdapter: AddressLike],
    [string[]],
    "view"
  >;

  encodePath: TypedContractMethod<
    [
      path: AddressLike[],
      dexRouter: AddressLike,
      ancillaryData: BytesLike,
      dexAdapter: AddressLike,
      isAmountToBuy: boolean
    ],
    [string],
    "view"
  >;

  getLiquidationPrice: TypedContractMethod<
    [
      _bucket: AddressLike,
      _positionAsset: AddressLike,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: AddressLike
    ],
    [bigint],
    "view"
  >;

  minPositionSize: TypedContractMethod<
    [
      _priceOracle: AddressLike,
      _keeperRewardDistributor: AddressLike,
      _primexDNS: AddressLike,
      _tradingOrderType: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodePath"
  ): TypedContractMethod<
    [encodedPath: BytesLike, dexRouter: AddressLike, dexAdapter: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodePath"
  ): TypedContractMethod<
    [
      path: AddressLike[],
      dexRouter: AddressLike,
      ancillaryData: BytesLike,
      dexAdapter: AddressLike,
      isAmountToBuy: boolean
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationPrice"
  ): TypedContractMethod<
    [
      _bucket: AddressLike,
      _positionAsset: AddressLike,
      _positionAmount: BigNumberish,
      _positionDebt: BigNumberish,
      _primexDNS: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "minPositionSize"
  ): TypedContractMethod<
    [
      _priceOracle: AddressLike,
      _keeperRewardDistributor: AddressLike,
      _primexDNS: AddressLike,
      _tradingOrderType: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
