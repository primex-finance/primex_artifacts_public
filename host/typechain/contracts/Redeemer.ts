/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RedeemerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeRate"
      | "earlyPmx"
      | "pause"
      | "paused"
      | "pmx"
      | "rate"
      | "redeem"
      | "registry"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminClaimedEarlyTokens"
      | "AdminClaimedRegularTokens"
      | "Paused"
      | "RateChanged"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earlyPmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "changeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earlyPmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace AdminClaimedEarlyTokensEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminClaimedRegularTokensEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateChangedEvent {
  export type InputTuple = [rate: BigNumberish];
  export type OutputTuple = [rate: bigint];
  export interface OutputObject {
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Redeemer extends BaseContract {
  connect(runner?: ContractRunner | null): Redeemer;
  waitForDeployment(): Promise<this>;

  interface: RedeemerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeRate: TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;

  earlyPmx: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pmx: TypedContractMethod<[], [string], "view">;

  rate: TypedContractMethod<[], [bigint], "view">;

  redeem: TypedContractMethod<[], [void], "nonpayable">;

  registry: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "earlyPmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AdminClaimedEarlyTokens"
  ): TypedContractEvent<
    AdminClaimedEarlyTokensEvent.InputTuple,
    AdminClaimedEarlyTokensEvent.OutputTuple,
    AdminClaimedEarlyTokensEvent.OutputObject
  >;
  getEvent(
    key: "AdminClaimedRegularTokens"
  ): TypedContractEvent<
    AdminClaimedRegularTokensEvent.InputTuple,
    AdminClaimedRegularTokensEvent.OutputTuple,
    AdminClaimedRegularTokensEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RateChanged"
  ): TypedContractEvent<
    RateChangedEvent.InputTuple,
    RateChangedEvent.OutputTuple,
    RateChangedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AdminClaimedEarlyTokens(address,address,uint256)": TypedContractEvent<
      AdminClaimedEarlyTokensEvent.InputTuple,
      AdminClaimedEarlyTokensEvent.OutputTuple,
      AdminClaimedEarlyTokensEvent.OutputObject
    >;
    AdminClaimedEarlyTokens: TypedContractEvent<
      AdminClaimedEarlyTokensEvent.InputTuple,
      AdminClaimedEarlyTokensEvent.OutputTuple,
      AdminClaimedEarlyTokensEvent.OutputObject
    >;

    "AdminClaimedRegularTokens(address,address,uint256)": TypedContractEvent<
      AdminClaimedRegularTokensEvent.InputTuple,
      AdminClaimedRegularTokensEvent.OutputTuple,
      AdminClaimedRegularTokensEvent.OutputObject
    >;
    AdminClaimedRegularTokens: TypedContractEvent<
      AdminClaimedRegularTokensEvent.InputTuple,
      AdminClaimedRegularTokensEvent.OutputTuple,
      AdminClaimedRegularTokensEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RateChanged(uint256)": TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;
    RateChanged: TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
