/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IUniswapPriceFeed {
  export type PoolDataStruct = {
    poolAddress: AddressLike;
    fee: BigNumberish;
    lastUpdatedTimestamp: BigNumberish;
    lastUpdatedCardinalityNext: BigNumberish;
  };

  export type PoolDataStructOutput = [
    poolAddress: string,
    fee: bigint,
    lastUpdatedTimestamp: bigint,
    lastUpdatedCardinalityNext: bigint
  ] & {
    poolAddress: string;
    fee: bigint;
    lastUpdatedTimestamp: bigint;
    lastUpdatedCardinalityNext: bigint;
  };
}

export interface UniswapPriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_CARDINALITY"
      | "UPDATE_INTERVAL"
      | "activeFees"
      | "addFee"
      | "fees"
      | "getExchangeRate"
      | "getPool"
      | "getQuote"
      | "getQuoteAndUpdatePool"
      | "getUpdatedPool"
      | "poolUpdateInterval"
      | "pools"
      | "registry"
      | "setPoolUpdateInterval"
      | "setTwapInterval"
      | "supportsInterface"
      | "twapInterval"
      | "uniswapV3Factory"
      | "updatePool"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_CARDINALITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAndUpdatePool",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdatedPool",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolUpdateInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPoolUpdateInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "twapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_CARDINALITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activeFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAndUpdatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdatedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolUpdateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolUpdateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
}

export namespace PoolUpdatedEvent {
  export type InputTuple = [pool: IUniswapPriceFeed.PoolDataStruct];
  export type OutputTuple = [pool: IUniswapPriceFeed.PoolDataStructOutput];
  export interface OutputObject {
    pool: IUniswapPriceFeed.PoolDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UniswapPriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapPriceFeed;
  waitForDeployment(): Promise<this>;

  interface: UniswapPriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_CARDINALITY: TypedContractMethod<[], [bigint], "view">;

  UPDATE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  activeFees: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  addFee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  fees: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getExchangeRate: TypedContractMethod<
    [baseToken: AddressLike, quoteToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getPool: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [IUniswapPriceFeed.PoolDataStructOutput],
    "view"
  >;

  getQuote: TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      secondsTwapInterval: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getQuoteAndUpdatePool: TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      secondsTwapInterval: BigNumberish,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getUpdatedPool: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish
    ],
    [
      [IUniswapPriceFeed.PoolDataStructOutput, bigint[], bigint] & {
        pool: IUniswapPriceFeed.PoolDataStructOutput;
        tickCumulatives: bigint[];
        sqrtPriceX96: bigint;
      }
    ],
    "nonpayable"
  >;

  poolUpdateInterval: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        poolAddress: string;
        fee: bigint;
        lastUpdatedTimestamp: bigint;
        lastUpdatedCardinalityNext: bigint;
      }
    ],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  setPoolUpdateInterval: TypedContractMethod<
    [_poolUpdateInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTwapInterval: TypedContractMethod<
    [_twapInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  twapInterval: TypedContractMethod<[], [bigint], "view">;

  uniswapV3Factory: TypedContractMethod<[], [string], "view">;

  updatePool: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      cardinalityNextIncrease: BigNumberish
    ],
    [
      [IUniswapPriceFeed.PoolDataStructOutput, bigint[], bigint] & {
        highestLiquidityPool: IUniswapPriceFeed.PoolDataStructOutput;
        tickCumulatives: bigint[];
        sqrtPriceX96: bigint;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_CARDINALITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPDATE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeFees"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "addFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<
    [baseToken: AddressLike, quoteToken: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [IUniswapPriceFeed.PoolDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuote"
  ): TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      secondsTwapInterval: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuoteAndUpdatePool"
  ): TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      secondsTwapInterval: BigNumberish,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUpdatedPool"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      secondsUpdateInterval: BigNumberish,
      cardinalityNextIncrease: BigNumberish
    ],
    [
      [IUniswapPriceFeed.PoolDataStructOutput, bigint[], bigint] & {
        pool: IUniswapPriceFeed.PoolDataStructOutput;
        tickCumulatives: bigint[];
        sqrtPriceX96: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolUpdateInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        poolAddress: string;
        fee: bigint;
        lastUpdatedTimestamp: bigint;
        lastUpdatedCardinalityNext: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPoolUpdateInterval"
  ): TypedContractMethod<
    [_poolUpdateInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTwapInterval"
  ): TypedContractMethod<[_twapInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "twapInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "uniswapV3Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updatePool"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      cardinalityNextIncrease: BigNumberish
    ],
    [
      [IUniswapPriceFeed.PoolDataStructOutput, bigint[], bigint] & {
        highestLiquidityPool: IUniswapPriceFeed.PoolDataStructOutput;
        tickCumulatives: bigint[];
        sqrtPriceX96: bigint;
      }
    ],
    "nonpayable"
  >;

  getEvent(
    key: "PoolUpdated"
  ): TypedContractEvent<
    PoolUpdatedEvent.InputTuple,
    PoolUpdatedEvent.OutputTuple,
    PoolUpdatedEvent.OutputObject
  >;

  filters: {
    "PoolUpdated(tuple)": TypedContractEvent<
      PoolUpdatedEvent.InputTuple,
      PoolUpdatedEvent.OutputTuple,
      PoolUpdatedEvent.OutputObject
    >;
    PoolUpdated: TypedContractEvent<
      PoolUpdatedEvent.InputTuple,
      PoolUpdatedEvent.OutputTuple,
      PoolUpdatedEvent.OutputObject
    >;
  };
}
