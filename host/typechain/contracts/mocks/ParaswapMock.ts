/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ParaswapMock {
  export type RouteStruct = {
    index: BigNumberish;
    targetExchange: AddressLike;
    percent: BigNumberish;
    payload: BytesLike;
    networkFee: BigNumberish;
  };

  export type RouteStructOutput = [
    index: bigint,
    targetExchange: string,
    percent: bigint,
    payload: string,
    networkFee: bigint
  ] & {
    index: bigint;
    targetExchange: string;
    percent: bigint;
    payload: string;
    networkFee: bigint;
  };

  export type BuyDataStruct = {
    adapter: AddressLike;
    fromToken: AddressLike;
    toToken: AddressLike;
    fromAmount: BigNumberish;
    toAmount: BigNumberish;
    expectedAmount: BigNumberish;
    beneficiary: AddressLike;
    route: ParaswapMock.RouteStruct[];
    partner: AddressLike;
    feePercent: BigNumberish;
    permit: BytesLike;
    deadline: BigNumberish;
    uuid: BytesLike;
  };

  export type BuyDataStructOutput = [
    adapter: string,
    fromToken: string,
    toToken: string,
    fromAmount: bigint,
    toAmount: bigint,
    expectedAmount: bigint,
    beneficiary: string,
    route: ParaswapMock.RouteStructOutput[],
    partner: string,
    feePercent: bigint,
    permit: string,
    deadline: bigint,
    uuid: string
  ] & {
    adapter: string;
    fromToken: string;
    toToken: string;
    fromAmount: bigint;
    toAmount: bigint;
    expectedAmount: bigint;
    beneficiary: string;
    route: ParaswapMock.RouteStructOutput[];
    partner: string;
    feePercent: bigint;
    permit: string;
    deadline: bigint;
    uuid: string;
  };

  export type AdapterStruct = {
    adapter: AddressLike;
    percent: BigNumberish;
    networkFee: BigNumberish;
    route: ParaswapMock.RouteStruct[];
  };

  export type AdapterStructOutput = [
    adapter: string,
    percent: bigint,
    networkFee: bigint,
    route: ParaswapMock.RouteStructOutput[]
  ] & {
    adapter: string;
    percent: bigint;
    networkFee: bigint;
    route: ParaswapMock.RouteStructOutput[];
  };

  export type PathStruct = {
    to: AddressLike;
    totalNetworkFee: BigNumberish;
    adapters: ParaswapMock.AdapterStruct[];
  };

  export type PathStructOutput = [
    to: string,
    totalNetworkFee: bigint,
    adapters: ParaswapMock.AdapterStructOutput[]
  ] & {
    to: string;
    totalNetworkFee: bigint;
    adapters: ParaswapMock.AdapterStructOutput[];
  };

  export type MegaSwapPathStruct = {
    fromAmountPercent: BigNumberish;
    path: ParaswapMock.PathStruct[];
  };

  export type MegaSwapPathStructOutput = [
    fromAmountPercent: bigint,
    path: ParaswapMock.PathStructOutput[]
  ] & { fromAmountPercent: bigint; path: ParaswapMock.PathStructOutput[] };

  export type MegaSwapSellDataStruct = {
    fromToken: AddressLike;
    fromAmount: BigNumberish;
    toAmount: BigNumberish;
    expectedAmount: BigNumberish;
    beneficiary: AddressLike;
    path: ParaswapMock.MegaSwapPathStruct[];
    partner: AddressLike;
    feePercent: BigNumberish;
    permit: BytesLike;
    deadline: BigNumberish;
    uuid: BytesLike;
  };

  export type MegaSwapSellDataStructOutput = [
    fromToken: string,
    fromAmount: bigint,
    toAmount: bigint,
    expectedAmount: bigint,
    beneficiary: string,
    path: ParaswapMock.MegaSwapPathStructOutput[],
    partner: string,
    feePercent: bigint,
    permit: string,
    deadline: bigint,
    uuid: string
  ] & {
    fromToken: string;
    fromAmount: bigint;
    toAmount: bigint;
    expectedAmount: bigint;
    beneficiary: string;
    path: ParaswapMock.MegaSwapPathStructOutput[];
    partner: string;
    feePercent: bigint;
    permit: string;
    deadline: bigint;
    uuid: string;
  };

  export type SellDataStruct = {
    fromToken: AddressLike;
    fromAmount: BigNumberish;
    toAmount: BigNumberish;
    expectedAmount: BigNumberish;
    beneficiary: AddressLike;
    path: ParaswapMock.PathStruct[];
    partner: AddressLike;
    feePercent: BigNumberish;
    permit: BytesLike;
    deadline: BigNumberish;
    uuid: BytesLike;
  };

  export type SellDataStructOutput = [
    fromToken: string,
    fromAmount: bigint,
    toAmount: bigint,
    expectedAmount: bigint,
    beneficiary: string,
    path: ParaswapMock.PathStructOutput[],
    partner: string,
    feePercent: bigint,
    permit: string,
    deadline: bigint,
    uuid: string
  ] & {
    fromToken: string;
    fromAmount: bigint;
    toAmount: bigint;
    expectedAmount: bigint;
    beneficiary: string;
    path: ParaswapMock.PathStructOutput[];
    partner: string;
    feePercent: bigint;
    permit: string;
    deadline: bigint;
    uuid: string;
  };
}

export interface ParaswapMockInterface extends Interface {
  getFunction(
    nameOrSignature: "buy" | "getTokenTransferProxy" | "megaSwap" | "multiSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [ParaswapMock.BuyDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTransferProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "megaSwap",
    values: [ParaswapMock.MegaSwapSellDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSwap",
    values: [ParaswapMock.SellDataStruct]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTransferProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "megaSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiSwap", data: BytesLike): Result;
}

export interface ParaswapMock extends BaseContract {
  connect(runner?: ContractRunner | null): ParaswapMock;
  waitForDeployment(): Promise<this>;

  interface: ParaswapMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buy: TypedContractMethod<
    [data: ParaswapMock.BuyDataStruct],
    [bigint],
    "payable"
  >;

  getTokenTransferProxy: TypedContractMethod<[], [string], "view">;

  megaSwap: TypedContractMethod<
    [data: ParaswapMock.MegaSwapSellDataStruct],
    [bigint],
    "payable"
  >;

  multiSwap: TypedContractMethod<
    [data: ParaswapMock.SellDataStruct],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [data: ParaswapMock.BuyDataStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTokenTransferProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "megaSwap"
  ): TypedContractMethod<
    [data: ParaswapMock.MegaSwapSellDataStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multiSwap"
  ): TypedContractMethod<
    [data: ParaswapMock.SellDataStruct],
    [bigint],
    "payable"
  >;

  filters: {};
}
