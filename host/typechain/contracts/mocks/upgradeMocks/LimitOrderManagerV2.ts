/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace LimitOrderLibrary {
  export type LimitOrderStruct = {
    bucket: AddressLike;
    positionAsset: AddressLike;
    depositAsset: AddressLike;
    depositAmount: BigNumberish;
    feeToken: AddressLike;
    protocolFee: BigNumberish;
    trader: AddressLike;
    deadline: BigNumberish;
    id: BigNumberish;
    leverage: BigNumberish;
    shouldOpenPosition: boolean;
    createdAt: BigNumberish;
    updatedConditionsAt: BigNumberish;
    extraParams: BytesLike;
  };

  export type LimitOrderStructOutput = [
    bucket: string,
    positionAsset: string,
    depositAsset: string,
    depositAmount: bigint,
    feeToken: string,
    protocolFee: bigint,
    trader: string,
    deadline: bigint,
    id: bigint,
    leverage: bigint,
    shouldOpenPosition: boolean,
    createdAt: bigint,
    updatedConditionsAt: bigint,
    extraParams: string
  ] & {
    bucket: string;
    positionAsset: string;
    depositAsset: string;
    depositAmount: bigint;
    feeToken: string;
    protocolFee: bigint;
    trader: string;
    deadline: bigint;
    id: bigint;
    leverage: bigint;
    shouldOpenPosition: boolean;
    createdAt: bigint;
    updatedConditionsAt: bigint;
    extraParams: string;
  };

  export type ConditionStruct = {
    managerType: BigNumberish;
    params: BytesLike;
  };

  export type ConditionStructOutput = [managerType: bigint, params: string] & {
    managerType: bigint;
    params: string;
  };

  export type CreateLimitOrderParamsStruct = {
    bucket: string;
    depositAmount: BigNumberish;
    depositAsset: AddressLike;
    positionAsset: AddressLike;
    deadline: BigNumberish;
    takeDepositFromWallet: boolean;
    leverage: BigNumberish;
    shouldOpenPosition: boolean;
    openConditions: LimitOrderLibrary.ConditionStruct[];
    closeConditions: LimitOrderLibrary.ConditionStruct[];
    isProtocolFeeInPmx: boolean;
    nativeDepositAssetOracleData: BytesLike;
    pullOracleData: BytesLike[][];
    pullOracleTypes: BigNumberish[];
  };

  export type CreateLimitOrderParamsStructOutput = [
    bucket: string,
    depositAmount: bigint,
    depositAsset: string,
    positionAsset: string,
    deadline: bigint,
    takeDepositFromWallet: boolean,
    leverage: bigint,
    shouldOpenPosition: boolean,
    openConditions: LimitOrderLibrary.ConditionStructOutput[],
    closeConditions: LimitOrderLibrary.ConditionStructOutput[],
    isProtocolFeeInPmx: boolean,
    nativeDepositAssetOracleData: string,
    pullOracleData: string[][],
    pullOracleTypes: bigint[]
  ] & {
    bucket: string;
    depositAmount: bigint;
    depositAsset: string;
    positionAsset: string;
    deadline: bigint;
    takeDepositFromWallet: boolean;
    leverage: bigint;
    shouldOpenPosition: boolean;
    openConditions: LimitOrderLibrary.ConditionStructOutput[];
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
    isProtocolFeeInPmx: boolean;
    nativeDepositAssetOracleData: string;
    pullOracleData: string[][];
    pullOracleTypes: bigint[];
  };

  export type OpenPositionParamsStruct = {
    orderId: BigNumberish;
    conditionIndex: BigNumberish;
    comAdditionalParams: BytesLike;
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
    keeper: AddressLike;
    firstAssetOracleData: BytesLike;
    thirdAssetOracleData: BytesLike;
    depositSoldAssetOracleData: BytesLike;
    nativePmxOracleData: BytesLike;
    positionNativeAssetOracleData: BytesLike;
    nativePositionAssetOracleData: BytesLike;
    pmxPositionAssetOracleData: BytesLike;
    positionUsdOracleData: BytesLike;
    nativeSoldAssetOracleData: BytesLike;
    pullOracleData: BytesLike[][];
    pullOracleTypes: BigNumberish[];
    borrowedAmount: BigNumberish;
  };

  export type OpenPositionParamsStructOutput = [
    orderId: bigint,
    conditionIndex: bigint,
    comAdditionalParams: string,
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[],
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[],
    keeper: string,
    firstAssetOracleData: string,
    thirdAssetOracleData: string,
    depositSoldAssetOracleData: string,
    nativePmxOracleData: string,
    positionNativeAssetOracleData: string,
    nativePositionAssetOracleData: string,
    pmxPositionAssetOracleData: string,
    positionUsdOracleData: string,
    nativeSoldAssetOracleData: string,
    pullOracleData: string[][],
    pullOracleTypes: bigint[],
    borrowedAmount: bigint
  ] & {
    orderId: bigint;
    conditionIndex: bigint;
    comAdditionalParams: string;
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
    keeper: string;
    firstAssetOracleData: string;
    thirdAssetOracleData: string;
    depositSoldAssetOracleData: string;
    nativePmxOracleData: string;
    positionNativeAssetOracleData: string;
    nativePositionAssetOracleData: string;
    pmxPositionAssetOracleData: string;
    positionUsdOracleData: string;
    nativeSoldAssetOracleData: string;
    pullOracleData: string[][];
    pullOracleTypes: bigint[];
    borrowedAmount: bigint;
  };

  export type UpdateLimitOrderParamsStruct = {
    orderId: BigNumberish;
    depositAmount: BigNumberish;
    leverage: BigNumberish;
    isProtocolFeeInPmx: boolean;
    takeDepositFromWallet: boolean;
    nativeDepositOracleData: BytesLike;
    pullOracleData: BytesLike[][];
    pullOracleTypes: BigNumberish[];
  };

  export type UpdateLimitOrderParamsStructOutput = [
    orderId: bigint,
    depositAmount: bigint,
    leverage: bigint,
    isProtocolFeeInPmx: boolean,
    takeDepositFromWallet: boolean,
    nativeDepositOracleData: string,
    pullOracleData: string[][],
    pullOracleTypes: bigint[]
  ] & {
    orderId: bigint;
    depositAmount: bigint;
    leverage: bigint;
    isProtocolFeeInPmx: boolean;
    takeDepositFromWallet: boolean;
    nativeDepositOracleData: string;
    pullOracleData: string[][];
    pullOracleTypes: bigint[];
  };
}

export declare namespace PrimexPricingLibrary {
  export type PathStruct = {
    dexName: string;
    shares: BigNumberish;
    payload: BytesLike;
  };

  export type PathStructOutput = [
    dexName: string,
    shares: bigint,
    payload: string
  ] & { dexName: string; shares: bigint; payload: string };

  export type RouteStruct = {
    to: AddressLike;
    paths: PrimexPricingLibrary.PathStruct[];
  };

  export type RouteStructOutput = [
    to: string,
    paths: PrimexPricingLibrary.PathStructOutput[]
  ] & { to: string; paths: PrimexPricingLibrary.PathStructOutput[] };

  export type MegaRouteStruct = {
    shares: BigNumberish;
    routes: PrimexPricingLibrary.RouteStruct[];
  };

  export type MegaRouteStructOutput = [
    shares: bigint,
    routes: PrimexPricingLibrary.RouteStructOutput[]
  ] & { shares: bigint; routes: PrimexPricingLibrary.RouteStructOutput[] };
}

export declare namespace ILimitOrderManager {
  export type UpdateOrderConditionsParamsStruct = {
    orderId: BigNumberish;
    openConditions: LimitOrderLibrary.ConditionStruct[];
    closeConditions: LimitOrderLibrary.ConditionStruct[];
  };

  export type UpdateOrderConditionsParamsStructOutput = [
    orderId: bigint,
    openConditions: LimitOrderLibrary.ConditionStructOutput[],
    closeConditions: LimitOrderLibrary.ConditionStructOutput[]
  ] & {
    orderId: bigint;
    openConditions: LimitOrderLibrary.ConditionStructOutput[];
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
  };
}

export interface LimitOrderManagerV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "bucketOrderIds"
      | "bucketOrderIndexes"
      | "cancelExpiredLimitOrders"
      | "cancelLimitOrder"
      | "closeConditions"
      | "createLimitOrder"
      | "getBucketOrders"
      | "getBucketOrdersLength"
      | "getCloseConditions"
      | "getOpenConditions"
      | "getOrder"
      | "getOrderByIndex"
      | "getOrdersLength"
      | "getTraderOrders"
      | "getTraderOrdersLength"
      | "initialize"
      | "openConditions"
      | "openPositionByOrder"
      | "orderIndexes"
      | "ordersId"
      | "pause"
      | "paused"
      | "pm"
      | "primexDNS"
      | "registry"
      | "setSwapManager"
      | "setValue"
      | "supportsInterface"
      | "swapManager"
      | "testUpgrade"
      | "traderBalanceVault"
      | "traderOrderIds"
      | "traderOrderIndexes"
      | "unpause"
      | "updateOrder"
      | "updateOrderConditions"
      | "value"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeSwapManager"
      | "CloseLimitOrder"
      | "CreateLimitOrder"
      | "Initialized"
      | "Paused"
      | "Unpaused"
      | "UpdateOrder"
      | "UpdateOrderConditions"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bucketOrderIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketOrderIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExpiredLimitOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeConditions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLimitOrder",
    values: [LimitOrderLibrary.CreateLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketOrders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketOrdersLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloseConditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenConditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderOrders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderOrdersLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openConditions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionByOrder",
    values: [LimitOrderLibrary.OpenPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ordersId", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pm", values?: undefined): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSwapManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderBalanceVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderOrderIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "traderOrderIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [LimitOrderLibrary.UpdateLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderConditions",
    values: [ILimitOrderManager.UpdateOrderConditionsParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bucketOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketOrderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExpiredLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloseConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ordersId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderBalanceVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderOrderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
}

export namespace ChangeSwapManagerEvent {
  export type InputTuple = [swapManager: AddressLike];
  export type OutputTuple = [swapManager: string];
  export interface OutputObject {
    swapManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseLimitOrderEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    trader: AddressLike,
    closedBy: AddressLike,
    reason: BigNumberish,
    positionId: BigNumberish,
    bucket: string,
    borrowedAsset: AddressLike,
    positionAsset: AddressLike,
    leverage: BigNumberish,
    depositAsset: AddressLike,
    depositAmount: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    trader: string,
    closedBy: string,
    reason: bigint,
    positionId: bigint,
    bucket: string,
    borrowedAsset: string,
    positionAsset: string,
    leverage: bigint,
    depositAsset: string,
    depositAmount: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    trader: string;
    closedBy: string;
    reason: bigint;
    positionId: bigint;
    bucket: string;
    borrowedAsset: string;
    positionAsset: string;
    leverage: bigint;
    depositAsset: string;
    depositAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateLimitOrderEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    trader: AddressLike,
    order: LimitOrderLibrary.LimitOrderStruct,
    openConditions: LimitOrderLibrary.ConditionStruct[],
    closeConditions: LimitOrderLibrary.ConditionStruct[]
  ];
  export type OutputTuple = [
    orderId: bigint,
    trader: string,
    order: LimitOrderLibrary.LimitOrderStructOutput,
    openConditions: LimitOrderLibrary.ConditionStructOutput[],
    closeConditions: LimitOrderLibrary.ConditionStructOutput[]
  ];
  export interface OutputObject {
    orderId: bigint;
    trader: string;
    order: LimitOrderLibrary.LimitOrderStructOutput;
    openConditions: LimitOrderLibrary.ConditionStructOutput[];
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateOrderEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    trader: AddressLike,
    depositAmount: BigNumberish,
    leverage: BigNumberish,
    feeToken: AddressLike
  ];
  export type OutputTuple = [
    orderId: bigint,
    trader: string,
    depositAmount: bigint,
    leverage: bigint,
    feeToken: string
  ];
  export interface OutputObject {
    orderId: bigint;
    trader: string;
    depositAmount: bigint;
    leverage: bigint;
    feeToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateOrderConditionsEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    trader: AddressLike,
    openConditions: LimitOrderLibrary.ConditionStruct[],
    closeConditions: LimitOrderLibrary.ConditionStruct[]
  ];
  export type OutputTuple = [
    orderId: bigint,
    trader: string,
    openConditions: LimitOrderLibrary.ConditionStructOutput[],
    closeConditions: LimitOrderLibrary.ConditionStructOutput[]
  ];
  export interface OutputObject {
    orderId: bigint;
    trader: string;
    openConditions: LimitOrderLibrary.ConditionStructOutput[];
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LimitOrderManagerV2 extends BaseContract {
  connect(runner?: ContractRunner | null): LimitOrderManagerV2;
  waitForDeployment(): Promise<this>;

  interface: LimitOrderManagerV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bucketOrderIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  bucketOrderIndexes: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  cancelExpiredLimitOrders: TypedContractMethod<
    [_orderIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  cancelLimitOrder: TypedContractMethod<
    [_orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeConditions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, string] & { managerType: bigint; params: string }],
    "view"
  >;

  createLimitOrder: TypedContractMethod<
    [_params: LimitOrderLibrary.CreateLimitOrderParamsStruct],
    [void],
    "payable"
  >;

  getBucketOrders: TypedContractMethod<
    [_bucket: AddressLike],
    [LimitOrderLibrary.LimitOrderStructOutput[]],
    "view"
  >;

  getBucketOrdersLength: TypedContractMethod<
    [_bucket: AddressLike],
    [bigint],
    "view"
  >;

  getCloseConditions: TypedContractMethod<
    [_orderId: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput[]],
    "view"
  >;

  getOpenConditions: TypedContractMethod<
    [_orderId: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput[]],
    "view"
  >;

  getOrder: TypedContractMethod<
    [_id: BigNumberish],
    [LimitOrderLibrary.LimitOrderStructOutput],
    "view"
  >;

  getOrderByIndex: TypedContractMethod<
    [_index: BigNumberish],
    [LimitOrderLibrary.LimitOrderStructOutput],
    "view"
  >;

  getOrdersLength: TypedContractMethod<[], [bigint], "view">;

  getTraderOrders: TypedContractMethod<
    [_trader: AddressLike],
    [LimitOrderLibrary.LimitOrderStructOutput[]],
    "view"
  >;

  getTraderOrdersLength: TypedContractMethod<
    [_trader: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _registry: AddressLike,
      _primexDNS: AddressLike,
      _pm: AddressLike,
      _traderBalanceVault: AddressLike,
      _swapManager: AddressLike,
      _whiteBlackList: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  openConditions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, string] & { managerType: bigint; params: string }],
    "view"
  >;

  openPositionByOrder: TypedContractMethod<
    [_params: LimitOrderLibrary.OpenPositionParamsStruct],
    [void],
    "payable"
  >;

  orderIndexes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  ordersId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pm: TypedContractMethod<[], [string], "view">;

  primexDNS: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  setSwapManager: TypedContractMethod<
    [_swapManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setValue: TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapManager: TypedContractMethod<[], [string], "view">;

  testUpgrade: TypedContractMethod<[], [string], "view">;

  traderBalanceVault: TypedContractMethod<[], [string], "view">;

  traderOrderIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  traderOrderIndexes: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateOrder: TypedContractMethod<
    [_params: LimitOrderLibrary.UpdateLimitOrderParamsStruct],
    [void],
    "payable"
  >;

  updateOrderConditions: TypedContractMethod<
    [_params: ILimitOrderManager.UpdateOrderConditionsParamsStruct],
    [void],
    "nonpayable"
  >;

  value: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bucketOrderIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bucketOrderIndexes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelExpiredLimitOrders"
  ): TypedContractMethod<[_orderIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelLimitOrder"
  ): TypedContractMethod<[_orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeConditions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, string] & { managerType: bigint; params: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createLimitOrder"
  ): TypedContractMethod<
    [_params: LimitOrderLibrary.CreateLimitOrderParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBucketOrders"
  ): TypedContractMethod<
    [_bucket: AddressLike],
    [LimitOrderLibrary.LimitOrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBucketOrdersLength"
  ): TypedContractMethod<[_bucket: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCloseConditions"
  ): TypedContractMethod<
    [_orderId: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOpenConditions"
  ): TypedContractMethod<
    [_orderId: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [LimitOrderLibrary.LimitOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderByIndex"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [LimitOrderLibrary.LimitOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrdersLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTraderOrders"
  ): TypedContractMethod<
    [_trader: AddressLike],
    [LimitOrderLibrary.LimitOrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTraderOrdersLength"
  ): TypedContractMethod<[_trader: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _registry: AddressLike,
      _primexDNS: AddressLike,
      _pm: AddressLike,
      _traderBalanceVault: AddressLike,
      _swapManager: AddressLike,
      _whiteBlackList: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openConditions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, string] & { managerType: bigint; params: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "openPositionByOrder"
  ): TypedContractMethod<
    [_params: LimitOrderLibrary.OpenPositionParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "orderIndexes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ordersId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(nameOrSignature: "pm"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primexDNS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setSwapManager"
  ): TypedContractMethod<[_swapManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setValue"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "testUpgrade"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "traderBalanceVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "traderOrderIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "traderOrderIndexes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOrder"
  ): TypedContractMethod<
    [_params: LimitOrderLibrary.UpdateLimitOrderParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateOrderConditions"
  ): TypedContractMethod<
    [_params: ILimitOrderManager.UpdateOrderConditionsParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "value"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ChangeSwapManager"
  ): TypedContractEvent<
    ChangeSwapManagerEvent.InputTuple,
    ChangeSwapManagerEvent.OutputTuple,
    ChangeSwapManagerEvent.OutputObject
  >;
  getEvent(
    key: "CloseLimitOrder"
  ): TypedContractEvent<
    CloseLimitOrderEvent.InputTuple,
    CloseLimitOrderEvent.OutputTuple,
    CloseLimitOrderEvent.OutputObject
  >;
  getEvent(
    key: "CreateLimitOrder"
  ): TypedContractEvent<
    CreateLimitOrderEvent.InputTuple,
    CreateLimitOrderEvent.OutputTuple,
    CreateLimitOrderEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateOrder"
  ): TypedContractEvent<
    UpdateOrderEvent.InputTuple,
    UpdateOrderEvent.OutputTuple,
    UpdateOrderEvent.OutputObject
  >;
  getEvent(
    key: "UpdateOrderConditions"
  ): TypedContractEvent<
    UpdateOrderConditionsEvent.InputTuple,
    UpdateOrderConditionsEvent.OutputTuple,
    UpdateOrderConditionsEvent.OutputObject
  >;

  filters: {
    "ChangeSwapManager(address)": TypedContractEvent<
      ChangeSwapManagerEvent.InputTuple,
      ChangeSwapManagerEvent.OutputTuple,
      ChangeSwapManagerEvent.OutputObject
    >;
    ChangeSwapManager: TypedContractEvent<
      ChangeSwapManagerEvent.InputTuple,
      ChangeSwapManagerEvent.OutputTuple,
      ChangeSwapManagerEvent.OutputObject
    >;

    "CloseLimitOrder(uint256,address,address,uint8,uint256,string,address,address,uint256,address,uint256)": TypedContractEvent<
      CloseLimitOrderEvent.InputTuple,
      CloseLimitOrderEvent.OutputTuple,
      CloseLimitOrderEvent.OutputObject
    >;
    CloseLimitOrder: TypedContractEvent<
      CloseLimitOrderEvent.InputTuple,
      CloseLimitOrderEvent.OutputTuple,
      CloseLimitOrderEvent.OutputObject
    >;

    "CreateLimitOrder(uint256,address,tuple,tuple[],tuple[])": TypedContractEvent<
      CreateLimitOrderEvent.InputTuple,
      CreateLimitOrderEvent.OutputTuple,
      CreateLimitOrderEvent.OutputObject
    >;
    CreateLimitOrder: TypedContractEvent<
      CreateLimitOrderEvent.InputTuple,
      CreateLimitOrderEvent.OutputTuple,
      CreateLimitOrderEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdateOrder(uint256,address,uint256,uint256,address)": TypedContractEvent<
      UpdateOrderEvent.InputTuple,
      UpdateOrderEvent.OutputTuple,
      UpdateOrderEvent.OutputObject
    >;
    UpdateOrder: TypedContractEvent<
      UpdateOrderEvent.InputTuple,
      UpdateOrderEvent.OutputTuple,
      UpdateOrderEvent.OutputObject
    >;

    "UpdateOrderConditions(uint256,address,tuple[],tuple[])": TypedContractEvent<
      UpdateOrderConditionsEvent.InputTuple,
      UpdateOrderConditionsEvent.OutputTuple,
      UpdateOrderConditionsEvent.OutputObject
    >;
    UpdateOrderConditions: TypedContractEvent<
      UpdateOrderConditionsEvent.InputTuple,
      UpdateOrderConditionsEvent.OutputTuple,
      UpdateOrderConditionsEvent.OutputObject
    >;
  };
}
