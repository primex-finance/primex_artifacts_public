/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ITraderBalanceVault {
  export type BatchTopUpAvailableBalanceParamsStruct = {
    traders: AddressLike[];
    amounts: BigNumberish[];
    asset: AddressLike;
    length: BigNumberish;
  };

  export type BatchTopUpAvailableBalanceParamsStructOutput = [
    traders: string[],
    amounts: bigint[],
    asset: string,
    length: bigint
  ] & { traders: string[]; amounts: bigint[]; asset: string; length: bigint };

  export type UnlockAssetParamsStruct = {
    trader: AddressLike;
    receiver: AddressLike;
    asset: AddressLike;
    amount: BigNumberish;
  };

  export type UnlockAssetParamsStructOutput = [
    trader: string,
    receiver: string,
    asset: string,
    amount: bigint
  ] & { trader: string; receiver: string; asset: string; amount: bigint };

  export type LockAssetParamsStruct = {
    trader: AddressLike;
    depositReceiver: AddressLike;
    depositAsset: AddressLike;
    depositAmount: BigNumberish;
    openType: BigNumberish;
  };

  export type LockAssetParamsStructOutput = [
    trader: string,
    depositReceiver: string,
    depositAsset: string,
    depositAmount: bigint,
    openType: bigint
  ] & {
    trader: string;
    depositReceiver: string;
    depositAsset: string;
    depositAmount: bigint;
    openType: bigint;
  };
}

export interface TraderBalanceVaultV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "balances"
      | "batchTopUpAvailableBalance"
      | "deposit"
      | "getBalancesForAddresses"
      | "increaseLockedBalance"
      | "initialize"
      | "pause"
      | "paused"
      | "registry"
      | "setValue"
      | "supportsInterface"
      | "testUpgrade"
      | "topUpAvailableBalance"
      | "unlockAsset"
      | "unpause"
      | "useTraderAssets"
      | "value"
      | "withdraw"
      | "withdrawFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Initialized"
      | "Paused"
      | "Unpaused"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTopUpAvailableBalance",
    values: [ITraderBalanceVault.BatchTopUpAvailableBalanceParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancesForAddresses",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockedBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topUpAvailableBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAsset",
    values: [ITraderBalanceVault.UnlockAssetParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "useTraderAssets",
    values: [ITraderBalanceVault.LockAssetParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrom",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTopUpAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalancesForAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useTraderAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrom",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositer: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [depositer: string, asset: string, amount: bigint];
  export interface OutputObject {
    depositer: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    withdrawer: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [withdrawer: string, asset: string, amount: bigint];
  export interface OutputObject {
    withdrawer: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TraderBalanceVaultV2 extends BaseContract {
  connect(runner?: ContractRunner | null): TraderBalanceVaultV2;
  waitForDeployment(): Promise<this>;

  interface: TraderBalanceVaultV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balances: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { availableBalance: bigint; lockedBalance: bigint }],
    "view"
  >;

  batchTopUpAvailableBalance: TypedContractMethod<
    [_params: ITraderBalanceVault.BatchTopUpAvailableBalanceParamsStruct],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [_asset: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  getBalancesForAddresses: TypedContractMethod<
    [_traders: AddressLike[], _asset: AddressLike],
    [[bigint[], bigint[]]],
    "view"
  >;

  increaseLockedBalance: TypedContractMethod<
    [_trader: AddressLike, _asset: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  initialize: TypedContractMethod<
    [_registry: AddressLike, _whiteBlackList: AddressLike],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  setValue: TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  testUpgrade: TypedContractMethod<[], [string], "view">;

  topUpAvailableBalance: TypedContractMethod<
    [receiver: AddressLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  unlockAsset: TypedContractMethod<
    [_params: ITraderBalanceVault.UnlockAssetParamsStruct],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  useTraderAssets: TypedContractMethod<
    [_params: ITraderBalanceVault.LockAssetParamsStruct],
    [void],
    "nonpayable"
  >;

  value: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [_asset: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFrom: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _asset: AddressLike,
      _amount: BigNumberish,
      fromLocked: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { availableBalance: bigint; lockedBalance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchTopUpAvailableBalance"
  ): TypedContractMethod<
    [_params: ITraderBalanceVault.BatchTopUpAvailableBalanceParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_asset: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBalancesForAddresses"
  ): TypedContractMethod<
    [_traders: AddressLike[], _asset: AddressLike],
    [[bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseLockedBalance"
  ): TypedContractMethod<
    [_trader: AddressLike, _asset: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_registry: AddressLike, _whiteBlackList: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setValue"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "testUpgrade"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "topUpAvailableBalance"
  ): TypedContractMethod<
    [receiver: AddressLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unlockAsset"
  ): TypedContractMethod<
    [_params: ITraderBalanceVault.UnlockAssetParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "useTraderAssets"
  ): TypedContractMethod<
    [_params: ITraderBalanceVault.LockAssetParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "value"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_asset: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFrom"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _asset: AddressLike,
      _amount: BigNumberish,
      fromLocked: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
