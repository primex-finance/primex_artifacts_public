/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ArbGasInfoMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getL1BaseFeeEstimate"
      | "getPricesInWei"
      | "l1GasPrice"
      | "setL1BaseFeeEstimate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getL1BaseFeeEstimate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricesInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1GasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setL1BaseFeeEstimate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getL1BaseFeeEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricesInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1GasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setL1BaseFeeEstimate",
    data: BytesLike
  ): Result;
}

export interface ArbGasInfoMock extends BaseContract {
  connect(runner?: ContractRunner | null): ArbGasInfoMock;
  waitForDeployment(): Promise<this>;

  interface: ArbGasInfoMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getL1BaseFeeEstimate: TypedContractMethod<[], [bigint], "view">;

  getPricesInWei: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  l1GasPrice: TypedContractMethod<[], [bigint], "view">;

  setL1BaseFeeEstimate: TypedContractMethod<
    [_newL1GasPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getL1BaseFeeEstimate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPricesInWei"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "l1GasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setL1BaseFeeEstimate"
  ): TypedContractMethod<[_newL1GasPrice: BigNumberish], [void], "nonpayable">;

  filters: {};
}
