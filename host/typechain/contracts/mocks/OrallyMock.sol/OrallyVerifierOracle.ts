/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace OrallyStructs {
  export type PriceFeedStruct = {
    pairId: string;
    price: BigNumberish;
    decimals: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PriceFeedStructOutput = [
    pairId: string,
    price: bigint,
    decimals: bigint,
    timestamp: bigint
  ] & { pairId: string; price: bigint; decimals: bigint; timestamp: bigint };
}

export interface OrallyVerifierOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "customNumbers"
      | "customStrings"
      | "getPriceFeed"
      | "priceFeeds"
      | "reporters"
      | "updatePriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "customNumbers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "customStrings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "priceFeeds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reporters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "customNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customStrings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reporters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
}

export interface OrallyVerifierOracle extends BaseContract {
  connect(runner?: ContractRunner | null): OrallyVerifierOracle;
  waitForDeployment(): Promise<this>;

  interface: OrallyVerifierOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  customNumbers: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint] & {
        feedId: string;
        value: bigint;
        decimals: bigint;
      }
    ],
    "view"
  >;

  customStrings: TypedContractMethod<
    [arg0: string],
    [[string, string] & { feedId: string; value: string }],
    "view"
  >;

  getPriceFeed: TypedContractMethod<
    [_pairId: string],
    [OrallyStructs.PriceFeedStructOutput],
    "view"
  >;

  priceFeeds: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        pairId: string;
        price: bigint;
        decimals: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  reporters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  updatePriceFeed: TypedContractMethod<
    [_data: BytesLike],
    [OrallyStructs.PriceFeedStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "customNumbers"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint] & {
        feedId: string;
        value: bigint;
        decimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "customStrings"
  ): TypedContractMethod<
    [arg0: string],
    [[string, string] & { feedId: string; value: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceFeed"
  ): TypedContractMethod<
    [_pairId: string],
    [OrallyStructs.PriceFeedStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        pairId: string;
        price: bigint;
        decimals: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reporters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<
    [_data: BytesLike],
    [OrallyStructs.PriceFeedStructOutput],
    "nonpayable"
  >;

  filters: {};
}
