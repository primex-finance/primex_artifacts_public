/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFeeExecutorStorage {
  export type ActivatedBonusStruct = {
    nftId: BigNumberish;
    bucket: AddressLike;
    percent: BigNumberish;
    maxAmount: BigNumberish;
    accumulatedAmount: BigNumberish;
    lastUpdatedIndex: BigNumberish;
    deadline: BigNumberish;
    claimedAmount: BigNumberish;
  };

  export type ActivatedBonusStructOutput = [
    nftId: bigint,
    bucket: string,
    percent: bigint,
    maxAmount: bigint,
    accumulatedAmount: bigint,
    lastUpdatedIndex: bigint,
    deadline: bigint,
    claimedAmount: bigint
  ] & {
    nftId: bigint;
    bucket: string;
    percent: bigint;
    maxAmount: bigint;
    accumulatedAmount: bigint;
    lastUpdatedIndex: bigint;
    deadline: bigint;
    claimedAmount: bigint;
  };

  export type NFTBonusParamsStruct = {
    percent: BigNumberish;
    maxAmount: BigNumberish;
    duration: BigNumberish;
  };

  export type NFTBonusParamsStructOutput = [
    percent: bigint,
    maxAmount: bigint,
    duration: bigint
  ] & { percent: bigint; maxAmount: bigint; duration: bigint };
}

export interface IFeeExecutorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAccumulatedAmount"
      | "getAvailableAmount"
      | "getBonus"
      | "setTierBonus"
      | "updateBonus(uint256)"
      | "updateBonus(address,uint256,address,uint256)"
      | "updateBonuses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccumulatedAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierBonus",
    values: [
      AddressLike,
      BigNumberish[],
      IFeeExecutorStorage.NFTBonusParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBonus(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBonus(address,uint256,address,uint256)",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBonuses",
    values: [AddressLike[], BigNumberish[], AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccumulatedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTierBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBonus(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBonus(address,uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBonuses",
    data: BytesLike
  ): Result;
}

export interface IFeeExecutor extends BaseContract {
  connect(runner?: ContractRunner | null): IFeeExecutor;
  waitForDeployment(): Promise<this>;

  interface: IFeeExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAccumulatedAmount: TypedContractMethod<
    [_user: AddressLike, _nftId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getAvailableAmount: TypedContractMethod<
    [_user: AddressLike, _nftId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getBonus: TypedContractMethod<
    [_user: AddressLike, _nftId: BigNumberish],
    [IFeeExecutorStorage.ActivatedBonusStructOutput],
    "view"
  >;

  setTierBonus: TypedContractMethod<
    [
      _bucket: AddressLike,
      _tiers: BigNumberish[],
      _bonuses: IFeeExecutorStorage.NFTBonusParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;

  "updateBonus(uint256)": TypedContractMethod<
    [_nftId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "updateBonus(address,uint256,address,uint256)": TypedContractMethod<
    [
      _user: AddressLike,
      _oldScaledBalance: BigNumberish,
      _bucket: AddressLike,
      _currentIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateBonuses: TypedContractMethod<
    [
      _users: AddressLike[],
      _oldBalances: BigNumberish[],
      _bucket: AddressLike,
      _currentIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAccumulatedAmount"
  ): TypedContractMethod<
    [_user: AddressLike, _nftId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableAmount"
  ): TypedContractMethod<
    [_user: AddressLike, _nftId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBonus"
  ): TypedContractMethod<
    [_user: AddressLike, _nftId: BigNumberish],
    [IFeeExecutorStorage.ActivatedBonusStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setTierBonus"
  ): TypedContractMethod<
    [
      _bucket: AddressLike,
      _tiers: BigNumberish[],
      _bonuses: IFeeExecutorStorage.NFTBonusParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBonus(uint256)"
  ): TypedContractMethod<[_nftId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBonus(address,uint256,address,uint256)"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _oldScaledBalance: BigNumberish,
      _bucket: AddressLike,
      _currentIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBonuses"
  ): TypedContractMethod<
    [
      _users: AddressLike[],
      _oldBalances: BigNumberish[],
      _bucket: AddressLike,
      _currentIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
