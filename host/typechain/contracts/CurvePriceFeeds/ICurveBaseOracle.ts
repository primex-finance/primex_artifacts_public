/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICurveBaseOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAddressProvider"
      | "getPoolInfo"
      | "getPrice"
      | "initialize"
      | "primexPriceOracle"
      | "primexRegistry"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RegisterLpToken"): EventFragment;

  encodeFunctionData(
    functionFragment: "getAddressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "primexPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primexRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primexPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primexRegistry",
    data: BytesLike
  ): Result;
}

export namespace RegisterLpTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICurveBaseOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ICurveBaseOracle;
  waitForDeployment(): Promise<this>;

  interface: ICurveBaseOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAddressProvider: TypedContractMethod<[], [string], "view">;

  getPoolInfo: TypedContractMethod<
    [crvLp: AddressLike],
    [
      [string, string[], bigint] & {
        pool: string;
        coins: string[];
        virtualPrice: bigint;
      }
    ],
    "nonpayable"
  >;

  getPrice: TypedContractMethod<
    [token: AddressLike, tokensUsdOracleData: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _addressProvider: AddressLike,
      _primexPriceOracle: AddressLike,
      _primexRegistry: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  primexPriceOracle: TypedContractMethod<[], [string], "view">;

  primexRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAddressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<
    [crvLp: AddressLike],
    [
      [string, string[], bigint] & {
        pool: string;
        coins: string[];
        virtualPrice: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [token: AddressLike, tokensUsdOracleData: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _addressProvider: AddressLike,
      _primexPriceOracle: AddressLike,
      _primexRegistry: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "primexPriceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primexRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "RegisterLpToken"
  ): TypedContractEvent<
    RegisterLpTokenEvent.InputTuple,
    RegisterLpTokenEvent.OutputTuple,
    RegisterLpTokenEvent.OutputObject
  >;

  filters: {
    "RegisterLpToken(address)": TypedContractEvent<
      RegisterLpTokenEvent.InputTuple,
      RegisterLpTokenEvent.OutputTuple,
      RegisterLpTokenEvent.OutputObject
    >;
    RegisterLpToken: TypedContractEvent<
      RegisterLpTokenEvent.InputTuple,
      RegisterLpTokenEvent.OutputTuple,
      RegisterLpTokenEvent.OutputObject
    >;
  };
}
