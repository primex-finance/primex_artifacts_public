/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CurveBaseOracle {
  export type TokenInfoStruct = {
    pool: AddressLike;
    tokens: AddressLike[];
    registryIndex: BigNumberish;
  };

  export type TokenInfoStructOutput = [
    pool: string,
    tokens: string[],
    registryIndex: bigint
  ] & { pool: string; tokens: string[]; registryIndex: bigint };
}

export interface CurveVolatileOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAddressProvider"
      | "getLowerBound"
      | "getPoolInfo"
      | "getPrice"
      | "getTokenInfo"
      | "initialize"
      | "primexPriceOracle"
      | "primexRegistry"
      | "registerCurveLp"
      | "setLimiter"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "NewLimiterParams"
      | "RegisterLpToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAddressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLowerBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "primexPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primexRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerCurveLp",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimiter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primexPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primexRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCurveLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLimiter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewLimiterParamsEvent {
  export type InputTuple = [lowerBound: BigNumberish, upperBound: BigNumberish];
  export type OutputTuple = [lowerBound: bigint, upperBound: bigint];
  export interface OutputObject {
    lowerBound: bigint;
    upperBound: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterLpTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CurveVolatileOracle extends BaseContract {
  connect(runner?: ContractRunner | null): CurveVolatileOracle;
  waitForDeployment(): Promise<this>;

  interface: CurveVolatileOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAddressProvider: TypedContractMethod<[], [string], "view">;

  getLowerBound: TypedContractMethod<[], [bigint], "view">;

  getPoolInfo: TypedContractMethod<
    [crvLp: AddressLike],
    [
      [string, string[], bigint] & {
        pool: string;
        coins: string[];
        virtualPrice: bigint;
      }
    ],
    "view"
  >;

  getPrice: TypedContractMethod<
    [crvLp: AddressLike, tokensUsdOracleData: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  getTokenInfo: TypedContractMethod<
    [crvLp: AddressLike],
    [CurveBaseOracle.TokenInfoStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _addressProvider: AddressLike,
      _primexPriceOracle: AddressLike,
      _primexRegistry: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  primexPriceOracle: TypedContractMethod<[], [string], "view">;

  primexRegistry: TypedContractMethod<[], [string], "view">;

  registerCurveLp: TypedContractMethod<
    [crvLp: AddressLike, registry: AddressLike, registryIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLimiter: TypedContractMethod<
    [crvLp: AddressLike, lowerBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAddressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLowerBound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<
    [crvLp: AddressLike],
    [
      [string, string[], bigint] & {
        pool: string;
        coins: string[];
        virtualPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [crvLp: AddressLike, tokensUsdOracleData: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [crvLp: AddressLike],
    [CurveBaseOracle.TokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _addressProvider: AddressLike,
      _primexPriceOracle: AddressLike,
      _primexRegistry: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "primexPriceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primexRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerCurveLp"
  ): TypedContractMethod<
    [crvLp: AddressLike, registry: AddressLike, registryIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLimiter"
  ): TypedContractMethod<
    [crvLp: AddressLike, lowerBound: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewLimiterParams"
  ): TypedContractEvent<
    NewLimiterParamsEvent.InputTuple,
    NewLimiterParamsEvent.OutputTuple,
    NewLimiterParamsEvent.OutputObject
  >;
  getEvent(
    key: "RegisterLpToken"
  ): TypedContractEvent<
    RegisterLpTokenEvent.InputTuple,
    RegisterLpTokenEvent.OutputTuple,
    RegisterLpTokenEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewLimiterParams(uint256,uint256)": TypedContractEvent<
      NewLimiterParamsEvent.InputTuple,
      NewLimiterParamsEvent.OutputTuple,
      NewLimiterParamsEvent.OutputObject
    >;
    NewLimiterParams: TypedContractEvent<
      NewLimiterParamsEvent.InputTuple,
      NewLimiterParamsEvent.OutputTuple,
      NewLimiterParamsEvent.OutputObject
    >;

    "RegisterLpToken(address)": TypedContractEvent<
      RegisterLpTokenEvent.InputTuple,
      RegisterLpTokenEvent.OutputTuple,
      RegisterLpTokenEvent.OutputObject
    >;
    RegisterLpToken: TypedContractEvent<
      RegisterLpTokenEvent.InputTuple,
      RegisterLpTokenEvent.OutputTuple,
      RegisterLpTokenEvent.OutputObject
    >;
  };
}
