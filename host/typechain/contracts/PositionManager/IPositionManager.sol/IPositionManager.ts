/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace PositionLibrary {
  export type PositionStruct = {
    id: BigNumberish;
    scaledDebtAmount: BigNumberish;
    bucket: AddressLike;
    soldAsset: AddressLike;
    depositAmountInSoldAsset: BigNumberish;
    positionAsset: AddressLike;
    positionAmount: BigNumberish;
    trader: AddressLike;
    openBorrowIndex: BigNumberish;
    createdAt: BigNumberish;
    updatedConditionsAt: BigNumberish;
    extraParams: BytesLike;
  };

  export type PositionStructOutput = [
    id: bigint,
    scaledDebtAmount: bigint,
    bucket: string,
    soldAsset: string,
    depositAmountInSoldAsset: bigint,
    positionAsset: string,
    positionAmount: bigint,
    trader: string,
    openBorrowIndex: bigint,
    createdAt: bigint,
    updatedConditionsAt: bigint,
    extraParams: string
  ] & {
    id: bigint;
    scaledDebtAmount: bigint;
    bucket: string;
    soldAsset: string;
    depositAmountInSoldAsset: bigint;
    positionAsset: string;
    positionAmount: bigint;
    trader: string;
    openBorrowIndex: bigint;
    createdAt: bigint;
    updatedConditionsAt: bigint;
    extraParams: string;
  };

  export type OpenPositionMarginParamsStruct = {
    bucket: string;
    borrowedAmount: BigNumberish;
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
  };

  export type OpenPositionMarginParamsStructOutput = [
    bucket: string,
    borrowedAmount: bigint,
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[]
  ] & {
    bucket: string;
    borrowedAmount: bigint;
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
  };

  export type OpenPositionParamsStruct = {
    marginParams: PositionLibrary.OpenPositionMarginParamsStruct;
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
    depositAsset: AddressLike;
    depositAmount: BigNumberish;
    positionAsset: AddressLike;
    amountOutMin: BigNumberish;
    deadline: BigNumberish;
    takeDepositFromWallet: boolean;
    isProtocolFeeInPmx: boolean;
    closeConditions: LimitOrderLibrary.ConditionStruct[];
    firstAssetOracleData: BytesLike;
    thirdAssetOracleData: BytesLike;
    depositSoldAssetOracleData: BytesLike;
    positionUsdOracleData: BytesLike;
    nativePositionAssetOracleData: BytesLike;
    pmxPositionAssetOracleData: BytesLike;
    nativeSoldAssetOracleData: BytesLike;
    pullOracleData: BytesLike[][];
    pullOracleTypes: BigNumberish[];
  };

  export type OpenPositionParamsStructOutput = [
    marginParams: PositionLibrary.OpenPositionMarginParamsStructOutput,
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[],
    depositAsset: string,
    depositAmount: bigint,
    positionAsset: string,
    amountOutMin: bigint,
    deadline: bigint,
    takeDepositFromWallet: boolean,
    isProtocolFeeInPmx: boolean,
    closeConditions: LimitOrderLibrary.ConditionStructOutput[],
    firstAssetOracleData: string,
    thirdAssetOracleData: string,
    depositSoldAssetOracleData: string,
    positionUsdOracleData: string,
    nativePositionAssetOracleData: string,
    pmxPositionAssetOracleData: string,
    nativeSoldAssetOracleData: string,
    pullOracleData: string[][],
    pullOracleTypes: bigint[]
  ] & {
    marginParams: PositionLibrary.OpenPositionMarginParamsStructOutput;
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
    depositAsset: string;
    depositAmount: bigint;
    positionAsset: string;
    amountOutMin: bigint;
    deadline: bigint;
    takeDepositFromWallet: boolean;
    isProtocolFeeInPmx: boolean;
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
    firstAssetOracleData: string;
    thirdAssetOracleData: string;
    depositSoldAssetOracleData: string;
    positionUsdOracleData: string;
    nativePositionAssetOracleData: string;
    pmxPositionAssetOracleData: string;
    nativeSoldAssetOracleData: string;
    pullOracleData: string[][];
    pullOracleTypes: bigint[];
  };
}

export declare namespace LimitOrderLibrary {
  export type ConditionStruct = {
    managerType: BigNumberish;
    params: BytesLike;
  };

  export type ConditionStructOutput = [managerType: bigint, params: string] & {
    managerType: bigint;
    params: string;
  };

  export type LimitOrderStruct = {
    bucket: AddressLike;
    positionAsset: AddressLike;
    depositAsset: AddressLike;
    depositAmount: BigNumberish;
    feeToken: AddressLike;
    protocolFee: BigNumberish;
    trader: AddressLike;
    deadline: BigNumberish;
    id: BigNumberish;
    leverage: BigNumberish;
    shouldOpenPosition: boolean;
    createdAt: BigNumberish;
    updatedConditionsAt: BigNumberish;
    extraParams: BytesLike;
  };

  export type LimitOrderStructOutput = [
    bucket: string,
    positionAsset: string,
    depositAsset: string,
    depositAmount: bigint,
    feeToken: string,
    protocolFee: bigint,
    trader: string,
    deadline: bigint,
    id: bigint,
    leverage: bigint,
    shouldOpenPosition: boolean,
    createdAt: bigint,
    updatedConditionsAt: bigint,
    extraParams: string
  ] & {
    bucket: string;
    positionAsset: string;
    depositAsset: string;
    depositAmount: bigint;
    feeToken: string;
    protocolFee: bigint;
    trader: string;
    deadline: bigint;
    id: bigint;
    leverage: bigint;
    shouldOpenPosition: boolean;
    createdAt: bigint;
    updatedConditionsAt: bigint;
    extraParams: string;
  };

  export type OpenPositionByOrderParamsStruct = {
    sender: AddressLike;
    order: LimitOrderLibrary.LimitOrderStruct;
    closeConditions: LimitOrderLibrary.ConditionStruct[];
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStruct[];
    firstAssetOracleData: BytesLike;
    thirdAssetOracleData: BytesLike;
    depositSoldAssetOracleData: BytesLike;
    positionUsdOracleData: BytesLike;
    nativePositionAssetOracleData: BytesLike;
    pmxPositionAssetOracleData: BytesLike;
    nativeSoldAssetOracleData: BytesLike;
    borrowedAmount: BigNumberish;
  };

  export type OpenPositionByOrderParamsStructOutput = [
    sender: string,
    order: LimitOrderLibrary.LimitOrderStructOutput,
    closeConditions: LimitOrderLibrary.ConditionStructOutput[],
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[],
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[],
    firstAssetOracleData: string,
    thirdAssetOracleData: string,
    depositSoldAssetOracleData: string,
    positionUsdOracleData: string,
    nativePositionAssetOracleData: string,
    pmxPositionAssetOracleData: string,
    nativeSoldAssetOracleData: string,
    borrowedAmount: bigint
  ] & {
    sender: string;
    order: LimitOrderLibrary.LimitOrderStructOutput;
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
    firstAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
    depositInThirdAssetMegaRoutes: PrimexPricingLibrary.MegaRouteStructOutput[];
    firstAssetOracleData: string;
    thirdAssetOracleData: string;
    depositSoldAssetOracleData: string;
    positionUsdOracleData: string;
    nativePositionAssetOracleData: string;
    pmxPositionAssetOracleData: string;
    nativeSoldAssetOracleData: string;
    borrowedAmount: bigint;
  };
}

export declare namespace PrimexPricingLibrary {
  export type PathStruct = {
    dexName: string;
    shares: BigNumberish;
    payload: BytesLike;
  };

  export type PathStructOutput = [
    dexName: string,
    shares: bigint,
    payload: string
  ] & { dexName: string; shares: bigint; payload: string };

  export type RouteStruct = {
    to: AddressLike;
    paths: PrimexPricingLibrary.PathStruct[];
  };

  export type RouteStructOutput = [
    to: string,
    paths: PrimexPricingLibrary.PathStructOutput[]
  ] & { to: string; paths: PrimexPricingLibrary.PathStructOutput[] };

  export type MegaRouteStruct = {
    shares: BigNumberish;
    routes: PrimexPricingLibrary.RouteStruct[];
  };

  export type MegaRouteStructOutput = [
    shares: bigint,
    routes: PrimexPricingLibrary.RouteStructOutput[]
  ] & { shares: bigint; routes: PrimexPricingLibrary.RouteStructOutput[] };
}

export interface IPositionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bucketPositionIds"
      | "closePosition"
      | "closePositionByCondition"
      | "decreaseDeposit"
      | "defaultOracleTolerableLimit"
      | "deletePositions"
      | "doTransferOut"
      | "getAllPositionsLength"
      | "getBucketPositionsLength"
      | "getCloseCondition"
      | "getCloseConditions"
      | "getOracleTolerableLimit"
      | "getPosition"
      | "getPositionByIndex"
      | "getPositionDebt"
      | "getTraderPositionsLength"
      | "increaseDeposit"
      | "initialize"
      | "isDelistedPosition"
      | "keeperRewardDistributor"
      | "maintenanceBuffer"
      | "maxPositionSize"
      | "minPositionAsset"
      | "minPositionSize"
      | "openPosition"
      | "openPositionByOrder"
      | "partiallyClosePosition"
      | "pause"
      | "positionsId"
      | "priceOracle"
      | "primexDNS"
      | "registry"
      | "securityBuffer"
      | "setDefaultOracleTolerableLimit"
      | "setKeeperRewardDistributor"
      | "setMaintenanceBuffer"
      | "setMaxPositionSize"
      | "setMinPositionSize"
      | "setOracleTolerableLimit"
      | "setOracleTolerableLimitMultiplier"
      | "setSecurityBuffer"
      | "setSpotTradingRewardDistributor"
      | "spotTradingRewardDistributor"
      | "traderBalanceVault"
      | "traderPositionIds"
      | "unpause"
      | "updatePositionConditions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecreaseDeposit"
      | "IncreaseDeposit"
      | "KeeperRewardDistributorChanged"
      | "MaintenanceBufferChanged"
      | "MinPositionSizeAndAssetChanged"
      | "OpenPosition"
      | "OracleTolerableLimitMultiplierChanged"
      | "PartialClosePosition"
      | "SecurityBufferChanged"
      | "SetDefaultOracleTolerableLimit"
      | "SetMaxPositionSize"
      | "SetOracleTolerableLimit"
      | "UpdatePositionConditions"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bucketPositionIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      BigNumberish,
      AddressLike,
      PrimexPricingLibrary.MegaRouteStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionByCondition",
    values: [
      BigNumberish,
      AddressLike,
      PrimexPricingLibrary.MegaRouteStruct[],
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOracleTolerableLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deletePositions",
    values: [BigNumberish[], AddressLike[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doTransferOut",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPositionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketPositionsLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloseCondition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloseConditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleTolerableLimit",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderPositionsLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDeposit",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      PrimexPricingLibrary.MegaRouteStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelistedPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPositionSize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [PositionLibrary.OpenPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionByOrder",
    values: [LimitOrderLibrary.OpenPositionByOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "partiallyClosePosition",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      PrimexPricingLibrary.MegaRouteStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionsId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "securityBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOracleTolerableLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeperRewardDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintenanceBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPositionSize",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionSize",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleTolerableLimit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleTolerableLimitMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecurityBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpotTradingRewardDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spotTradingRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderBalanceVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderPositionIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePositionConditions",
    values: [BigNumberish, LimitOrderLibrary.ConditionStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bucketPositionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionByCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doTransferOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPositionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketPositionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloseCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloseConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderPositionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDelistedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionByOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partiallyClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionsId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "securityBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeeperRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintenanceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleTolerableLimitMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecurityBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpotTradingRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spotTradingRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderBalanceVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderPositionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionConditions",
    data: BytesLike
  ): Result;
}

export namespace DecreaseDepositEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    depositDelta: BigNumberish,
    scaledDebtAmount: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    depositDelta: bigint,
    scaledDebtAmount: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    depositDelta: bigint;
    scaledDebtAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseDepositEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    depositDelta: BigNumberish,
    scaledDebtAmount: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    depositDelta: bigint,
    scaledDebtAmount: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    depositDelta: bigint;
    scaledDebtAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperRewardDistributorChangedEvent {
  export type InputTuple = [_keeperRewardDistributor: AddressLike];
  export type OutputTuple = [_keeperRewardDistributor: string];
  export interface OutputObject {
    _keeperRewardDistributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaintenanceBufferChangedEvent {
  export type InputTuple = [maintenanceBuffer: BigNumberish];
  export type OutputTuple = [maintenanceBuffer: bigint];
  export interface OutputObject {
    maintenanceBuffer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinPositionSizeAndAssetChangedEvent {
  export type InputTuple = [
    _minPositionSize: BigNumberish,
    _minPositionAsset: AddressLike
  ];
  export type OutputTuple = [
    _minPositionSize: bigint,
    _minPositionAsset: string
  ];
  export interface OutputObject {
    _minPositionSize: bigint;
    _minPositionAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenPositionEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    openedBy: AddressLike,
    position: PositionLibrary.PositionStruct,
    feeToken: AddressLike,
    protocolFee: BigNumberish,
    entryPrice: BigNumberish,
    leverage: BigNumberish,
    closeConditions: LimitOrderLibrary.ConditionStruct[]
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    openedBy: string,
    position: PositionLibrary.PositionStructOutput,
    feeToken: string,
    protocolFee: bigint,
    entryPrice: bigint,
    leverage: bigint,
    closeConditions: LimitOrderLibrary.ConditionStructOutput[]
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    openedBy: string;
    position: PositionLibrary.PositionStructOutput;
    feeToken: string;
    protocolFee: bigint;
    entryPrice: bigint;
    leverage: bigint;
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleTolerableLimitMultiplierChangedEvent {
  export type InputTuple = [newMultiplier: BigNumberish];
  export type OutputTuple = [newMultiplier: bigint];
  export interface OutputObject {
    newMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartialClosePositionEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    bucketAddress: AddressLike,
    soldAsset: AddressLike,
    positionAsset: AddressLike,
    decreasePositionAmount: BigNumberish,
    depositedAmount: BigNumberish,
    scaledDebtAmount: BigNumberish,
    profit: BigNumberish,
    positionDebt: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    bucketAddress: string,
    soldAsset: string,
    positionAsset: string,
    decreasePositionAmount: bigint,
    depositedAmount: bigint,
    scaledDebtAmount: bigint,
    profit: bigint,
    positionDebt: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    bucketAddress: string;
    soldAsset: string;
    positionAsset: string;
    decreasePositionAmount: bigint;
    depositedAmount: bigint;
    scaledDebtAmount: bigint;
    profit: bigint;
    positionDebt: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityBufferChangedEvent {
  export type InputTuple = [securityBuffer: BigNumberish];
  export type OutputTuple = [securityBuffer: bigint];
  export interface OutputObject {
    securityBuffer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDefaultOracleTolerableLimitEvent {
  export type InputTuple = [oracleTolerableLimit: BigNumberish];
  export type OutputTuple = [oracleTolerableLimit: bigint];
  export interface OutputObject {
    oracleTolerableLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxPositionSizeEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    amountInToken0: BigNumberish,
    amountInToken1: BigNumberish
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    amountInToken0: bigint,
    amountInToken1: bigint
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    amountInToken0: bigint;
    amountInToken1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOracleTolerableLimitEvent {
  export type InputTuple = [
    assetA: AddressLike,
    assetB: AddressLike,
    oracleTolerableLimit: BigNumberish
  ];
  export type OutputTuple = [
    assetA: string,
    assetB: string,
    oracleTolerableLimit: bigint
  ];
  export interface OutputObject {
    assetA: string;
    assetB: string;
    oracleTolerableLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePositionConditionsEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    trader: AddressLike,
    closeConditions: LimitOrderLibrary.ConditionStruct[]
  ];
  export type OutputTuple = [
    positionId: bigint,
    trader: string,
    closeConditions: LimitOrderLibrary.ConditionStructOutput[]
  ];
  export interface OutputObject {
    positionId: bigint;
    trader: string;
    closeConditions: LimitOrderLibrary.ConditionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPositionManager extends BaseContract {
  connect(runner?: ContractRunner | null): IPositionManager;
  waitForDeployment(): Promise<this>;

  interface: IPositionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bucketPositionIds: TypedContractMethod<
    [_bucket: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  closePosition: TypedContractMethod<
    [
      _id: BigNumberish,
      _dealReceiver: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  closePositionByCondition: TypedContractMethod<
    [
      _id: BigNumberish,
      _keeper: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _conditionIndex: BigNumberish,
      _ccmAdditionalParams: BytesLike,
      _closeReason: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  decreaseDeposit: TypedContractMethod<
    [_positionId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  defaultOracleTolerableLimit: TypedContractMethod<[], [bigint], "nonpayable">;

  deletePositions: TypedContractMethod<
    [
      _ids: BigNumberish[],
      _traders: AddressLike[],
      _length: BigNumberish,
      _bucket: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  doTransferOut: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllPositionsLength: TypedContractMethod<[], [bigint], "view">;

  getBucketPositionsLength: TypedContractMethod<
    [_bucket: AddressLike],
    [bigint],
    "view"
  >;

  getCloseCondition: TypedContractMethod<
    [_positionId: BigNumberish, _index: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput],
    "view"
  >;

  getCloseConditions: TypedContractMethod<
    [_positionId: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput[]],
    "view"
  >;

  getOracleTolerableLimit: TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [bigint],
    "view"
  >;

  getPosition: TypedContractMethod<
    [_id: BigNumberish],
    [PositionLibrary.PositionStructOutput],
    "view"
  >;

  getPositionByIndex: TypedContractMethod<
    [_index: BigNumberish],
    [PositionLibrary.PositionStructOutput],
    "view"
  >;

  getPositionDebt: TypedContractMethod<[_id: BigNumberish], [bigint], "view">;

  getTraderPositionsLength: TypedContractMethod<
    [_trader: AddressLike],
    [bigint],
    "view"
  >;

  increaseDeposit: TypedContractMethod<
    [
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _asset: AddressLike,
      _takeDepositFromWallet: boolean,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _registry: AddressLike,
      _primexDNS: AddressLike,
      _traderBalanceVault: AddressLike,
      _priceOracle: AddressLike,
      _keeperRewardDistributor: AddressLike,
      _whiteBlackList: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isDelistedPosition: TypedContractMethod<
    [_id: BigNumberish],
    [boolean],
    "view"
  >;

  keeperRewardDistributor: TypedContractMethod<[], [string], "view">;

  maintenanceBuffer: TypedContractMethod<[], [bigint], "view">;

  maxPositionSize: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "nonpayable"
  >;

  minPositionAsset: TypedContractMethod<[], [string], "view">;

  minPositionSize: TypedContractMethod<[], [bigint], "view">;

  openPosition: TypedContractMethod<
    [_params: PositionLibrary.OpenPositionParamsStruct],
    [void],
    "payable"
  >;

  openPositionByOrder: TypedContractMethod<
    [_params: LimitOrderLibrary.OpenPositionByOrderParamsStruct],
    [[bigint, bigint, bigint, bigint]],
    "nonpayable"
  >;

  partiallyClosePosition: TypedContractMethod<
    [
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  positionsId: TypedContractMethod<[], [bigint], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  primexDNS: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  securityBuffer: TypedContractMethod<[], [bigint], "view">;

  setDefaultOracleTolerableLimit: TypedContractMethod<
    [_percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setKeeperRewardDistributor: TypedContractMethod<
    [_keeperRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaintenanceBuffer: TypedContractMethod<
    [newMaintenanceBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxPositionSize: TypedContractMethod<
    [
      _token0: AddressLike,
      _token1: AddressLike,
      _amountInToken0: BigNumberish,
      _amountInToken1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setMinPositionSize: TypedContractMethod<
    [_minPositionSize: BigNumberish, _minPositionAsset: AddressLike],
    [void],
    "nonpayable"
  >;

  setOracleTolerableLimit: TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOracleTolerableLimitMultiplier: TypedContractMethod<
    [newMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSecurityBuffer: TypedContractMethod<
    [newSecurityBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSpotTradingRewardDistributor: TypedContractMethod<
    [_spotTradingRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;

  spotTradingRewardDistributor: TypedContractMethod<[], [string], "view">;

  traderBalanceVault: TypedContractMethod<[], [string], "view">;

  traderPositionIds: TypedContractMethod<
    [_trader: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePositionConditions: TypedContractMethod<
    [
      _positionId: BigNumberish,
      _closeConditions: LimitOrderLibrary.ConditionStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bucketPositionIds"
  ): TypedContractMethod<
    [_bucket: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _dealReceiver: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closePositionByCondition"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _keeper: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _conditionIndex: BigNumberish,
      _ccmAdditionalParams: BytesLike,
      _closeReason: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseDeposit"
  ): TypedContractMethod<
    [_positionId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultOracleTolerableLimit"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "deletePositions"
  ): TypedContractMethod<
    [
      _ids: BigNumberish[],
      _traders: AddressLike[],
      _length: BigNumberish,
      _bucket: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doTransferOut"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllPositionsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBucketPositionsLength"
  ): TypedContractMethod<[_bucket: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCloseCondition"
  ): TypedContractMethod<
    [_positionId: BigNumberish, _index: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCloseConditions"
  ): TypedContractMethod<
    [_positionId: BigNumberish],
    [LimitOrderLibrary.ConditionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOracleTolerableLimit"
  ): TypedContractMethod<
    [assetA: AddressLike, assetB: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [PositionLibrary.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionByIndex"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [PositionLibrary.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionDebt"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTraderPositionsLength"
  ): TypedContractMethod<[_trader: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseDeposit"
  ): TypedContractMethod<
    [
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _asset: AddressLike,
      _takeDepositFromWallet: boolean,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _registry: AddressLike,
      _primexDNS: AddressLike,
      _traderBalanceVault: AddressLike,
      _priceOracle: AddressLike,
      _keeperRewardDistributor: AddressLike,
      _whiteBlackList: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDelistedPosition"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "keeperRewardDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maintenanceBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPositionSize"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minPositionAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minPositionSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openPosition"
  ): TypedContractMethod<
    [_params: PositionLibrary.OpenPositionParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "openPositionByOrder"
  ): TypedContractMethod<
    [_params: LimitOrderLibrary.OpenPositionByOrderParamsStruct],
    [[bigint, bigint, bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "partiallyClosePosition"
  ): TypedContractMethod<
    [
      _positionId: BigNumberish,
      _amount: BigNumberish,
      _depositReceiver: AddressLike,
      _megaRoutes: PrimexPricingLibrary.MegaRouteStruct[],
      _amountOutMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "positionsId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primexDNS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "securityBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDefaultOracleTolerableLimit"
  ): TypedContractMethod<[_percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKeeperRewardDistributor"
  ): TypedContractMethod<
    [_keeperRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaintenanceBuffer"
  ): TypedContractMethod<
    [newMaintenanceBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxPositionSize"
  ): TypedContractMethod<
    [
      _token0: AddressLike,
      _token1: AddressLike,
      _amountInToken0: BigNumberish,
      _amountInToken1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinPositionSize"
  ): TypedContractMethod<
    [_minPositionSize: BigNumberish, _minPositionAsset: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracleTolerableLimit"
  ): TypedContractMethod<
    [_assetA: AddressLike, _assetB: AddressLike, _percent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracleTolerableLimitMultiplier"
  ): TypedContractMethod<[newMultiplier: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSecurityBuffer"
  ): TypedContractMethod<
    [newSecurityBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSpotTradingRewardDistributor"
  ): TypedContractMethod<
    [_spotTradingRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spotTradingRewardDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "traderBalanceVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "traderPositionIds"
  ): TypedContractMethod<
    [_trader: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePositionConditions"
  ): TypedContractMethod<
    [
      _positionId: BigNumberish,
      _closeConditions: LimitOrderLibrary.ConditionStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecreaseDeposit"
  ): TypedContractEvent<
    DecreaseDepositEvent.InputTuple,
    DecreaseDepositEvent.OutputTuple,
    DecreaseDepositEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseDeposit"
  ): TypedContractEvent<
    IncreaseDepositEvent.InputTuple,
    IncreaseDepositEvent.OutputTuple,
    IncreaseDepositEvent.OutputObject
  >;
  getEvent(
    key: "KeeperRewardDistributorChanged"
  ): TypedContractEvent<
    KeeperRewardDistributorChangedEvent.InputTuple,
    KeeperRewardDistributorChangedEvent.OutputTuple,
    KeeperRewardDistributorChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaintenanceBufferChanged"
  ): TypedContractEvent<
    MaintenanceBufferChangedEvent.InputTuple,
    MaintenanceBufferChangedEvent.OutputTuple,
    MaintenanceBufferChangedEvent.OutputObject
  >;
  getEvent(
    key: "MinPositionSizeAndAssetChanged"
  ): TypedContractEvent<
    MinPositionSizeAndAssetChangedEvent.InputTuple,
    MinPositionSizeAndAssetChangedEvent.OutputTuple,
    MinPositionSizeAndAssetChangedEvent.OutputObject
  >;
  getEvent(
    key: "OpenPosition"
  ): TypedContractEvent<
    OpenPositionEvent.InputTuple,
    OpenPositionEvent.OutputTuple,
    OpenPositionEvent.OutputObject
  >;
  getEvent(
    key: "OracleTolerableLimitMultiplierChanged"
  ): TypedContractEvent<
    OracleTolerableLimitMultiplierChangedEvent.InputTuple,
    OracleTolerableLimitMultiplierChangedEvent.OutputTuple,
    OracleTolerableLimitMultiplierChangedEvent.OutputObject
  >;
  getEvent(
    key: "PartialClosePosition"
  ): TypedContractEvent<
    PartialClosePositionEvent.InputTuple,
    PartialClosePositionEvent.OutputTuple,
    PartialClosePositionEvent.OutputObject
  >;
  getEvent(
    key: "SecurityBufferChanged"
  ): TypedContractEvent<
    SecurityBufferChangedEvent.InputTuple,
    SecurityBufferChangedEvent.OutputTuple,
    SecurityBufferChangedEvent.OutputObject
  >;
  getEvent(
    key: "SetDefaultOracleTolerableLimit"
  ): TypedContractEvent<
    SetDefaultOracleTolerableLimitEvent.InputTuple,
    SetDefaultOracleTolerableLimitEvent.OutputTuple,
    SetDefaultOracleTolerableLimitEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxPositionSize"
  ): TypedContractEvent<
    SetMaxPositionSizeEvent.InputTuple,
    SetMaxPositionSizeEvent.OutputTuple,
    SetMaxPositionSizeEvent.OutputObject
  >;
  getEvent(
    key: "SetOracleTolerableLimit"
  ): TypedContractEvent<
    SetOracleTolerableLimitEvent.InputTuple,
    SetOracleTolerableLimitEvent.OutputTuple,
    SetOracleTolerableLimitEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePositionConditions"
  ): TypedContractEvent<
    UpdatePositionConditionsEvent.InputTuple,
    UpdatePositionConditionsEvent.OutputTuple,
    UpdatePositionConditionsEvent.OutputObject
  >;

  filters: {
    "DecreaseDeposit(uint256,address,uint256,uint256)": TypedContractEvent<
      DecreaseDepositEvent.InputTuple,
      DecreaseDepositEvent.OutputTuple,
      DecreaseDepositEvent.OutputObject
    >;
    DecreaseDeposit: TypedContractEvent<
      DecreaseDepositEvent.InputTuple,
      DecreaseDepositEvent.OutputTuple,
      DecreaseDepositEvent.OutputObject
    >;

    "IncreaseDeposit(uint256,address,uint256,uint256)": TypedContractEvent<
      IncreaseDepositEvent.InputTuple,
      IncreaseDepositEvent.OutputTuple,
      IncreaseDepositEvent.OutputObject
    >;
    IncreaseDeposit: TypedContractEvent<
      IncreaseDepositEvent.InputTuple,
      IncreaseDepositEvent.OutputTuple,
      IncreaseDepositEvent.OutputObject
    >;

    "KeeperRewardDistributorChanged(address)": TypedContractEvent<
      KeeperRewardDistributorChangedEvent.InputTuple,
      KeeperRewardDistributorChangedEvent.OutputTuple,
      KeeperRewardDistributorChangedEvent.OutputObject
    >;
    KeeperRewardDistributorChanged: TypedContractEvent<
      KeeperRewardDistributorChangedEvent.InputTuple,
      KeeperRewardDistributorChangedEvent.OutputTuple,
      KeeperRewardDistributorChangedEvent.OutputObject
    >;

    "MaintenanceBufferChanged(uint256)": TypedContractEvent<
      MaintenanceBufferChangedEvent.InputTuple,
      MaintenanceBufferChangedEvent.OutputTuple,
      MaintenanceBufferChangedEvent.OutputObject
    >;
    MaintenanceBufferChanged: TypedContractEvent<
      MaintenanceBufferChangedEvent.InputTuple,
      MaintenanceBufferChangedEvent.OutputTuple,
      MaintenanceBufferChangedEvent.OutputObject
    >;

    "MinPositionSizeAndAssetChanged(uint256,address)": TypedContractEvent<
      MinPositionSizeAndAssetChangedEvent.InputTuple,
      MinPositionSizeAndAssetChangedEvent.OutputTuple,
      MinPositionSizeAndAssetChangedEvent.OutputObject
    >;
    MinPositionSizeAndAssetChanged: TypedContractEvent<
      MinPositionSizeAndAssetChangedEvent.InputTuple,
      MinPositionSizeAndAssetChangedEvent.OutputTuple,
      MinPositionSizeAndAssetChangedEvent.OutputObject
    >;

    "OpenPosition(uint256,address,address,tuple,address,uint256,uint256,uint256,tuple[])": TypedContractEvent<
      OpenPositionEvent.InputTuple,
      OpenPositionEvent.OutputTuple,
      OpenPositionEvent.OutputObject
    >;
    OpenPosition: TypedContractEvent<
      OpenPositionEvent.InputTuple,
      OpenPositionEvent.OutputTuple,
      OpenPositionEvent.OutputObject
    >;

    "OracleTolerableLimitMultiplierChanged(uint256)": TypedContractEvent<
      OracleTolerableLimitMultiplierChangedEvent.InputTuple,
      OracleTolerableLimitMultiplierChangedEvent.OutputTuple,
      OracleTolerableLimitMultiplierChangedEvent.OutputObject
    >;
    OracleTolerableLimitMultiplierChanged: TypedContractEvent<
      OracleTolerableLimitMultiplierChangedEvent.InputTuple,
      OracleTolerableLimitMultiplierChangedEvent.OutputTuple,
      OracleTolerableLimitMultiplierChangedEvent.OutputObject
    >;

    "PartialClosePosition(uint256,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256)": TypedContractEvent<
      PartialClosePositionEvent.InputTuple,
      PartialClosePositionEvent.OutputTuple,
      PartialClosePositionEvent.OutputObject
    >;
    PartialClosePosition: TypedContractEvent<
      PartialClosePositionEvent.InputTuple,
      PartialClosePositionEvent.OutputTuple,
      PartialClosePositionEvent.OutputObject
    >;

    "SecurityBufferChanged(uint256)": TypedContractEvent<
      SecurityBufferChangedEvent.InputTuple,
      SecurityBufferChangedEvent.OutputTuple,
      SecurityBufferChangedEvent.OutputObject
    >;
    SecurityBufferChanged: TypedContractEvent<
      SecurityBufferChangedEvent.InputTuple,
      SecurityBufferChangedEvent.OutputTuple,
      SecurityBufferChangedEvent.OutputObject
    >;

    "SetDefaultOracleTolerableLimit(uint256)": TypedContractEvent<
      SetDefaultOracleTolerableLimitEvent.InputTuple,
      SetDefaultOracleTolerableLimitEvent.OutputTuple,
      SetDefaultOracleTolerableLimitEvent.OutputObject
    >;
    SetDefaultOracleTolerableLimit: TypedContractEvent<
      SetDefaultOracleTolerableLimitEvent.InputTuple,
      SetDefaultOracleTolerableLimitEvent.OutputTuple,
      SetDefaultOracleTolerableLimitEvent.OutputObject
    >;

    "SetMaxPositionSize(address,address,uint256,uint256)": TypedContractEvent<
      SetMaxPositionSizeEvent.InputTuple,
      SetMaxPositionSizeEvent.OutputTuple,
      SetMaxPositionSizeEvent.OutputObject
    >;
    SetMaxPositionSize: TypedContractEvent<
      SetMaxPositionSizeEvent.InputTuple,
      SetMaxPositionSizeEvent.OutputTuple,
      SetMaxPositionSizeEvent.OutputObject
    >;

    "SetOracleTolerableLimit(address,address,uint256)": TypedContractEvent<
      SetOracleTolerableLimitEvent.InputTuple,
      SetOracleTolerableLimitEvent.OutputTuple,
      SetOracleTolerableLimitEvent.OutputObject
    >;
    SetOracleTolerableLimit: TypedContractEvent<
      SetOracleTolerableLimitEvent.InputTuple,
      SetOracleTolerableLimitEvent.OutputTuple,
      SetOracleTolerableLimitEvent.OutputObject
    >;

    "UpdatePositionConditions(uint256,address,tuple[])": TypedContractEvent<
      UpdatePositionConditionsEvent.InputTuple,
      UpdatePositionConditionsEvent.OutputTuple,
      UpdatePositionConditionsEvent.OutputObject
    >;
    UpdatePositionConditions: TypedContractEvent<
      UpdatePositionConditionsEvent.InputTuple,
      UpdatePositionConditionsEvent.OutputTuple,
      UpdatePositionConditionsEvent.OutputObject
    >;
  };
}
