/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IPositionManagerStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bucketPositionIds"
      | "defaultOracleTolerableLimit"
      | "keeperRewardDistributor"
      | "maintenanceBuffer"
      | "maxPositionSize"
      | "minPositionAsset"
      | "minPositionSize"
      | "positionsId"
      | "priceOracle"
      | "primexDNS"
      | "registry"
      | "securityBuffer"
      | "spotTradingRewardDistributor"
      | "traderBalanceVault"
      | "traderPositionIds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bucketPositionIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOracleTolerableLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keeperRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPositionSize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionsId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "securityBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spotTradingRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderBalanceVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderPositionIds",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "bucketPositionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOracleTolerableLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "securityBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spotTradingRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderBalanceVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderPositionIds",
    data: BytesLike
  ): Result;
}

export interface IPositionManagerStorage extends BaseContract {
  connect(runner?: ContractRunner | null): IPositionManagerStorage;
  waitForDeployment(): Promise<this>;

  interface: IPositionManagerStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bucketPositionIds: TypedContractMethod<
    [_bucket: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  defaultOracleTolerableLimit: TypedContractMethod<[], [bigint], "nonpayable">;

  keeperRewardDistributor: TypedContractMethod<[], [string], "view">;

  maintenanceBuffer: TypedContractMethod<[], [bigint], "view">;

  maxPositionSize: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "nonpayable"
  >;

  minPositionAsset: TypedContractMethod<[], [string], "view">;

  minPositionSize: TypedContractMethod<[], [bigint], "view">;

  positionsId: TypedContractMethod<[], [bigint], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  primexDNS: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  securityBuffer: TypedContractMethod<[], [bigint], "view">;

  spotTradingRewardDistributor: TypedContractMethod<[], [string], "view">;

  traderBalanceVault: TypedContractMethod<[], [string], "view">;

  traderPositionIds: TypedContractMethod<
    [_trader: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bucketPositionIds"
  ): TypedContractMethod<
    [_bucket: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "defaultOracleTolerableLimit"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "keeperRewardDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maintenanceBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPositionSize"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minPositionAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minPositionSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionsId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primexDNS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "securityBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "spotTradingRewardDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "traderBalanceVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "traderPositionIds"
  ): TypedContractMethod<
    [_trader: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
