/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPTokenStorage {
  export type DepositStruct = {
    lockedBalance: BigNumberish;
    deadline: BigNumberish;
    id: BigNumberish;
  };

  export type DepositStructOutput = [
    lockedBalance: bigint,
    deadline: bigint,
    id: bigint
  ] & { lockedBalance: bigint; deadline: bigint; id: bigint };

  export type LockedBalanceStruct = {
    totalLockedBalance: BigNumberish;
    deposits: IPTokenStorage.DepositStruct[];
  };

  export type LockedBalanceStructOutput = [
    totalLockedBalance: bigint,
    deposits: IPTokenStorage.DepositStructOutput[]
  ] & {
    totalLockedBalance: bigint;
    deposits: IPTokenStorage.DepositStructOutput[];
  };
}

export interface IPTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "availableBalanceOf"
      | "balanceOf"
      | "bucket"
      | "burn"
      | "decimals"
      | "getDepositIndexById"
      | "getUserLockedBalance"
      | "initialize"
      | "interestIncreaser"
      | "lenderRewardDistributor"
      | "lockDeposit"
      | "mint"
      | "mintToReserve"
      | "name"
      | "scaledBalanceOf"
      | "scaledTotalSupply"
      | "setBucket"
      | "setInterestIncreaser"
      | "setLenderRewardDistributor"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unlockDeposit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BalanceTransfer"
      | "Burn"
      | "LockDeposit"
      | "Mint"
      | "Transfer"
      | "UnlockDeposit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bucket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDepositIndexById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLockedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interestIncreaser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockDeposit",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToReserve",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "scaledBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBucket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestIncreaser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLenderRewardDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockDeposit",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bucket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositIndexById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestIncreaser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scaledBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBucket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterestIncreaser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLenderRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockDeposit",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    index: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [from: AddressLike, value: BigNumberish];
  export type OutputTuple = [from: string, value: bigint];
  export interface OutputObject {
    from: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockDepositEvent {
  export type InputTuple = [
    user: AddressLike,
    id: BigNumberish,
    deadline: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    id: bigint,
    deadline: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    id: bigint;
    deadline: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [from: AddressLike, value: BigNumberish];
  export type OutputTuple = [from: string, value: bigint];
  export interface OutputObject {
    from: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockDepositEvent {
  export type InputTuple = [user: AddressLike, id: BigNumberish];
  export type OutputTuple = [user: string, id: bigint];
  export interface OutputObject {
    user: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPToken extends BaseContract {
  connect(runner?: ContractRunner | null): IPToken;
  waitForDeployment(): Promise<this>;

  interface: IPTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  availableBalanceOf: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bucket: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish, _index: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  getDepositIndexById: TypedContractMethod<
    [id: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getUserLockedBalance: TypedContractMethod<
    [_user: AddressLike],
    [IPTokenStorage.LockedBalanceStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _bucketsFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  interestIncreaser: TypedContractMethod<[], [string], "view">;

  lenderRewardDistributor: TypedContractMethod<[], [string], "view">;

  lockDeposit: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish, _index: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  mintToReserve: TypedContractMethod<
    [_reserve: AddressLike, _amount: BigNumberish, _index: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  scaledBalanceOf: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  scaledTotalSupply: TypedContractMethod<[], [bigint], "view">;

  setBucket: TypedContractMethod<[_bucket: AddressLike], [void], "nonpayable">;

  setInterestIncreaser: TypedContractMethod<
    [_interestIncreaser: AddressLike],
    [void],
    "nonpayable"
  >;

  setLenderRewardDistributor: TypedContractMethod<
    [_lenderRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unlockDeposit: TypedContractMethod<
    [_depositId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "availableBalanceOf"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bucket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish, _index: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositIndexById"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserLockedBalance"
  ): TypedContractMethod<
    [_user: AddressLike],
    [IPTokenStorage.LockedBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _bucketsFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestIncreaser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lenderRewardDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lockDeposit"
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish, _index: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintToReserve"
  ): TypedContractMethod<
    [_reserve: AddressLike, _amount: BigNumberish, _index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "scaledBalanceOf"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "scaledTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBucket"
  ): TypedContractMethod<[_bucket: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestIncreaser"
  ): TypedContractMethod<
    [_interestIncreaser: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLenderRewardDistributor"
  ): TypedContractMethod<
    [_lenderRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockDeposit"
  ): TypedContractMethod<[_depositId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BalanceTransfer"
  ): TypedContractEvent<
    BalanceTransferEvent.InputTuple,
    BalanceTransferEvent.OutputTuple,
    BalanceTransferEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "LockDeposit"
  ): TypedContractEvent<
    LockDepositEvent.InputTuple,
    LockDepositEvent.OutputTuple,
    LockDepositEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UnlockDeposit"
  ): TypedContractEvent<
    UnlockDepositEvent.InputTuple,
    UnlockDepositEvent.OutputTuple,
    UnlockDepositEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BalanceTransfer(address,address,uint256,uint256)": TypedContractEvent<
      BalanceTransferEvent.InputTuple,
      BalanceTransferEvent.OutputTuple,
      BalanceTransferEvent.OutputObject
    >;
    BalanceTransfer: TypedContractEvent<
      BalanceTransferEvent.InputTuple,
      BalanceTransferEvent.OutputTuple,
      BalanceTransferEvent.OutputObject
    >;

    "Burn(address,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "LockDeposit(address,uint256,uint256,uint256)": TypedContractEvent<
      LockDepositEvent.InputTuple,
      LockDepositEvent.OutputTuple,
      LockDepositEvent.OutputObject
    >;
    LockDeposit: TypedContractEvent<
      LockDepositEvent.InputTuple,
      LockDepositEvent.OutputTuple,
      LockDepositEvent.OutputObject
    >;

    "Mint(address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UnlockDeposit(address,uint256)": TypedContractEvent<
      UnlockDepositEvent.InputTuple,
      UnlockDepositEvent.OutputTuple,
      UnlockDepositEvent.OutputObject
    >;
    UnlockDeposit: TypedContractEvent<
      UnlockDepositEvent.InputTuple,
      UnlockDepositEvent.OutputTuple,
      UnlockDepositEvent.OutputObject
    >;
  };
}
