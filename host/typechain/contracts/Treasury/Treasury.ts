/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ITreasuryStorage {
  export type SpendingLimitsStruct = {
    maxTotalAmount: BigNumberish;
    maxAmountPerTransfer: BigNumberish;
    maxPercentPerTransfer: BigNumberish;
    minTimeBetweenTransfers: BigNumberish;
    timeframeDuration: BigNumberish;
    maxAmountDuringTimeframe: BigNumberish;
  };

  export type SpendingLimitsStructOutput = [
    maxTotalAmount: bigint,
    maxAmountPerTransfer: bigint,
    maxPercentPerTransfer: bigint,
    minTimeBetweenTransfers: bigint,
    timeframeDuration: bigint,
    maxAmountDuringTimeframe: bigint
  ] & {
    maxTotalAmount: bigint;
    maxAmountPerTransfer: bigint;
    maxPercentPerTransfer: bigint;
    minTimeBetweenTransfers: bigint;
    timeframeDuration: bigint;
    maxAmountDuringTimeframe: bigint;
  };
}

export interface TreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canTransferByTime"
      | "decreaseLimits"
      | "initialTimestamp"
      | "initialize"
      | "pause"
      | "paused"
      | "registry"
      | "setMaxSpendingLimit"
      | "spenders"
      | "supportsInterface"
      | "transferFromTreasury"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "MaxSpendingLimitChanged"
      | "Paused"
      | "TransferFromTreasury"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canTransferByTime",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLimits",
    values: [AddressLike, AddressLike, ITreasuryStorage.SpendingLimitsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMaxSpendingLimit",
    values: [AddressLike, AddressLike, ITreasuryStorage.SpendingLimitsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "spenders",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromTreasury",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "canTransferByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSpendingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spenders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxSpendingLimitChangedEvent {
  export type InputTuple = [
    spender: AddressLike,
    token: AddressLike,
    newSpendingLimits: ITreasuryStorage.SpendingLimitsStruct
  ];
  export type OutputTuple = [
    spender: string,
    token: string,
    newSpendingLimits: ITreasuryStorage.SpendingLimitsStructOutput
  ];
  export interface OutputObject {
    spender: string;
    token: string;
    newSpendingLimits: ITreasuryStorage.SpendingLimitsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferFromTreasuryEvent {
  export type InputTuple = [
    spender: AddressLike,
    receiver: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    spender: string,
    receiver: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    spender: string;
    receiver: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Treasury extends BaseContract {
  connect(runner?: ContractRunner | null): Treasury;
  waitForDeployment(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canTransferByTime: TypedContractMethod<
    [_spender: AddressLike, _token: AddressLike],
    [boolean],
    "view"
  >;

  decreaseLimits: TypedContractMethod<
    [
      _spender: AddressLike,
      _token: AddressLike,
      _newSpendingLimits: ITreasuryStorage.SpendingLimitsStruct
    ],
    [void],
    "nonpayable"
  >;

  initialTimestamp: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [_registry: AddressLike],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  setMaxSpendingLimit: TypedContractMethod<
    [
      _spender: AddressLike,
      _token: AddressLike,
      _newSpendingLimits: ITreasuryStorage.SpendingLimitsStruct
    ],
    [void],
    "nonpayable"
  >;

  spenders: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [boolean, ITreasuryStorage.SpendingLimitsStructOutput, bigint, bigint] & {
        isSpenderExist: boolean;
        limits: ITreasuryStorage.SpendingLimitsStructOutput;
        lastWithdrawalTimestamp: bigint;
        withdrawnDuringTimeframe: bigint;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferFromTreasury: TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canTransferByTime"
  ): TypedContractMethod<
    [_spender: AddressLike, _token: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreaseLimits"
  ): TypedContractMethod<
    [
      _spender: AddressLike,
      _token: AddressLike,
      _newSpendingLimits: ITreasuryStorage.SpendingLimitsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMaxSpendingLimit"
  ): TypedContractMethod<
    [
      _spender: AddressLike,
      _token: AddressLike,
      _newSpendingLimits: ITreasuryStorage.SpendingLimitsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spenders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [boolean, ITreasuryStorage.SpendingLimitsStructOutput, bigint, bigint] & {
        isSpenderExist: boolean;
        limits: ITreasuryStorage.SpendingLimitsStructOutput;
        lastWithdrawalTimestamp: bigint;
        withdrawnDuringTimeframe: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFromTreasury"
  ): TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxSpendingLimitChanged"
  ): TypedContractEvent<
    MaxSpendingLimitChangedEvent.InputTuple,
    MaxSpendingLimitChangedEvent.OutputTuple,
    MaxSpendingLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TransferFromTreasury"
  ): TypedContractEvent<
    TransferFromTreasuryEvent.InputTuple,
    TransferFromTreasuryEvent.OutputTuple,
    TransferFromTreasuryEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxSpendingLimitChanged(address,address,tuple)": TypedContractEvent<
      MaxSpendingLimitChangedEvent.InputTuple,
      MaxSpendingLimitChangedEvent.OutputTuple,
      MaxSpendingLimitChangedEvent.OutputObject
    >;
    MaxSpendingLimitChanged: TypedContractEvent<
      MaxSpendingLimitChangedEvent.InputTuple,
      MaxSpendingLimitChangedEvent.OutputTuple,
      MaxSpendingLimitChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TransferFromTreasury(address,address,address,uint256)": TypedContractEvent<
      TransferFromTreasuryEvent.InputTuple,
      TransferFromTreasuryEvent.OutputTuple,
      TransferFromTreasuryEvent.OutputObject
    >;
    TransferFromTreasury: TypedContractEvent<
      TransferFromTreasuryEvent.InputTuple,
      TransferFromTreasuryEvent.OutputTuple,
      TransferFromTreasuryEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
