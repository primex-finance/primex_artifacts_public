/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IDepositManager {
  export type DepositParamsStruct = {
    bucket: string;
    amount: BigNumberish;
    duration: BigNumberish;
    isPToken: boolean;
    depositReceiver: string;
    rewardToken: string;
    pullOracleData: BytesLike[][];
    pullOracleTypes: BigNumberish[];
    borrowedRewardAssetOracleData: BytesLike;
  };

  export type DepositParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    string,
    string[][],
    BigNumber[],
    string
  ] & {
    bucket: string;
    amount: BigNumber;
    duration: BigNumber;
    isPToken: boolean;
    depositReceiver: string;
    rewardToken: string;
    pullOracleData: string[][];
    pullOracleTypes: BigNumber[];
    borrowedRewardAssetOracleData: string;
  };

  export type RewardParametersStruct = {
    bucket: string;
    rewardTokens: string[];
    durations: BigNumberish[][];
    newInterestRates: BigNumberish[][];
    maxTotalDeposit: BigNumberish;
  };

  export type RewardParametersStructOutput = [
    string,
    string[],
    BigNumber[][],
    BigNumber[][],
    BigNumber
  ] & {
    bucket: string;
    rewardTokens: string[];
    durations: BigNumber[][];
    newInterestRates: BigNumber[][];
    maxTotalDeposit: BigNumber;
  };
}

export declare namespace IDepositManagerStorage {
  export type DepositStruct = {
    depositId: BigNumberish;
    owner: string;
    bucket: string;
    scaledAmount: BigNumberish;
    entryLiquidityIndex: BigNumberish;
    deadline: BigNumberish;
  };

  export type DepositStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    depositId: BigNumber;
    owner: string;
    bucket: string;
    scaledAmount: BigNumber;
    entryLiquidityIndex: BigNumber;
    deadline: BigNumber;
  };
}

export interface IDepositManagerV2Interface extends utils.Interface {
  functions: {
    "claimRewardTokens(uint256[],address[])": FunctionFragment;
    "computeClaimableAmount(uint256)": FunctionFragment;
    "deposit((address,uint256,uint256,bool,address,address,bytes[][],uint256[],bytes))": FunctionFragment;
    "depositIdCounter()": FunctionFragment;
    "getAllDepositsLength()": FunctionFragment;
    "getBucketDepositIds(address)": FunctionFragment;
    "getBucketPosibleDurations(address,address)": FunctionFragment;
    "getBucketRewardTokens(address)": FunctionFragment;
    "getDepositById(uint256)": FunctionFragment;
    "getDeposits(uint256,uint256)": FunctionFragment;
    "getDepositsByBucket(address,uint256,uint256)": FunctionFragment;
    "getDepositsByUser(address,uint256,uint256)": FunctionFragment;
    "getUserDepositIds(address)": FunctionFragment;
    "getWithdrawableAmount(address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "interestRates(address,address,uint256)": FunctionFragment;
    "maxTotalDeposits(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "primexDNS()": FunctionFragment;
    "registry()": FunctionFragment;
    "setMagicTierCoefficient(uint256)": FunctionFragment;
    "setRewardParameters((address,address[],uint256[][],uint256[][],uint256)[])": FunctionFragment;
    "setTiersManager(address)": FunctionFragment;
    "tierManager()": FunctionFragment;
    "unlock(uint256[],address[],bool[])": FunctionFragment;
    "unpause()": FunctionFragment;
    "whiteBlackList()": FunctionFragment;
    "withdrawUnclaimedReward(address[],uint256[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewardTokens"
      | "computeClaimableAmount"
      | "deposit"
      | "depositIdCounter"
      | "getAllDepositsLength"
      | "getBucketDepositIds"
      | "getBucketPosibleDurations"
      | "getBucketRewardTokens"
      | "getDepositById"
      | "getDeposits"
      | "getDepositsByBucket"
      | "getDepositsByUser"
      | "getUserDepositIds"
      | "getWithdrawableAmount"
      | "initialize"
      | "interestRates"
      | "maxTotalDeposits"
      | "pause"
      | "priceOracle"
      | "primexDNS"
      | "registry"
      | "setMagicTierCoefficient"
      | "setRewardParameters"
      | "setTiersManager"
      | "tierManager"
      | "unlock"
      | "unpause"
      | "whiteBlackList"
      | "withdrawUnclaimedReward"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewardTokens",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "computeClaimableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [IDepositManager.DepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDepositsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketDepositIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketPosibleDurations",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketRewardTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositsByBucket",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositsByUser",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDepositIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRates",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalDeposits",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "primexDNS", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMagicTierCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardParameters",
    values: [IDepositManager.RewardParametersStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTiersManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tierManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish[], string[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whiteBlackList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnclaimedReward",
    values: [string[], BigNumberish[], string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDepositsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketDepositIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketPosibleDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositsByBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDepositIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "primexDNS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMagicTierCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTiersManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnclaimedReward",
    data: BytesLike
  ): Result;

  events: {
    "DepositUnlocked(uint256,address,uint256,bool)": EventFragment;
    "FixedTermDepositCreated(address,address,uint256,uint256,uint256)": EventFragment;
    "InterestRateSet(address,address,uint256,uint256)": EventFragment;
    "MaxTotalDepositSet(address,uint256)": EventFragment;
    "RewardPaid(uint256,address,address,uint256)": EventFragment;
    "RewardTokenAdded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedTermDepositCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTotalDepositSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTokenAdded"): EventFragment;
}

export interface DepositUnlockedEventObject {
  depositId: BigNumber;
  receiver: string;
  amount: BigNumber;
  shouldWithdraw: boolean;
}
export type DepositUnlockedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  DepositUnlockedEventObject
>;

export type DepositUnlockedEventFilter = TypedEventFilter<DepositUnlockedEvent>;

export interface FixedTermDepositCreatedEventObject {
  depositReceiver: string;
  bucket: string;
  depositId: BigNumber;
  amount: BigNumber;
  duration: BigNumber;
}
export type FixedTermDepositCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  FixedTermDepositCreatedEventObject
>;

export type FixedTermDepositCreatedEventFilter =
  TypedEventFilter<FixedTermDepositCreatedEvent>;

export interface InterestRateSetEventObject {
  bucket: string;
  rewardToken: string;
  duration: BigNumber;
  interestRate: BigNumber;
}
export type InterestRateSetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  InterestRateSetEventObject
>;

export type InterestRateSetEventFilter = TypedEventFilter<InterestRateSetEvent>;

export interface MaxTotalDepositSetEventObject {
  bucket: string;
  maxTotalDeposit: BigNumber;
}
export type MaxTotalDepositSetEvent = TypedEvent<
  [string, BigNumber],
  MaxTotalDepositSetEventObject
>;

export type MaxTotalDepositSetEventFilter =
  TypedEventFilter<MaxTotalDepositSetEvent>;

export interface RewardPaidEventObject {
  depositId: BigNumber;
  rewardReceiver: string;
  rewardToken: string;
  rewardAmount: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardTokenAddedEventObject {
  bucket: string;
  rewardToken: string;
}
export type RewardTokenAddedEvent = TypedEvent<
  [string, string],
  RewardTokenAddedEventObject
>;

export type RewardTokenAddedEventFilter =
  TypedEventFilter<RewardTokenAddedEvent>;

export interface IDepositManagerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDepositManagerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewardTokens(
      _depositIds: BigNumberish[],
      _receivers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    computeClaimableAmount(
      _depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      params: IDepositManager.DepositParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllDepositsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBucketDepositIds(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBucketPosibleDurations(
      bucket: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { possibleDurations: BigNumber[] }>;

    getBucketRewardTokens(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { rewardTokens: string[] }>;

    getDepositById(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IDepositManagerStorage.DepositStructOutput] & {
        deposit: IDepositManagerStorage.DepositStructOutput;
      }
    >;

    getDeposits(
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
        deposit: IDepositManagerStorage.DepositStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getDepositsByBucket(
      bucket: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
        bucketDepositsData: IDepositManagerStorage.DepositStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getDepositsByUser(
      user: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
        userDepositsData: IDepositManagerStorage.DepositStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getUserDepositIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getWithdrawableAmount(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    initialize(
      registry: string,
      primexDNS: string,
      priceOracle: string,
      whiteBlackList: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    interestRates(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    primexDNS(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setMagicTierCoefficient(
      _magicTierCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardParameters(
      params: IDepositManager.RewardParametersStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTiersManager(
      _tierManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tierManager(overrides?: CallOverrides): Promise<[string]>;

    unlock(
      depositId: BigNumberish[],
      receivers: string[],
      shouldWithdraw: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whiteBlackList(overrides?: CallOverrides): Promise<[string]>;

    withdrawUnclaimedReward(
      tokens: string[],
      amounts: BigNumberish[],
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claimRewardTokens(
    _depositIds: BigNumberish[],
    _receivers: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  computeClaimableAmount(
    _depositId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    params: IDepositManager.DepositParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getAllDepositsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getBucketDepositIds(
    bucket: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBucketPosibleDurations(
    bucket: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBucketRewardTokens(
    bucket: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getDepositById(
    depositId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDepositManagerStorage.DepositStructOutput>;

  getDeposits(
    cursor: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
      deposit: IDepositManagerStorage.DepositStructOutput[];
      newCursor: BigNumber;
    }
  >;

  getDepositsByBucket(
    bucket: string,
    cursor: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
      bucketDepositsData: IDepositManagerStorage.DepositStructOutput[];
      newCursor: BigNumber;
    }
  >;

  getDepositsByUser(
    user: string,
    cursor: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
      userDepositsData: IDepositManagerStorage.DepositStructOutput[];
      newCursor: BigNumber;
    }
  >;

  getUserDepositIds(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getWithdrawableAmount(
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    registry: string,
    primexDNS: string,
    priceOracle: string,
    whiteBlackList: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  interestRates(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTotalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  primexDNS(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setMagicTierCoefficient(
    _magicTierCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardParameters(
    params: IDepositManager.RewardParametersStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTiersManager(
    _tierManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tierManager(overrides?: CallOverrides): Promise<string>;

  unlock(
    depositId: BigNumberish[],
    receivers: string[],
    shouldWithdraw: boolean[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whiteBlackList(overrides?: CallOverrides): Promise<string>;

  withdrawUnclaimedReward(
    tokens: string[],
    amounts: BigNumberish[],
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewardTokens(
      _depositIds: BigNumberish[],
      _receivers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    computeClaimableAmount(
      _depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      params: IDepositManager.DepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getAllDepositsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBucketDepositIds(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBucketPosibleDurations(
      bucket: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBucketRewardTokens(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getDepositById(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDepositManagerStorage.DepositStructOutput>;

    getDeposits(
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
        deposit: IDepositManagerStorage.DepositStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getDepositsByBucket(
      bucket: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
        bucketDepositsData: IDepositManagerStorage.DepositStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getDepositsByUser(
      user: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IDepositManagerStorage.DepositStructOutput[], BigNumber] & {
        userDepositsData: IDepositManagerStorage.DepositStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getUserDepositIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getWithdrawableAmount(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry: string,
      primexDNS: string,
      priceOracle: string,
      whiteBlackList: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRates(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    primexDNS(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setMagicTierCoefficient(
      _magicTierCoefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardParameters(
      params: IDepositManager.RewardParametersStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTiersManager(
      _tierManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tierManager(overrides?: CallOverrides): Promise<string>;

    unlock(
      depositId: BigNumberish[],
      receivers: string[],
      shouldWithdraw: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    whiteBlackList(overrides?: CallOverrides): Promise<string>;

    withdrawUnclaimedReward(
      tokens: string[],
      amounts: BigNumberish[],
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositUnlocked(uint256,address,uint256,bool)"(
      depositId?: BigNumberish | null,
      receiver?: string | null,
      amount?: null,
      shouldWithdraw?: null
    ): DepositUnlockedEventFilter;
    DepositUnlocked(
      depositId?: BigNumberish | null,
      receiver?: string | null,
      amount?: null,
      shouldWithdraw?: null
    ): DepositUnlockedEventFilter;

    "FixedTermDepositCreated(address,address,uint256,uint256,uint256)"(
      depositReceiver?: string | null,
      bucket?: string | null,
      depositId?: BigNumberish | null,
      amount?: null,
      duration?: null
    ): FixedTermDepositCreatedEventFilter;
    FixedTermDepositCreated(
      depositReceiver?: string | null,
      bucket?: string | null,
      depositId?: BigNumberish | null,
      amount?: null,
      duration?: null
    ): FixedTermDepositCreatedEventFilter;

    "InterestRateSet(address,address,uint256,uint256)"(
      bucket?: string | null,
      rewardToken?: string | null,
      duration?: BigNumberish | null,
      interestRate?: null
    ): InterestRateSetEventFilter;
    InterestRateSet(
      bucket?: string | null,
      rewardToken?: string | null,
      duration?: BigNumberish | null,
      interestRate?: null
    ): InterestRateSetEventFilter;

    "MaxTotalDepositSet(address,uint256)"(
      bucket?: string | null,
      maxTotalDeposit?: null
    ): MaxTotalDepositSetEventFilter;
    MaxTotalDepositSet(
      bucket?: string | null,
      maxTotalDeposit?: null
    ): MaxTotalDepositSetEventFilter;

    "RewardPaid(uint256,address,address,uint256)"(
      depositId?: BigNumberish | null,
      rewardReceiver?: string | null,
      rewardToken?: string | null,
      rewardAmount?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      depositId?: BigNumberish | null,
      rewardReceiver?: string | null,
      rewardToken?: string | null,
      rewardAmount?: null
    ): RewardPaidEventFilter;

    "RewardTokenAdded(address,address)"(
      bucket?: string | null,
      rewardToken?: string | null
    ): RewardTokenAddedEventFilter;
    RewardTokenAdded(
      bucket?: string | null,
      rewardToken?: string | null
    ): RewardTokenAddedEventFilter;
  };

  estimateGas: {
    claimRewardTokens(
      _depositIds: BigNumberish[],
      _receivers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    computeClaimableAmount(
      _depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      params: IDepositManager.DepositParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getAllDepositsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBucketDepositIds(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBucketPosibleDurations(
      bucket: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBucketRewardTokens(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositById(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeposits(
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositsByBucket(
      bucket: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositsByUser(
      user: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDepositIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableAmount(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry: string,
      primexDNS: string,
      priceOracle: string,
      whiteBlackList: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    interestRates(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    primexDNS(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setMagicTierCoefficient(
      _magicTierCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardParameters(
      params: IDepositManager.RewardParametersStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTiersManager(
      _tierManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tierManager(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      depositId: BigNumberish[],
      receivers: string[],
      shouldWithdraw: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    whiteBlackList(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawUnclaimedReward(
      tokens: string[],
      amounts: BigNumberish[],
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewardTokens(
      _depositIds: BigNumberish[],
      _receivers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    computeClaimableAmount(
      _depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      params: IDepositManager.DepositParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllDepositsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBucketDepositIds(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBucketPosibleDurations(
      bucket: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBucketRewardTokens(
      bucket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositById(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeposits(
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositsByBucket(
      bucket: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositsByUser(
      user: string,
      cursor: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDepositIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableAmount(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registry: string,
      primexDNS: string,
      priceOracle: string,
      whiteBlackList: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    interestRates(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primexDNS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMagicTierCoefficient(
      _magicTierCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardParameters(
      params: IDepositManager.RewardParametersStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTiersManager(
      _tierManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tierManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      depositId: BigNumberish[],
      receivers: string[],
      shouldWithdraw: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whiteBlackList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawUnclaimedReward(
      tokens: string[],
      amounts: BigNumberish[],
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
