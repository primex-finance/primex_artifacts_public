/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IAlgebraPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeIncentive"
      | "burn"
      | "collect"
      | "dataStorageOperator"
      | "factory"
      | "flash"
      | "getInnerCumulatives"
      | "getTimepoints"
      | "globalState"
      | "initialize"
      | "liquidity"
      | "liquidityCooldown"
      | "maxLiquidityPerTick"
      | "mint"
      | "positions"
      | "setCommunityFee"
      | "setIncentive"
      | "setLiquidityCooldown"
      | "swap"
      | "swapSupportingFeeOnInputTokens"
      | "tickSpacing"
      | "tickTable"
      | "ticks"
      | "timepoints"
      | "token0"
      | "token1"
      | "totalFeeGrowth0Token"
      | "totalFeeGrowth1Token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Burn"
      | "Collect"
      | "CommunityFee"
      | "Fee"
      | "Flash"
      | "Incentive"
      | "Initialize"
      | "LiquidityCooldown"
      | "Mint"
      | "Swap"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataStorageOperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInnerCumulatives",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimepoints",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidityPerTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommunityFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSupportingFeeOnInputTokens",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "timepoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth0Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth1Token",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataStorageOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInnerCumulatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimepoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidityPerTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommunityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapSupportingFeeOnInputTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timepoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth0Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth1Token",
    data: BytesLike
  ): Result;
}

export namespace BurnEvent {
  export type InputTuple = [
    owner: AddressLike,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    liquidityAmount: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    bottomTick: bigint,
    topTick: bigint,
    liquidityAmount: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    owner: string;
    bottomTick: bigint;
    topTick: bigint;
    liquidityAmount: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    recipient: string,
    bottomTick: bigint,
    topTick: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    owner: string;
    recipient: string;
    bottomTick: bigint;
    topTick: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommunityFeeEvent {
  export type InputTuple = [
    communityFee0New: BigNumberish,
    communityFee1New: BigNumberish
  ];
  export type OutputTuple = [
    communityFee0New: bigint,
    communityFee1New: bigint
  ];
  export interface OutputObject {
    communityFee0New: bigint;
    communityFee1New: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish,
    paid0: BigNumberish,
    paid1: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    amount0: bigint,
    amount1: bigint,
    paid0: bigint,
    paid1: bigint
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    amount0: bigint;
    amount1: bigint;
    paid0: bigint;
    paid1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncentiveEvent {
  export type InputTuple = [virtualPoolAddress: AddressLike];
  export type OutputTuple = [virtualPoolAddress: string];
  export interface OutputObject {
    virtualPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeEvent {
  export type InputTuple = [price: BigNumberish, tick: BigNumberish];
  export type OutputTuple = [price: bigint, tick: bigint];
  export interface OutputObject {
    price: bigint;
    tick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityCooldownEvent {
  export type InputTuple = [liquidityCooldown: BigNumberish];
  export type OutputTuple = [liquidityCooldown: bigint];
  export interface OutputObject {
    liquidityCooldown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    liquidityAmount: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    owner: string,
    bottomTick: bigint,
    topTick: bigint,
    liquidityAmount: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    sender: string;
    owner: string;
    bottomTick: bigint;
    topTick: bigint;
    liquidityAmount: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish,
    price: BigNumberish,
    liquidity: BigNumberish,
    tick: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    amount0: bigint,
    amount1: bigint,
    price: bigint,
    liquidity: bigint,
    tick: bigint
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    amount0: bigint;
    amount1: bigint;
    price: bigint;
    liquidity: bigint;
    tick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAlgebraPool extends BaseContract {
  connect(runner?: ContractRunner | null): IAlgebraPool;
  waitForDeployment(): Promise<this>;

  interface: IAlgebraPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeIncentive: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<
    [bottomTick: BigNumberish, topTick: BigNumberish, amount: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  collect: TypedContractMethod<
    [
      recipient: AddressLike,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount0Requested: BigNumberish,
      amount1Requested: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  dataStorageOperator: TypedContractMethod<[], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  flash: TypedContractMethod<
    [
      recipient: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getInnerCumulatives: TypedContractMethod<
    [bottomTick: BigNumberish, topTick: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        innerTickCumulative: bigint;
        innerSecondsSpentPerLiquidity: bigint;
        innerSecondsSpent: bigint;
      }
    ],
    "view"
  >;

  getTimepoints: TypedContractMethod<
    [secondsAgos: BigNumberish[]],
    [
      [bigint[], bigint[], bigint[], bigint[]] & {
        tickCumulatives: bigint[];
        secondsPerLiquidityCumulatives: bigint[];
        volatilityCumulatives: bigint[];
        volumePerAvgLiquiditys: bigint[];
      }
    ],
    "view"
  >;

  globalState: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        price: bigint;
        tick: bigint;
        fee: bigint;
        timepointIndex: bigint;
        communityFeeToken0: bigint;
        communityFeeToken1: bigint;
        unlocked: boolean;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;

  liquidity: TypedContractMethod<[], [bigint], "view">;

  liquidityCooldown: TypedContractMethod<[], [bigint], "view">;

  maxLiquidityPerTick: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidityActual: bigint;
      }
    ],
    "nonpayable"
  >;

  positions: TypedContractMethod<
    [key: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        liquidityAmount: bigint;
        lastLiquidityAddTimestamp: bigint;
        innerFeeGrowth0Token: bigint;
        innerFeeGrowth1Token: bigint;
        fees0: bigint;
        fees1: bigint;
      }
    ],
    "view"
  >;

  setCommunityFee: TypedContractMethod<
    [communityFee0: BigNumberish, communityFee1: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIncentive: TypedContractMethod<
    [virtualPoolAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setLiquidityCooldown: TypedContractMethod<
    [newLiquidityCooldown: BigNumberish],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [
      recipient: AddressLike,
      zeroToOne: boolean,
      amountSpecified: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  swapSupportingFeeOnInputTokens: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      zeroToOne: boolean,
      amountSpecified: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  tickSpacing: TypedContractMethod<[], [bigint], "view">;

  tickTable: TypedContractMethod<
    [wordPosition: BigNumberish],
    [bigint],
    "view"
  >;

  ticks: TypedContractMethod<
    [tick: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        liquidityTotal: bigint;
        liquidityDelta: bigint;
        outerFeeGrowth0Token: bigint;
        outerFeeGrowth1Token: bigint;
        outerTickCumulative: bigint;
        outerSecondsPerLiquidity: bigint;
        outerSecondsSpent: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  timepoints: TypedContractMethod<
    [index: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint] & {
        initialized: boolean;
        blockTimestamp: bigint;
        tickCumulative: bigint;
        secondsPerLiquidityCumulative: bigint;
        volatilityCumulative: bigint;
        averageTick: bigint;
        volumePerLiquidityCumulative: bigint;
      }
    ],
    "view"
  >;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  totalFeeGrowth0Token: TypedContractMethod<[], [bigint], "view">;

  totalFeeGrowth1Token: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeIncentive"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [bottomTick: BigNumberish, topTick: BigNumberish, amount: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collect"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount0Requested: BigNumberish,
      amount1Requested: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dataStorageOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "flash"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getInnerCumulatives"
  ): TypedContractMethod<
    [bottomTick: BigNumberish, topTick: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        innerTickCumulative: bigint;
        innerSecondsSpentPerLiquidity: bigint;
        innerSecondsSpent: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimepoints"
  ): TypedContractMethod<
    [secondsAgos: BigNumberish[]],
    [
      [bigint[], bigint[], bigint[], bigint[]] & {
        tickCumulatives: bigint[];
        secondsPerLiquidityCumulatives: bigint[];
        volatilityCumulatives: bigint[];
        volumePerAvgLiquiditys: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalState"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        price: bigint;
        tick: bigint;
        fee: bigint;
        timepointIndex: bigint;
        communityFeeToken0: bigint;
        communityFeeToken1: bigint;
        unlocked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxLiquidityPerTick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidityActual: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [key: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        liquidityAmount: bigint;
        lastLiquidityAddTimestamp: bigint;
        innerFeeGrowth0Token: bigint;
        innerFeeGrowth1Token: bigint;
        fees0: bigint;
        fees1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCommunityFee"
  ): TypedContractMethod<
    [communityFee0: BigNumberish, communityFee1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIncentive"
  ): TypedContractMethod<
    [virtualPoolAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidityCooldown"
  ): TypedContractMethod<
    [newLiquidityCooldown: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      zeroToOne: boolean,
      amountSpecified: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapSupportingFeeOnInputTokens"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      zeroToOne: boolean,
      amountSpecified: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tickSpacing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tickTable"
  ): TypedContractMethod<[wordPosition: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticks"
  ): TypedContractMethod<
    [tick: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        liquidityTotal: bigint;
        liquidityDelta: bigint;
        outerFeeGrowth0Token: bigint;
        outerFeeGrowth1Token: bigint;
        outerTickCumulative: bigint;
        outerSecondsPerLiquidity: bigint;
        outerSecondsSpent: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "timepoints"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint] & {
        initialized: boolean;
        blockTimestamp: bigint;
        tickCumulative: bigint;
        secondsPerLiquidityCumulative: bigint;
        volatilityCumulative: bigint;
        averageTick: bigint;
        volumePerLiquidityCumulative: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalFeeGrowth0Token"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFeeGrowth1Token"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "Collect"
  ): TypedContractEvent<
    CollectEvent.InputTuple,
    CollectEvent.OutputTuple,
    CollectEvent.OutputObject
  >;
  getEvent(
    key: "CommunityFee"
  ): TypedContractEvent<
    CommunityFeeEvent.InputTuple,
    CommunityFeeEvent.OutputTuple,
    CommunityFeeEvent.OutputObject
  >;
  getEvent(
    key: "Fee"
  ): TypedContractEvent<
    FeeEvent.InputTuple,
    FeeEvent.OutputTuple,
    FeeEvent.OutputObject
  >;
  getEvent(
    key: "Flash"
  ): TypedContractEvent<
    FlashEvent.InputTuple,
    FlashEvent.OutputTuple,
    FlashEvent.OutputObject
  >;
  getEvent(
    key: "Incentive"
  ): TypedContractEvent<
    IncentiveEvent.InputTuple,
    IncentiveEvent.OutputTuple,
    IncentiveEvent.OutputObject
  >;
  getEvent(
    key: "Initialize"
  ): TypedContractEvent<
    InitializeEvent.InputTuple,
    InitializeEvent.OutputTuple,
    InitializeEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityCooldown"
  ): TypedContractEvent<
    LiquidityCooldownEvent.InputTuple,
    LiquidityCooldownEvent.OutputTuple,
    LiquidityCooldownEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;

  filters: {
    "Burn(address,int24,int24,uint128,uint256,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "Collect(address,address,int24,int24,uint128,uint128)": TypedContractEvent<
      CollectEvent.InputTuple,
      CollectEvent.OutputTuple,
      CollectEvent.OutputObject
    >;
    Collect: TypedContractEvent<
      CollectEvent.InputTuple,
      CollectEvent.OutputTuple,
      CollectEvent.OutputObject
    >;

    "CommunityFee(uint8,uint8)": TypedContractEvent<
      CommunityFeeEvent.InputTuple,
      CommunityFeeEvent.OutputTuple,
      CommunityFeeEvent.OutputObject
    >;
    CommunityFee: TypedContractEvent<
      CommunityFeeEvent.InputTuple,
      CommunityFeeEvent.OutputTuple,
      CommunityFeeEvent.OutputObject
    >;

    "Fee(uint16)": TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;
    Fee: TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;

    "Flash(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      FlashEvent.InputTuple,
      FlashEvent.OutputTuple,
      FlashEvent.OutputObject
    >;
    Flash: TypedContractEvent<
      FlashEvent.InputTuple,
      FlashEvent.OutputTuple,
      FlashEvent.OutputObject
    >;

    "Incentive(address)": TypedContractEvent<
      IncentiveEvent.InputTuple,
      IncentiveEvent.OutputTuple,
      IncentiveEvent.OutputObject
    >;
    Incentive: TypedContractEvent<
      IncentiveEvent.InputTuple,
      IncentiveEvent.OutputTuple,
      IncentiveEvent.OutputObject
    >;

    "Initialize(uint160,int24)": TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;
    Initialize: TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;

    "LiquidityCooldown(uint32)": TypedContractEvent<
      LiquidityCooldownEvent.InputTuple,
      LiquidityCooldownEvent.OutputTuple,
      LiquidityCooldownEvent.OutputObject
    >;
    LiquidityCooldown: TypedContractEvent<
      LiquidityCooldownEvent.InputTuple,
      LiquidityCooldownEvent.OutputTuple,
      LiquidityCooldownEvent.OutputObject
    >;

    "Mint(address,address,int24,int24,uint128,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Swap(address,address,int256,int256,uint160,uint128,int24)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
  };
}
