/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IAlgebraPoolStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeIncentive"
      | "globalState"
      | "liquidity"
      | "liquidityCooldown"
      | "positions"
      | "tickTable"
      | "ticks"
      | "timepoints"
      | "totalFeeGrowth0Token"
      | "totalFeeGrowth1Token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tickTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "timepoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth0Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth1Token",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timepoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth0Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth1Token",
    data: BytesLike
  ): Result;
}

export interface IAlgebraPoolState extends BaseContract {
  connect(runner?: ContractRunner | null): IAlgebraPoolState;
  waitForDeployment(): Promise<this>;

  interface: IAlgebraPoolStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeIncentive: TypedContractMethod<[], [string], "view">;

  globalState: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        price: bigint;
        tick: bigint;
        fee: bigint;
        timepointIndex: bigint;
        communityFeeToken0: bigint;
        communityFeeToken1: bigint;
        unlocked: boolean;
      }
    ],
    "view"
  >;

  liquidity: TypedContractMethod<[], [bigint], "view">;

  liquidityCooldown: TypedContractMethod<[], [bigint], "view">;

  positions: TypedContractMethod<
    [key: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        liquidityAmount: bigint;
        lastLiquidityAddTimestamp: bigint;
        innerFeeGrowth0Token: bigint;
        innerFeeGrowth1Token: bigint;
        fees0: bigint;
        fees1: bigint;
      }
    ],
    "view"
  >;

  tickTable: TypedContractMethod<
    [wordPosition: BigNumberish],
    [bigint],
    "view"
  >;

  ticks: TypedContractMethod<
    [tick: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        liquidityTotal: bigint;
        liquidityDelta: bigint;
        outerFeeGrowth0Token: bigint;
        outerFeeGrowth1Token: bigint;
        outerTickCumulative: bigint;
        outerSecondsPerLiquidity: bigint;
        outerSecondsSpent: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  timepoints: TypedContractMethod<
    [index: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint] & {
        initialized: boolean;
        blockTimestamp: bigint;
        tickCumulative: bigint;
        secondsPerLiquidityCumulative: bigint;
        volatilityCumulative: bigint;
        averageTick: bigint;
        volumePerLiquidityCumulative: bigint;
      }
    ],
    "view"
  >;

  totalFeeGrowth0Token: TypedContractMethod<[], [bigint], "view">;

  totalFeeGrowth1Token: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeIncentive"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalState"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        price: bigint;
        tick: bigint;
        fee: bigint;
        timepointIndex: bigint;
        communityFeeToken0: bigint;
        communityFeeToken1: bigint;
        unlocked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [key: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        liquidityAmount: bigint;
        lastLiquidityAddTimestamp: bigint;
        innerFeeGrowth0Token: bigint;
        innerFeeGrowth1Token: bigint;
        fees0: bigint;
        fees1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tickTable"
  ): TypedContractMethod<[wordPosition: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticks"
  ): TypedContractMethod<
    [tick: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        liquidityTotal: bigint;
        liquidityDelta: bigint;
        outerFeeGrowth0Token: bigint;
        outerFeeGrowth1Token: bigint;
        outerTickCumulative: bigint;
        outerSecondsPerLiquidity: bigint;
        outerSecondsSpent: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "timepoints"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint] & {
        initialized: boolean;
        blockTimestamp: bigint;
        tickCumulative: bigint;
        secondsPerLiquidityCumulative: bigint;
        volatilityCumulative: bigint;
        averageTick: bigint;
        volumePerLiquidityCumulative: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalFeeGrowth0Token"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFeeGrowth1Token"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
