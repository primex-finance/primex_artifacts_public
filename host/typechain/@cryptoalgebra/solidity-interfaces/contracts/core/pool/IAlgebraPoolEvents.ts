/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface IAlgebraPoolEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "Burn"
      | "Collect"
      | "CommunityFee"
      | "Fee"
      | "Flash"
      | "Incentive"
      | "Initialize"
      | "LiquidityCooldown"
      | "Mint"
      | "Swap"
  ): EventFragment;
}

export namespace BurnEvent {
  export type InputTuple = [
    owner: AddressLike,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    liquidityAmount: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    bottomTick: bigint,
    topTick: bigint,
    liquidityAmount: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    owner: string;
    bottomTick: bigint;
    topTick: bigint;
    liquidityAmount: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectEvent {
  export type InputTuple = [
    owner: AddressLike,
    recipient: AddressLike,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    recipient: string,
    bottomTick: bigint,
    topTick: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    owner: string;
    recipient: string;
    bottomTick: bigint;
    topTick: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommunityFeeEvent {
  export type InputTuple = [
    communityFee0New: BigNumberish,
    communityFee1New: BigNumberish
  ];
  export type OutputTuple = [
    communityFee0New: bigint,
    communityFee1New: bigint
  ];
  export interface OutputObject {
    communityFee0New: bigint;
    communityFee1New: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish,
    paid0: BigNumberish,
    paid1: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    amount0: bigint,
    amount1: bigint,
    paid0: bigint,
    paid1: bigint
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    amount0: bigint;
    amount1: bigint;
    paid0: bigint;
    paid1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncentiveEvent {
  export type InputTuple = [virtualPoolAddress: AddressLike];
  export type OutputTuple = [virtualPoolAddress: string];
  export interface OutputObject {
    virtualPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeEvent {
  export type InputTuple = [price: BigNumberish, tick: BigNumberish];
  export type OutputTuple = [price: bigint, tick: bigint];
  export interface OutputObject {
    price: bigint;
    tick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityCooldownEvent {
  export type InputTuple = [liquidityCooldown: BigNumberish];
  export type OutputTuple = [liquidityCooldown: bigint];
  export interface OutputObject {
    liquidityCooldown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    liquidityAmount: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    owner: string,
    bottomTick: bigint,
    topTick: bigint,
    liquidityAmount: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    sender: string;
    owner: string;
    bottomTick: bigint;
    topTick: bigint;
    liquidityAmount: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish,
    price: BigNumberish,
    liquidity: BigNumberish,
    tick: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    amount0: bigint,
    amount1: bigint,
    price: bigint,
    liquidity: bigint,
    tick: bigint
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    amount0: bigint;
    amount1: bigint;
    price: bigint;
    liquidity: bigint;
    tick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAlgebraPoolEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IAlgebraPoolEvents;
  waitForDeployment(): Promise<this>;

  interface: IAlgebraPoolEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "Collect"
  ): TypedContractEvent<
    CollectEvent.InputTuple,
    CollectEvent.OutputTuple,
    CollectEvent.OutputObject
  >;
  getEvent(
    key: "CommunityFee"
  ): TypedContractEvent<
    CommunityFeeEvent.InputTuple,
    CommunityFeeEvent.OutputTuple,
    CommunityFeeEvent.OutputObject
  >;
  getEvent(
    key: "Fee"
  ): TypedContractEvent<
    FeeEvent.InputTuple,
    FeeEvent.OutputTuple,
    FeeEvent.OutputObject
  >;
  getEvent(
    key: "Flash"
  ): TypedContractEvent<
    FlashEvent.InputTuple,
    FlashEvent.OutputTuple,
    FlashEvent.OutputObject
  >;
  getEvent(
    key: "Incentive"
  ): TypedContractEvent<
    IncentiveEvent.InputTuple,
    IncentiveEvent.OutputTuple,
    IncentiveEvent.OutputObject
  >;
  getEvent(
    key: "Initialize"
  ): TypedContractEvent<
    InitializeEvent.InputTuple,
    InitializeEvent.OutputTuple,
    InitializeEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityCooldown"
  ): TypedContractEvent<
    LiquidityCooldownEvent.InputTuple,
    LiquidityCooldownEvent.OutputTuple,
    LiquidityCooldownEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;

  filters: {
    "Burn(address,int24,int24,uint128,uint256,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "Collect(address,address,int24,int24,uint128,uint128)": TypedContractEvent<
      CollectEvent.InputTuple,
      CollectEvent.OutputTuple,
      CollectEvent.OutputObject
    >;
    Collect: TypedContractEvent<
      CollectEvent.InputTuple,
      CollectEvent.OutputTuple,
      CollectEvent.OutputObject
    >;

    "CommunityFee(uint8,uint8)": TypedContractEvent<
      CommunityFeeEvent.InputTuple,
      CommunityFeeEvent.OutputTuple,
      CommunityFeeEvent.OutputObject
    >;
    CommunityFee: TypedContractEvent<
      CommunityFeeEvent.InputTuple,
      CommunityFeeEvent.OutputTuple,
      CommunityFeeEvent.OutputObject
    >;

    "Fee(uint16)": TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;
    Fee: TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;

    "Flash(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      FlashEvent.InputTuple,
      FlashEvent.OutputTuple,
      FlashEvent.OutputObject
    >;
    Flash: TypedContractEvent<
      FlashEvent.InputTuple,
      FlashEvent.OutputTuple,
      FlashEvent.OutputObject
    >;

    "Incentive(address)": TypedContractEvent<
      IncentiveEvent.InputTuple,
      IncentiveEvent.OutputTuple,
      IncentiveEvent.OutputObject
    >;
    Incentive: TypedContractEvent<
      IncentiveEvent.InputTuple,
      IncentiveEvent.OutputTuple,
      IncentiveEvent.OutputObject
    >;

    "Initialize(uint160,int24)": TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;
    Initialize: TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;

    "LiquidityCooldown(uint32)": TypedContractEvent<
      LiquidityCooldownEvent.InputTuple,
      LiquidityCooldownEvent.OutputTuple,
      LiquidityCooldownEvent.OutputObject
    >;
    LiquidityCooldown: TypedContractEvent<
      LiquidityCooldownEvent.InputTuple,
      LiquidityCooldownEvent.OutputTuple,
      LiquidityCooldownEvent.OutputObject
    >;

    "Mint(address,address,int24,int24,uint128,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Swap(address,address,int256,int256,uint160,uint128,int24)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
  };
}
