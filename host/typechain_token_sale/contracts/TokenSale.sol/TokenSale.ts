/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TokenSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowedTokens"
      | "buy"
      | "changeAllowedTokens"
      | "changeMaxSaleAmount"
      | "changeSalePrice"
      | "changeTimestamps"
      | "claim"
      | "claimTime"
      | "getAvailableAmount"
      | "initialize"
      | "maxSaleAmount"
      | "owner"
      | "pmx"
      | "renounceOwnership"
      | "retrieveToken"
      | "saleEnd"
      | "salePrice"
      | "saleStart"
      | "tokenMultiplier"
      | "totalClaimed"
      | "totalSold"
      | "transferOwnership"
      | "userBalances"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Buying"
      | "Claiming"
      | "Initialized"
      | "OwnershipTransferred"
      | "RateChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAllowedTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxSaleAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTimestamps",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSaleAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "saleEnd", values?: undefined): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "saleStart", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMultiplier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxSaleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSaleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
}

export namespace BuyingEvent {
  export type InputTuple = [buyer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [buyer: string, amount: bigint];
  export interface OutputObject {
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimingEvent {
  export type InputTuple = [claimer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [claimer: string, amount: bigint];
  export interface OutputObject {
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateChangedEvent {
  export type InputTuple = [rate: BigNumberish];
  export type OutputTuple = [rate: bigint];
  export interface OutputObject {
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenSale extends BaseContract {
  connect(runner?: ContractRunner | null): TokenSale;
  waitForDeployment(): Promise<this>;

  interface: TokenSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowedTokens: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  buy: TypedContractMethod<
    [_investmentAmount: BigNumberish, _buyForToken: AddressLike],
    [void],
    "nonpayable"
  >;

  changeAllowedTokens: TypedContractMethod<
    [_allowedTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  changeMaxSaleAmount: TypedContractMethod<
    [_maxSaleAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeSalePrice: TypedContractMethod<
    [_salePrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeTimestamps: TypedContractMethod<
    [
      _saleStart: BigNumberish,
      _saleEnd: BigNumberish,
      _claimTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  claimTime: TypedContractMethod<[], [bigint], "view">;

  getAvailableAmount: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _pmx: AddressLike,
      _saleStart: BigNumberish,
      _saleEnd: BigNumberish,
      _claimTime: BigNumberish,
      _salePrice: BigNumberish,
      _maxSaleAmount: BigNumberish,
      _allowedTokens: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  maxSaleAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pmx: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retrieveToken: TypedContractMethod<
    [_tokenAddr: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  saleEnd: TypedContractMethod<[], [bigint], "view">;

  salePrice: TypedContractMethod<[], [bigint], "view">;

  saleStart: TypedContractMethod<[], [bigint], "view">;

  tokenMultiplier: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  totalClaimed: TypedContractMethod<[], [bigint], "view">;

  totalSold: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userBalances: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowedTokens"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [_investmentAmount: BigNumberish, _buyForToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeAllowedTokens"
  ): TypedContractMethod<[_allowedTokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMaxSaleAmount"
  ): TypedContractMethod<[_maxSaleAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeSalePrice"
  ): TypedContractMethod<[_salePrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeTimestamps"
  ): TypedContractMethod<
    [
      _saleStart: BigNumberish,
      _saleEnd: BigNumberish,
      _claimTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _pmx: AddressLike,
      _saleStart: BigNumberish,
      _saleEnd: BigNumberish,
      _claimTime: BigNumberish,
      _salePrice: BigNumberish,
      _maxSaleAmount: BigNumberish,
      _allowedTokens: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxSaleAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retrieveToken"
  ): TypedContractMethod<
    [_tokenAddr: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "saleEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "salePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "saleStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenMultiplier"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userBalances"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getEvent(
    key: "Buying"
  ): TypedContractEvent<
    BuyingEvent.InputTuple,
    BuyingEvent.OutputTuple,
    BuyingEvent.OutputObject
  >;
  getEvent(
    key: "Claiming"
  ): TypedContractEvent<
    ClaimingEvent.InputTuple,
    ClaimingEvent.OutputTuple,
    ClaimingEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RateChanged"
  ): TypedContractEvent<
    RateChangedEvent.InputTuple,
    RateChangedEvent.OutputTuple,
    RateChangedEvent.OutputObject
  >;

  filters: {
    "Buying(address,uint256)": TypedContractEvent<
      BuyingEvent.InputTuple,
      BuyingEvent.OutputTuple,
      BuyingEvent.OutputObject
    >;
    Buying: TypedContractEvent<
      BuyingEvent.InputTuple,
      BuyingEvent.OutputTuple,
      BuyingEvent.OutputObject
    >;

    "Claiming(address,uint256)": TypedContractEvent<
      ClaimingEvent.InputTuple,
      ClaimingEvent.OutputTuple,
      ClaimingEvent.OutputObject
    >;
    Claiming: TypedContractEvent<
      ClaimingEvent.InputTuple,
      ClaimingEvent.OutputTuple,
      ClaimingEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RateChanged(uint256)": TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;
    RateChanged: TypedContractEvent<
      RateChangedEvent.InputTuple,
      RateChangedEvent.OutputTuple,
      RateChangedEvent.OutputObject
    >;
  };
}
